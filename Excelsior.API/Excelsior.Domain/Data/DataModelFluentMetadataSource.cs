#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FluentMappingGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using Excelsior.Domain;
using Telerik.OpenAccess.Metadata.Relational;

namespace Excelsior.Domain
{
	public partial class DataModelFluentMetadataSource : FluentMetadataSource
	{
		protected override IList<MappingConfiguration> PrepareMapping()
		{
			List<MappingConfiguration> mappingConfigurations = new List<MappingConfiguration>();
			
			MappingConfiguration<PACS_Trial> pacs_trialConfiguration = this.GetPACS_TrialMappingConfiguration();
			mappingConfigurations.Add(pacs_trialConfiguration);
			
			MappingConfiguration<PACS_TPProcList> pacs_tpproclistConfiguration = this.GetPACS_TPProcListMappingConfiguration();
			mappingConfigurations.Add(pacs_tpproclistConfiguration);
			
			MappingConfiguration<PACS_TimePointsList> pacs_timepointslistConfiguration = this.GetPACS_TimePointsListMappingConfiguration();
			mappingConfigurations.Add(pacs_timepointslistConfiguration);
			
			MappingConfiguration<PACS_Site> pacs_siteConfiguration = this.GetPACS_SiteMappingConfiguration();
			mappingConfigurations.Add(pacs_siteConfiguration);
			
			MappingConfiguration<CONTACT_User> contact_userConfiguration = this.GetCONTACT_UserMappingConfiguration();
			mappingConfigurations.Add(contact_userConfiguration);
			
			MappingConfiguration<CONTACT_TrialSponsor> contact_trialsponsorConfiguration = this.GetCONTACT_TrialSponsorMappingConfiguration();
			mappingConfigurations.Add(contact_trialsponsorConfiguration);
			
			MappingConfiguration<CONTACT_Equipment> contact_equipmentConfiguration = this.GetCONTACT_EquipmentMappingConfiguration();
			mappingConfigurations.Add(contact_equipmentConfiguration);
			
			MappingConfiguration<CONTACT_EquipmentModel> contact_equipmentmodelConfiguration = this.GetCONTACT_EquipmentModelMappingConfiguration();
			mappingConfigurations.Add(contact_equipmentmodelConfiguration);
			
			MappingConfiguration<CONTACT_Affiliation> contact_affiliationConfiguration = this.GetCONTACT_AffiliationMappingConfiguration();
			mappingConfigurations.Add(contact_affiliationConfiguration);
			
			MappingConfiguration<CERT_ImgProcedureList> cert_imgprocedurelistConfiguration = this.GetCERT_ImgProcedureListMappingConfiguration();
			mappingConfigurations.Add(cert_imgprocedurelistConfiguration);
			
			MappingConfiguration<Aspnet_User> aspnet_userConfiguration = this.GetAspnet_UserMappingConfiguration();
			mappingConfigurations.Add(aspnet_userConfiguration);
			
			MappingConfiguration<Aspnet_Membership> aspnet_membershipConfiguration = this.GetAspnet_MembershipMappingConfiguration();
			mappingConfigurations.Add(aspnet_membershipConfiguration);
			
			MappingConfiguration<CERT_Result> cert_resultConfiguration = this.GetCERT_ResultMappingConfiguration();
			mappingConfigurations.Add(cert_resultConfiguration);
			
			MappingConfiguration<CERT_QuestionList> cert_questionlistConfiguration = this.GetCERT_QuestionListMappingConfiguration();
			mappingConfigurations.Add(cert_questionlistConfiguration);
			
			MappingConfiguration<Aspnet_Role> aspnet_roleConfiguration = this.GetAspnet_RoleMappingConfiguration();
			mappingConfigurations.Add(aspnet_roleConfiguration);
			
			MappingConfiguration<Aspnet_Application> aspnet_applicationConfiguration = this.GetAspnet_ApplicationMappingConfiguration();
			mappingConfigurations.Add(aspnet_applicationConfiguration);
			
			MappingConfiguration<WF_TempStep> wf_tempstepConfiguration = this.GetWF_TempStepMappingConfiguration();
			mappingConfigurations.Add(wf_tempstepConfiguration);
			
			MappingConfiguration<WF_Template> wf_templateConfiguration = this.GetWF_TemplateMappingConfiguration();
			mappingConfigurations.Add(wf_templateConfiguration);
			
			MappingConfiguration<WF_StepList> wf_steplistConfiguration = this.GetWF_StepListMappingConfiguration();
			mappingConfigurations.Add(wf_steplistConfiguration);
			
			MappingConfiguration<PACS_Series> pacs_seriesConfiguration = this.GetPACS_SeriesMappingConfiguration();
			mappingConfigurations.Add(pacs_seriesConfiguration);
			
			MappingConfiguration<WF_Sequence> wf_sequenceConfiguration = this.GetWF_SequenceMappingConfiguration();
			mappingConfigurations.Add(wf_sequenceConfiguration);
			
			MappingConfiguration<PACS_RawDatum> pacs_rawdatumConfiguration = this.GetPACS_RawDatumMappingConfiguration();
			mappingConfigurations.Add(pacs_rawdatumConfiguration);
			
			MappingConfiguration<PACS_DicomEPDF> pacs_dicomepdfConfiguration = this.GetPACS_DicomEPDFMappingConfiguration();
			mappingConfigurations.Add(pacs_dicomepdfConfiguration);
			
			MappingConfiguration<PACS_DicomOP> pacs_dicomopConfiguration = this.GetPACS_DicomOPMappingConfiguration();
			mappingConfigurations.Add(pacs_dicomopConfiguration);
			
			MappingConfiguration<PACS_DicomOPT> pacs_dicomoptConfiguration = this.GetPACS_DicomOPTMappingConfiguration();
			mappingConfigurations.Add(pacs_dicomoptConfiguration);
			
			MappingConfiguration<CONTACT_UserTrial> contact_usertrialConfiguration = this.GetCONTACT_UserTrialMappingConfiguration();
			mappingConfigurations.Add(contact_usertrialConfiguration);
			
			MappingConfiguration<CERT_User> cert_userConfiguration = this.GetCERT_UserMappingConfiguration();
			mappingConfigurations.Add(cert_userConfiguration);
			
			MappingConfiguration<CERT_Equipment> cert_equipmentConfiguration = this.GetCERT_EquipmentMappingConfiguration();
			mappingConfigurations.Add(cert_equipmentConfiguration);
			
			MappingConfiguration<UPLD_UploadInfo> upld_uploadinfoConfiguration = this.GetUPLD_UploadInfoMappingConfiguration();
			mappingConfigurations.Add(upld_uploadinfoConfiguration);
			
			MappingConfiguration<PACS_DataType> pacs_datatypeConfiguration = this.GetPACS_DataTypeMappingConfiguration();
			mappingConfigurations.Add(pacs_datatypeConfiguration);
			
			MappingConfiguration<PACS_DicomFrame> pacs_dicomframeConfiguration = this.GetPACS_DicomFrameMappingConfiguration();
			mappingConfigurations.Add(pacs_dicomframeConfiguration);
			
			MappingConfiguration<GRD_ReportResult> grd_reportresultConfiguration = this.GetGRD_ReportResultMappingConfiguration();
			mappingConfigurations.Add(grd_reportresultConfiguration);
			
			MappingConfiguration<GRD_QuestionTag> grd_questiontagConfiguration = this.GetGRD_QuestionTagMappingConfiguration();
			mappingConfigurations.Add(grd_questiontagConfiguration);
			
			MappingConfiguration<GRD_GradingQuestion> grd_gradingquestionConfiguration = this.GetGRD_GradingQuestionMappingConfiguration();
			mappingConfigurations.Add(grd_gradingquestionConfiguration);
			
			MappingConfiguration<GRD_GradingAnswer> grd_gradinganswerConfiguration = this.GetGRD_GradingAnswerMappingConfiguration();
			mappingConfigurations.Add(grd_gradinganswerConfiguration);
			
			MappingConfiguration<GRD_GradingTemplate> grd_gradingtemplateConfiguration = this.GetGRD_GradingTemplateMappingConfiguration();
			mappingConfigurations.Add(grd_gradingtemplateConfiguration);
			
			MappingConfiguration<GRD_QuestionGroup> grd_questiongroupConfiguration = this.GetGRD_QuestionGroupMappingConfiguration();
			mappingConfigurations.Add(grd_questiongroupConfiguration);
			
			MappingConfiguration<GRD_TempQuestion> grd_tempquestionConfiguration = this.GetGRD_TempQuestionMappingConfiguration();
			mappingConfigurations.Add(grd_tempquestionConfiguration);
			
			MappingConfiguration<GRD_Dependency> grd_dependencyConfiguration = this.GetGRD_DependencyMappingConfiguration();
			mappingConfigurations.Add(grd_dependencyConfiguration);
			
			MappingConfiguration<QRY_Message> qry_messageConfiguration = this.GetQRY_MessageMappingConfiguration();
			mappingConfigurations.Add(qry_messageConfiguration);
			
			MappingConfiguration<EXCELSIOR_SYSTEM> excelsior_systemConfiguration = this.GetEXCELSIOR_SYSTEMMappingConfiguration();
			mappingConfigurations.Add(excelsior_systemConfiguration);
			
			MappingConfiguration<PACS_TrialKeyMetric> pacs_trialkeymetricConfiguration = this.GetPACS_TrialKeyMetricMappingConfiguration();
			mappingConfigurations.Add(pacs_trialkeymetricConfiguration);
			
			MappingConfiguration<CONTACT_Country> contact_countryConfiguration = this.GetCONTACT_CountryMappingConfiguration();
			mappingConfigurations.Add(contact_countryConfiguration);
			
			MappingConfiguration<PACS_ProcessedDatum> pacs_processeddatumConfiguration = this.GetPACS_ProcessedDatumMappingConfiguration();
			mappingConfigurations.Add(pacs_processeddatumConfiguration);
			
			MappingConfiguration<WF_CategoryFlag> wf_categoryflagConfiguration = this.GetWF_CategoryFlagMappingConfiguration();
			mappingConfigurations.Add(wf_categoryflagConfiguration);
			
			MappingConfiguration<CONTACT_TrialReadingCenter> contact_trialreadingcenterConfiguration = this.GetCONTACT_TrialReadingCenterMappingConfiguration();
			mappingConfigurations.Add(contact_trialreadingcenterConfiguration);
			
			MappingConfiguration<AUDIT_Action> audit_actionConfiguration = this.GetAUDIT_ActionMappingConfiguration();
			mappingConfigurations.Add(audit_actionConfiguration);
			
			MappingConfiguration<AUDIT_CRUDAudit> audit_crudauditConfiguration = this.GetAUDIT_CRUDAuditMappingConfiguration();
			mappingConfigurations.Add(audit_crudauditConfiguration);
			
			MappingConfiguration<QRY_Query> qry_queryConfiguration = this.GetQRY_QueryMappingConfiguration();
			mappingConfigurations.Add(qry_queryConfiguration);

            MappingConfiguration<QRY_Status> qry_statusConfiguration = this.GetQRY_StatusMappingConfiguration();
            mappingConfigurations.Add(qry_statusConfiguration);

            MappingConfiguration<GRD_Report> grd_reportConfiguration = this.GetGRD_ReportMappingConfiguration();
			mappingConfigurations.Add(grd_reportConfiguration);
			
			MappingConfiguration<PACS_Subject> pacs_subjectConfiguration = this.GetPACS_SubjectMappingConfiguration();
			mappingConfigurations.Add(pacs_subjectConfiguration);
			
			MappingConfiguration<PACS_TimePoint> pacs_timepointConfiguration = this.GetPACS_TimePointMappingConfiguration();
			mappingConfigurations.Add(pacs_timepointConfiguration);
			
			MappingConfiguration<CERT_UploadInfo> cert_uploadinfoConfiguration = this.GetCERT_UploadInfoMappingConfiguration();
			mappingConfigurations.Add(cert_uploadinfoConfiguration);
			
			MappingConfiguration<AUDIT_Record> audit_recordConfiguration = this.GetAUDIT_RecordMappingConfiguration();
			mappingConfigurations.Add(audit_recordConfiguration);
			
			MappingConfiguration<PACS_SeriesComment> pacs_seriescommentConfiguration = this.GetPACS_SeriesCommentMappingConfiguration();
			mappingConfigurations.Add(pacs_seriescommentConfiguration);
			
			MappingConfiguration<PACS_RawDataStatus> pacs_rawdatastatusConfiguration = this.GetPACS_RawDataStatusMappingConfiguration();
			mappingConfigurations.Add(pacs_rawdatastatusConfiguration);
			
			MappingConfiguration<PACS_DicomWSI> pacs_dicomwsiConfiguration = this.GetPACS_DicomWSIMappingConfiguration();
			mappingConfigurations.Add(pacs_dicomwsiConfiguration);
			
			MappingConfiguration<CONTACT_UserNotification> contact_usernotificationConfiguration = this.GetCONTACT_UserNotificationMappingConfiguration();
			mappingConfigurations.Add(contact_usernotificationConfiguration);
			
			MappingConfiguration<CONTACT_Notification> contact_notificationConfiguration = this.GetCONTACT_NotificationMappingConfiguration();
			mappingConfigurations.Add(contact_notificationConfiguration);
			
			MappingConfiguration<CONTACT_NotificationRole> contact_notificationroleConfiguration = this.GetCONTACT_NotificationRoleMappingConfiguration();
			mappingConfigurations.Add(contact_notificationroleConfiguration);
			
			MappingConfiguration<PACS_SubjectGroup> pacs_subjectgroupConfiguration = this.GetPACS_SubjectGroupMappingConfiguration();
			mappingConfigurations.Add(pacs_subjectgroupConfiguration);
			
			MappingConfiguration<PACS_SubjectCohort> pacs_subjectcohortConfiguration = this.GetPACS_SubjectCohortMappingConfiguration();
			mappingConfigurations.Add(pacs_subjectcohortConfiguration);
			
			MappingConfiguration<CONTACT_UserAffiliation> contact_useraffiliationConfiguration = this.GetCONTACT_UserAffiliationMappingConfiguration();
			mappingConfigurations.Add(contact_useraffiliationConfiguration);

			MappingConfiguration<PACS_SeriesGroup> pacs_seriesgroupConfiguration = this.GetPACS_SeriesGroupMappingConfiguration();
			mappingConfigurations.Add(pacs_seriesgroupConfiguration);
			
			MappingConfiguration<RPT_TrialReport> rpt_trialreportConfiguration = this.GetRPT_TrialReportMappingConfiguration();
			mappingConfigurations.Add(rpt_trialreportConfiguration);
			
			MappingConfiguration<RPT_Report> rpt_reportConfiguration = this.GetRPT_ReportMappingConfiguration();
			mappingConfigurations.Add(rpt_reportConfiguration);
			
			MappingConfiguration<RPT_ReportCategory> rpt_reportcategoryConfiguration = this.GetRPT_ReportCategoryMappingConfiguration();
			mappingConfigurations.Add(rpt_reportcategoryConfiguration);
			
			MappingConfiguration<RPT_TrialReportRole> rpt_trialreportroleConfiguration = this.GetRPT_TrialReportRoleMappingConfiguration();
			mappingConfigurations.Add(rpt_trialreportroleConfiguration);
			
			MappingConfiguration<BGD_JobStatus> bgd_jobstatusConfiguration = this.GetBGD_JobStatusMappingConfiguration();
			mappingConfigurations.Add(bgd_jobstatusConfiguration);
			
			MappingConfiguration<BGD_Job> bgd_jobConfiguration = this.GetBGD_JobMappingConfiguration();
			mappingConfigurations.Add(bgd_jobConfiguration);

			MappingConfiguration<CFG_AnimalSpecy> cfg_animalspecyConfiguration = this.GetCFG_AnimalSpecyMappingConfiguration();
			mappingConfigurations.Add(cfg_animalspecyConfiguration);
			
			MappingConfiguration<GRD_Impression> grd_impressionConfiguration = this.GetGRD_ImpressionMappingConfiguration();
			mappingConfigurations.Add(grd_impressionConfiguration);

            #region CRF 

            MappingConfiguration<CRF_DataRELREC> crf_datarelrecConfiguration = this.GetCRF_DataRELRECMappingConfiguration();
            mappingConfigurations.Add(crf_datarelrecConfiguration);

            MappingConfiguration<CRF_DataResult> crf_dataresultConfiguration = this.GetCRF_DataResultMappingConfiguration();
            mappingConfigurations.Add(crf_dataresultConfiguration);

            MappingConfiguration<CRF_Datum> crf_dataConfiguration = this.GetCRF_DataMappingConfiguration();
            mappingConfigurations.Add(crf_dataConfiguration);

            MappingConfiguration<CRF_AnswerType> crf_answertypeConfiguration = this.GetCRF_AnswerTypeMappingConfiguration();
            mappingConfigurations.Add(crf_answertypeConfiguration);

            MappingConfiguration<CRF_AnswerValidation> crf_answervalidationConfiguration = this.GetCRF_AnswerValidationMappingConfiguration();
            mappingConfigurations.Add(crf_answervalidationConfiguration);

            MappingConfiguration<CRF_TemplateAnswer> crf_templateanswerConfiguration = this.GetCRF_TemplateAnswerMappingConfiguration();
            mappingConfigurations.Add(crf_templateanswerConfiguration);

            MappingConfiguration<CRF_TemplateDependency> crf_templatedependencyConfiguration = this.GetCRF_TemplateDependencyMappingConfiguration();
            mappingConfigurations.Add(crf_templatedependencyConfiguration);

            MappingConfiguration<CRF_TemplateDependencySource> crf_templatedependencysourceConfiguration = this.GetCRF_TemplateDependencySourceMappingConfiguration();
            mappingConfigurations.Add(crf_templatedependencysourceConfiguration);

            MappingConfiguration<CRF_TemplateGroup> crf_templategroupConfiguration = this.GetCRF_TemplateGroupMappingConfiguration();
            mappingConfigurations.Add(crf_templategroupConfiguration);

            MappingConfiguration<CRF_TemplateQuestion> crf_templatequestionConfiguration = this.GetCRF_TemplateQuestionMappingConfiguration();
            mappingConfigurations.Add(crf_templatequestionConfiguration);

            MappingConfiguration<CRF_TemplateQuestionTag> crf_templatequestiontagConfiguration = this.GetCRF_TemplateQuestionTagMappingConfiguration();
            mappingConfigurations.Add(crf_templatequestiontagConfiguration);

            MappingConfiguration<CRF_Template> crf_templateConfiguration = this.GetCRF_TemplateMappingConfiguration();
            mappingConfigurations.Add(crf_templateConfiguration);

            #endregion

            #region MEA

            MappingConfiguration<MEA_Freehand> mea_freehandConfiguration = this.GetMEA_FreehandMappingConfiguration();
            mappingConfigurations.Add(mea_freehandConfiguration);

            MappingConfiguration<MEA_DeltaVolume> mea_deltavolumeConfiguration = this.GetMEA_DeltaVolumeMappingConfiguration();
            mappingConfigurations.Add(mea_deltavolumeConfiguration);

            MappingConfiguration<MEA_MeasDataType> mea_measdatatypeConfiguration = this.GetMEA_MeasDataTypeMappingConfiguration();
            mappingConfigurations.Add(mea_measdatatypeConfiguration);

            MappingConfiguration<MEA_OCTLayer> mea_octlayerConfiguration = this.GetMEA_OCTLayerMappingConfiguration();
            mappingConfigurations.Add(mea_octlayerConfiguration);

            MappingConfiguration<MEA_OCTGrid> mea_octgridConfiguration = this.GetMEA_OCTGridMappingConfiguration();
            mappingConfigurations.Add(mea_octgridConfiguration);

            MappingConfiguration<MEA_ETDRSGrid> mea_etdrsgridConfiguration = this.GetMEA_ETDRSGridMappingConfiguration();
            mappingConfigurations.Add(mea_etdrsgridConfiguration);

            MappingConfiguration<MEA_Distance> mea_distanceConfiguration = this.GetMEA_DistanceMappingConfiguration();
            mappingConfigurations.Add(mea_distanceConfiguration);

            MappingConfiguration<MEA_Area> mea_areaConfiguration = this.GetMEA_AreaMappingConfiguration();
            mappingConfigurations.Add(mea_areaConfiguration);

            MappingConfiguration<MEA_Measurement> mea_measurementConfiguration = this.GetMEA_MeasurementMappingConfiguration();
            mappingConfigurations.Add(mea_measurementConfiguration);

            MappingConfiguration<MEA_MeasurementType> mea_measurementtypeConfiguration = this.GetMEA_MeasurementTypeMappingConfiguration();
            mappingConfigurations.Add(mea_measurementtypeConfiguration);

            MappingConfiguration<MEA_Stencil> mea_stencilConfiguration = this.GetMEA_StencilMappingConfiguration();
            mappingConfigurations.Add(mea_stencilConfiguration);

            #endregion

            #region AUTH

            MappingConfiguration<AUTH_Client> auth_clientConfiguration = this.GetAUTH_ClientMappingConfiguration();
            mappingConfigurations.Add(auth_clientConfiguration);

            MappingConfiguration<AUTH_ClientScope> auth_clientScopeConfiguration = this.GetAUTH_ClientScopeMappingConfiguration();
            mappingConfigurations.Add(auth_clientScopeConfiguration);

            MappingConfiguration<AUTH_ClientSecret> auth_clientSecretConfiguration = this.GetAUTH_ClientSecretMappingConfiguration();
            mappingConfigurations.Add(auth_clientSecretConfiguration);

            MappingConfiguration<AUTH_Scope> auth_scopeConfiguration = this.GetAUTH_ScopeMappingConfiguration();
            mappingConfigurations.Add(auth_scopeConfiguration);

            MappingConfiguration<AUTH_ScopeClaim> auth_scopeClaimConfiguration = this.GetAUTH_ScopeClaimMappingConfiguration();
            mappingConfigurations.Add(auth_scopeClaimConfiguration);

            #endregion

            #region PACS

            #region PACS_SeriesAttachments

            MappingConfiguration<PACS_SeriesAttachment> pacs_seriesattachmentsConfiguration = this.GetPACS_SeriesAttachmentsMappingConfiguration();
            mappingConfigurations.Add(pacs_seriesattachmentsConfiguration);

            #endregion

            #endregion

            #region DOCU

            MappingConfiguration<DOCU_AuthorizationType> docu_authorizationtypeConfiguration = this.GetDOCU_AuthorizationTypeMappingConfiguration();
            mappingConfigurations.Add(docu_authorizationtypeConfiguration);

            MappingConfiguration<DOCU_DocumentVersion> docu_documentversionConfiguration = this.GetDOCU_DocumentVersionMappingConfiguration();
            mappingConfigurations.Add(docu_documentversionConfiguration);

            MappingConfiguration<DOCU_DocumentGroup> docu_documentgroupConfiguration = this.GetDOCU_DocumentGroupMappingConfiguration();
            mappingConfigurations.Add(docu_documentgroupConfiguration);

            MappingConfiguration<DOCU_Document> docu_documentConfiguration = this.GetDOCU_DocumentMappingConfiguration();
            mappingConfigurations.Add(docu_documentConfiguration);

            MappingConfiguration<DOCU_DocumentUser> docu_documentuserConfiguration = this.GetDOCU_DocumentUserMappingConfiguration();
            mappingConfigurations.Add(docu_documentuserConfiguration);

            MappingConfiguration<DOCU_DocumentRole> docu_documentroleConfiguration = this.GetDOCU_DocumentRoleMappingConfiguration();
            mappingConfigurations.Add(docu_documentroleConfiguration);

            MappingConfiguration<DOCU_DocumentVersionUser> docu_documentversionuserConfiguration = this.GetDOCU_DocumentVersionUserMappingConfiguration();
            mappingConfigurations.Add(docu_documentversionuserConfiguration);

            #endregion

            return mappingConfigurations;
		}
		
		protected override void SetContainerSettings(MetadataContainer container)
		{
			container.Name = "DataModel";
			container.DefaultNamespace = "Excelsior.Domain";
		}

		public MappingConfiguration<PACS_Trial> GetPACS_TrialMappingConfiguration()
		{
			MappingConfiguration<PACS_Trial> configuration = this.GetPACS_TrialClassConfiguration();
			this.PreparePACS_TrialPropertyConfigurations(configuration);
			this.PreparePACS_TrialAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_Trial> GetPACS_TrialClassConfiguration()
		{
			MappingConfiguration<PACS_Trial> configuration = new MappingConfiguration<PACS_Trial>();
            configuration.HasDiscriminatorValue("{no}");
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).Inheritance(InheritanceStrategy.Default).ToTable("PACS_Trial");
	
			return configuration;
		}
	
		public void PreparePACS_TrialPropertyConfigurations(MappingConfiguration<PACS_Trial> configuration)
		{
			configuration.HasProperty(x => x.TrialStartDate).HasFieldName("_TrialStartDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialStartDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.TrialPhase).HasFieldName("_TrialPhase").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialPhase").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.TrialName).HasFieldName("_TrialName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialName").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.TrialLocations).HasFieldName("_TrialLocations").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialLocations").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.TrialID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TrialEndDate).HasFieldName("_TrialEndDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialEndDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.TrialArm).HasFieldName("_TrialArm").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialArm").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.TrialAlias).HasFieldName("_TrialAlias").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialAlias").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.TherapeuticClass).HasFieldName("_TherapeuticClass").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TherapeuticClass").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.ProtocolTitle).HasFieldName("_ProtocolTitle").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ProtocolTitle").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.PrimaryDrugs).HasFieldName("_PrimaryDrugs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PrimaryDrugs").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.OtherDrugs).HasFieldName("_OtherDrugs").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("OtherDrugs").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.NeedCertification).HasFieldName("_NeedCertification").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("NeedCertification").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.LastSubjectVisitDate).HasFieldName("_LastSubjectVisitDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastSubjectVisitDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.LastSubjectEnrollDate).HasFieldName("_LastSubjectEnrollDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastSubjectEnrollDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.LastDataExportDate).HasFieldName("_LastDataExportDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastDataExportDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.IsValidated).HasFieldName("_IsValidated").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsValidated").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.FirstSubjectEnrollDate).HasFieldName("_FirstSubjectEnrollDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FirstSubjectEnrollDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.FirstDataExportDate).HasFieldName("_FirstDataExportDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FirstDataExportDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.DiseaseType).HasFieldName("_DiseaseType").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DiseaseType").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.IsEligibilityIDUsed).HasFieldName("_IsEligibilityIDUsed").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsEligibilityIDUsed").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsCompletedPublic).HasFieldName("_IsCompletedPublic").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsCompletedPublic").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.SubjectSeg).HasFieldName("_SubjectSeg").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SubjectSeg").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.IsSubjectNameCodeRequired).HasFieldName("_IsSubjectNameCodeRequired").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsSubjectNameCodeRequired").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsLocked).HasFieldName("_IsLocked").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsLocked").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsTestingPhase).HasFieldName("_IsTestingPhase").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsTestingPhase").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsEligibilityCloningEnabled).HasFieldName("_IsEligibilityCloningEnabled").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsEligibilityCloningEnabled").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.ShouldEligibleLateralityBeDetermined).HasFieldName("_ShouldEligibleLateralityBeDetermined").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ShouldEligibleLateralityBeDetermined").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsSubjectGenderRequired).HasFieldName("_IsSubjectGenderRequired").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsSubjectGenderRequired").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.SubjectNameCodeMask).HasFieldName("_SubjectNameCodeMask").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SubjectNameCodeMask").IsNullable().HasColumnType("nvarchar").HasLength(64);
			configuration.HasProperty(x => x.SubjectIDMask).HasFieldName("_SubjectIDMask").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SubjectIDMask").IsNullable().HasColumnType("nvarchar").HasLength(64);
			configuration.HasProperty(x => x.SubjectAlternativeIDMask).HasFieldName("_SubjectAlternativeIDMask").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SubjectAlternativeIDMask").IsNullable().HasColumnType("nvarchar").HasLength(64);
			configuration.HasProperty(x => x.IsSubjectBirthYearRequired).HasFieldName("_IsSubjectBirthYearRequired").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsSubjectBirthYearRequired").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.AnimalSpeciesID).HasFieldName("_AnimalSpeciesID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AnimalSpeciesID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ImpressionID).HasFieldName("_ImpressionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImpressionID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TrialLockedDate).HasFieldName("_TrialLockedDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialLockedDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.AlwaysVerifyMultipleGrades).HasFieldName("_AlwaysVerifyMultipleGrades").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AlwaysVerifyMultipleGrades").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.IsHostBothLaterality).HasFieldName("_IsHostBothLaterality").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsHostBothLaterality").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PreparePACS_TrialAssociationConfigurations(MappingConfiguration<PACS_Trial> configuration)
		{
			configuration.HasAssociation(x => x.CFGAnimalSpecy).HasFieldName("_CFGAnimalSpecy").WithOpposite(x => x.PACS_Trials).ToColumn("AnimalSpeciesID").HasConstraint((x, y) =>  x.AnimalSpeciesID == y.AnimalSpeciesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRDImpression).HasFieldName("_GRDImpression").WithOpposite(x => x.PACS_Trials).ToColumn("ImpressionID").HasConstraint((x, y) =>  x.ImpressionID == y.ImpressionID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_TimePointsLists).HasFieldName("_PACSTimePointsLists").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_Sites).HasFieldName("_PACSSites").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CONTACT_TrialSponsors).HasFieldName("_CONTACTTrialSponsors").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CONTACT_UserTrials).HasFieldName("_CONTACTUserTrials").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CERT_Equipments).HasFieldName("_CERTEquipments").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.GRD_GradingTemplates).HasFieldName("_GRDGradingTemplates").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.WF_Templates).HasFieldName("_WFTemplates").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CONTACT_TrialReadingCenters).HasFieldName("_CONTACTTrialReadingCenters").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.DOCU_DocumentGroups).HasFieldName("_DOCUDocumentGroups").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.QRY_Queries).HasFieldName("_QRYQueries").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            //configuration.HasAssociation(x => x.AUDIT_Records).HasFieldName("_AUDITRecords").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_SubjectGroups).HasFieldName("_PACSSubjectGroups").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_SubjectCohorts).HasFieldName("_PACSSubjectCohorts").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.RPT_TrialReports).HasFieldName("_RPTTrialReports").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.BGD_Jobs).HasFieldName("_BGDJobs").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.GRD_GradingAnswers).HasFieldName("_GRDGradingAnswers").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_Templates).HasFieldName("_CRFTemplates").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.MEA_Stencils).HasFieldName("_MEAStencils").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_AnswerValidations).HasFieldName("_CRFAnswerValidations").WithOpposite(x => x.PACSTrial).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CERT_ImgProcedureLists).HasFieldName("_CERTImgProcedureLists").WithOpposite(x => x.PACS_Trials).IsManaged().MapJoinTable("PACS_TrialProcedures", (t, p) => new
            {
                TrialID = t.TrialID,
                ImgProcedureID = p.ImgProcedureID
            });
        }

        public MappingConfiguration<PACS_TPProcList> GetPACS_TPProcListMappingConfiguration()
		{
			MappingConfiguration<PACS_TPProcList> configuration = this.GetPACS_TPProcListClassConfiguration();
			this.PreparePACS_TPProcListPropertyConfigurations(configuration);
			this.PreparePACS_TPProcListAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_TPProcList> GetPACS_TPProcListClassConfiguration()
		{
			MappingConfiguration<PACS_TPProcList> configuration = new MappingConfiguration<PACS_TPProcList>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_TPProcList");
	
			return configuration;
		}
	
		public void PreparePACS_TPProcListPropertyConfigurations(MappingConfiguration<PACS_TPProcList> configuration)
		{
			configuration.HasProperty(x => x.TPProcID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_TPProcID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TPProcID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TimePointsListID).HasFieldName("_TimePointsListID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TimePointsListID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ImgProcedureID).HasFieldName("_ImgProcedureID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImgProcedureID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.WFTemplateID).HasFieldName("_WFTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFTemplateID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GTemplateID).HasFieldName("_GTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GTemplateID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CRFTemplateID).HasFieldName("_CRFTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.IsGradeBothLaterality).HasFieldName("_IsGradeBothLaterality").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsGradeBothLaterality").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.PercentSeriesForReview).HasFieldName("_PercentSeriesForReview").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PercentSeriesForReview").IsNullable().HasColumnType("smallint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CounterSeriesSigned).HasFieldName("_CounterSeriesSigned").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CounterSeriesSigned").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CounterSeriesForReview).HasFieldName("_CounterSeriesForReview").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CounterSeriesForReview").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.IsAttachmentsEnabled).HasFieldName("_IsAttachmentsEnabled").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsAttachmentsEnabled").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PreparePACS_TPProcListAssociationConfigurations(MappingConfiguration<PACS_TPProcList> configuration)
		{
			configuration.HasAssociation(x => x.PACSTimePointsList).HasFieldName("_PACSTimePointsList").WithOpposite(x => x.PACS_TPProcLists).ToColumn("TimePointsListID").HasConstraint((x, y) =>  x.TimePointsListID == y.TimePointsListID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERTImgProcedureList).HasFieldName("_CERTImgProcedureList").WithOpposite(x => x.PACS_TPProcLists).ToColumn("ImgProcedureID").HasConstraint((x, y) =>  x.ImgProcedureID == y.ImgProcedureID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.WFTemplate).HasFieldName("_WFTemplate").WithOpposite(x => x.PACS_TPProcLists).ToColumn("WFTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRDGradingTemplate).HasFieldName("_GRDGradingTemplate").WithOpposite(x => x.PACS_TPProcLists).ToColumn("GTemplateID").HasConstraint((x, y) =>  x.GTemplateID == y.GTemplateID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRFTemplate).HasFieldName("_CRFTemplate").WithOpposite(x => x.PACS_TPProcLists).ToColumn("CRFTemplateID").HasConstraint((x, y) => x.CRFTemplateID == y.CRFTemplateID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_Series).HasFieldName("_PACSSeries").WithOpposite(x => x.PACSTPProcList).ToColumn("TPProcListID").HasConstraint((y, x) =>  x.TPProcListID == y.TPProcID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<PACS_TimePointsList> GetPACS_TimePointsListMappingConfiguration()
		{
			MappingConfiguration<PACS_TimePointsList> configuration = this.GetPACS_TimePointsListClassConfiguration();
			this.PreparePACS_TimePointsListPropertyConfigurations(configuration);
			this.PreparePACS_TimePointsListAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_TimePointsList> GetPACS_TimePointsListClassConfiguration()
		{
			MappingConfiguration<PACS_TimePointsList> configuration = new MappingConfiguration<PACS_TimePointsList>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_TimePointsList");
	
			return configuration;
		}
	
		public void PreparePACS_TimePointsListPropertyConfigurations(MappingConfiguration<PACS_TimePointsList> configuration)
		{
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TimePointsSeq).HasFieldName("_TimePointsSeq").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TimePointsSeq").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TimePointsListID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_TimePointsListID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TimePointsListID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TimePointsDescription).HasFieldName("_TimePointsDescription").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TimePointsDescription").IsNullable().HasColumnType("nvarchar").HasLength(100);
			configuration.HasProperty(x => x.IsInitialTimePoint).HasFieldName("_IsInitialTimePoint").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsInitialTimePoint").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsTerminalTimePoint).HasFieldName("_IsTerminalTimePoint").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsTerminalTimePoint").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsEligibilityTimePoint).HasFieldName("_IsEligibilityTimePoint").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsEligibilityTimePoint").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.ExpectedVisitStartDay).HasFieldName("_ExpectedVisitStartDay").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ExpectedVisitStartDay").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ExpectedVisitEndDay).HasFieldName("_ExpectedVisitEndDay").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ExpectedVisitEndDay").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
		}
	
		public void PreparePACS_TimePointsListAssociationConfigurations(MappingConfiguration<PACS_TimePointsList> configuration)
		{
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.PACS_TimePointsLists).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_TPProcLists).HasFieldName("_PACSTPProcLists").WithOpposite(x => x.PACSTimePointsList).ToColumn("TimePointsListID").HasConstraint((y, x) =>  x.TimePointsListID == y.TimePointsListID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_TimePoints).HasFieldName("_PACSTimePoints").WithOpposite(x => x.PACSTimePointsList).ToColumn("TimePointsListID").HasConstraint((y, x) =>  x.TimePointsListID == y.TimePointsListID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<PACS_Site> GetPACS_SiteMappingConfiguration()
		{
			MappingConfiguration<PACS_Site> configuration = this.GetPACS_SiteClassConfiguration();
			this.PreparePACS_SitePropertyConfigurations(configuration);
			this.PreparePACS_SiteAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_Site> GetPACS_SiteClassConfiguration()
		{
			MappingConfiguration<PACS_Site> configuration = new MappingConfiguration<PACS_Site>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_Sites");
	
			return configuration;
		}
	
		public void PreparePACS_SitePropertyConfigurations(MappingConfiguration<PACS_Site> configuration)
		{
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.SiteID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_SiteID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SiteID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.RandomizedSiteID).HasFieldName("_RandomizedSiteID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RandomizedSiteID").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.AffiliationID).HasFieldName("_AffiliationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AffiliationID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsIRB).HasFieldName("_IsIRB").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsIRB").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsTestingSite).HasFieldName("_IsTestingSite").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsTestingSite").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.PrincipalInvestigator).HasFieldName("_PrincipalInvestigator").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PrincipalInvestigator").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
		}
	
		public void PreparePACS_SiteAssociationConfigurations(MappingConfiguration<PACS_Site> configuration)
		{
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.PACS_Sites).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTAffiliation).HasFieldName("_CONTACTAffiliation").WithOpposite(x => x.PACS_Sites).ToColumn("AffiliationID").HasConstraint((x, y) =>  x.AffiliationID == y.AffiliationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_Subjects).HasFieldName("_PACSSubjects").WithOpposite(x => x.PACSSite).ToColumn("SiteID").HasConstraint((y, x) =>  x.SiteID == y.SiteID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<MEA_MeasurementType> GetMEA_MeasurementTypeMappingConfiguration()
		{
			MappingConfiguration<MEA_MeasurementType> configuration = this.GetMEA_MeasurementTypeClassConfiguration();
			this.PrepareMEA_MeasurementTypePropertyConfigurations(configuration);
			this.PrepareMEA_MeasurementTypeAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<MEA_MeasurementType> GetMEA_MeasurementTypeClassConfiguration()
		{
			MappingConfiguration<MEA_MeasurementType> configuration = new MappingConfiguration<MEA_MeasurementType>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("MEA_MeasurementTypes");
	
			return configuration;
		}
	
		public void PrepareMEA_MeasurementTypePropertyConfigurations(MappingConfiguration<MEA_MeasurementType> configuration)
		{
			configuration.HasProperty(x => x.MeasurementTypeID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_MeasurementTypeID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MeasurementTypeID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.MeasurementType).HasFieldName("_MeasurementType").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MeasurementType").IsNullable().HasColumnType("varchar").HasLength(50);
		}
	
		public void PrepareMEA_MeasurementTypeAssociationConfigurations(MappingConfiguration<MEA_MeasurementType> configuration)
		{
			configuration.HasAssociation(x => x.MEA_MeasDataTypes).HasFieldName("_MEAMeasDataTypes").WithOpposite(x => x.MEAMeasurementType).ToColumn("MeasurementTypeID").HasConstraint((y, x) =>  x.MeasurementTypeID == y.MeasurementTypeID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.MEA_Measurements).HasFieldName("_MEAMeasurements").WithOpposite(x => x.MEAMeasurementType).ToColumn("MeasurementTypeID").HasConstraint((y, x) =>  x.MeasurementTypeID == y.MeasurementTypeID ).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<CONTACT_User> GetCONTACT_UserMappingConfiguration()
		{
			MappingConfiguration<CONTACT_User> configuration = this.GetCONTACT_UserClassConfiguration();
			this.PrepareCONTACT_UserPropertyConfigurations(configuration);
			this.PrepareCONTACT_UserAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CONTACT_User> GetCONTACT_UserClassConfiguration()
		{
			MappingConfiguration<CONTACT_User> configuration = new MappingConfiguration<CONTACT_User>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CONTACT_Users");
	
			return configuration;
		}
	
		public void PrepareCONTACT_UserPropertyConfigurations(MappingConfiguration<CONTACT_User> configuration)
		{
			configuration.HasProperty(x => x.ZipCode).HasFieldName("_ZipCode").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ZipCode").IsNullable().HasColumnType("nvarchar").HasLength(10);
			configuration.HasProperty(x => x.UserID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.StateProvince).HasFieldName("_StateProvince").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StateProvince").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.Prefix).HasFieldName("_Prefix").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Prefix").IsNullable().HasColumnType("nvarchar").HasLength(10);
			configuration.HasProperty(x => x.PhoneNumber).HasFieldName("_PhoneNumber").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PhoneNumber").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.MiddleName).HasFieldName("_MiddleName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MiddleName").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.LoweredUserName).HasFieldName("_LoweredUserName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LoweredUserName").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.LoweredEmail).HasFieldName("_LoweredEmail").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LoweredEmail").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.LastName).HasFieldName("_LastName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastName").IsNullable().HasColumnType("nvarchar").HasLength(200);
			configuration.HasProperty(x => x.LanguagePreference).HasFieldName("_LanguagePreference").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LanguagePreference").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.JobTitle).HasFieldName("_JobTitle").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("JobTitle").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.IsValidated).HasFieldName("_IsValidated").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsValidated").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.Gender).HasFieldName("_Gender").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Gender").IsNullable().HasColumnType("nvarchar").HasLength(10);
			configuration.HasProperty(x => x.FirstName).HasFieldName("_FirstName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FirstName").IsNullable().HasColumnType("nvarchar").HasLength(200);
			configuration.HasProperty(x => x.Email).HasFieldName("_Email").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Email").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.City).HasFieldName("_City").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("City").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.AspUserID).HasFieldName("_AspUserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AspUserID").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.AffiliationID).HasFieldName("_AffiliationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AffiliationID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Address2).HasFieldName("_Address2").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Address2").IsNullable().HasColumnType("nvarchar").HasLength(1000);
			configuration.HasProperty(x => x.Address1).HasFieldName("_Address1").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Address1").IsNullable().HasColumnType("nvarchar").HasLength(1000);
			configuration.HasProperty(x => x.RoleId).HasFieldName("_RoleId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RoleId").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CountryID).HasFieldName("_CountryID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CountryID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
        }

        public void PrepareCONTACT_UserAssociationConfigurations(MappingConfiguration<CONTACT_User> configuration)
		{
			configuration.HasAssociation(x => x.AspnetUser).HasFieldName("_AspnetUser").WithOpposite(x => x.CONTACT_Users).ToColumn("AspUserID").HasConstraint((x, y) =>  x.AspUserID == y.UserId ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTAffiliation).HasFieldName("_CONTACTAffiliation").WithOpposite(x => x.CONTACT_Users).ToColumn("AffiliationID").HasConstraint((x, y) =>  x.AffiliationID == y.AffiliationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.AspnetRole).HasFieldName("_AspnetRole").WithOpposite(x => x.CONTACT_Users).ToColumn("RoleId").HasConstraint((x, y) =>  x.RoleId == y.RoleId ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTCountry).HasFieldName("_CONTACTCountry").WithOpposite(x => x.CONTACT_Users).ToColumn("CountryID").HasConstraint((x, y) =>  x.CountryID == y.CountryID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACT_UserTrials).HasFieldName("_CONTACTUserTrials").WithOpposite(x => x.CONTACTUser).ToColumn("UserID").HasConstraint((y, x) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_Series).HasFieldName("_PACSSeries").WithOpposite(x => x.CONTACTUser).ToColumn("PhotographerID").HasConstraint((y, x) =>  x.PhotographerID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.UPLD_UploadInfos).HasFieldName("_UPLDUploadInfos").WithOpposite(x => x.CONTACTUser).ToColumn("UploaderID").HasConstraint((y, x) =>  x.UploaderID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			//configuration.HasAssociation(x => x.AUDIT_CRUDAudits).HasFieldName("_AUDITCRUDAudits").WithOpposite(x => x.CONTACTUser).ToColumn("UserID").HasConstraint((y, x) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.QRY_Queries).HasFieldName("_QRYQueries").WithOpposite(x => x.Recipient).ToColumn("ReceipientID").HasConstraint((y, x) =>  x.RecipientID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.QRY_Queries1).HasFieldName("_QRYQueries1").WithOpposite(x => x.Sender).ToColumn("SenderID").HasConstraint((y, x) =>  x.SenderID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.QRY_Messages).HasFieldName("_QRYMessages").WithOpposite(x => x.CONTACTUser).ToColumn("UserID").HasConstraint((y, x) => x.UserID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.GRD_Reports).HasFieldName("_GRDReports").WithOpposite(x => x.CONTACTUser).ToColumn("PerformedBy").HasConstraint((y, x) =>  x.PerformedBy == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.DOCU_DocumentUsers).HasFieldName("_DOCUDocumentUsers").WithOpposite(x => x.CONTACTUser).ToColumn("UserID").HasConstraint((y, x) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			//configuration.HasAssociation(x => x.AUDIT_Records).HasFieldName("_AUDITRecords").WithOpposite(x => x.CONTACTUser).ToColumn("UserID").HasConstraint((y, x) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_SeriesComments).HasFieldName("_PACSSeriesComments").WithOpposite(x => x.CONTACTUser).ToColumn("UserID").HasConstraint((y, x) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_SeriesAttachments).HasFieldName("_PACSSeriesAttachments").WithOpposite(x => x.CONTACTUser).ToColumn("UserID").HasConstraint((y, x) => x.UserID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CERT_UploadInfos).HasFieldName("_CERTUploadInfos").WithOpposite(x => x.CONTACTUser).ToColumn("UserID").HasConstraint((y, x) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.DOCU_DocumentVersionUsers).HasFieldName("_DOCUDocumentVersionUsers").WithOpposite(x => x.CONTACTUser).ToColumn("UserID").HasConstraint((y, x) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACT_UserNotifications).HasFieldName("_CONTACTUserNotifications").WithOpposite(x => x.CONTACTUser).ToColumn("UserID").HasConstraint((y, x) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACT_UserAffiliations).HasFieldName("_CONTACTUserAffiliations").WithOpposite(x => x.CONTACTUser).ToColumn("UserID").HasConstraint((y, x) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.WF_Sequences).HasFieldName("_WFSequences").WithOpposite(x => x.AssignedTo).ToColumn("AssignedToID").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERT_Equipments).HasFieldName("_CERTEquipments").WithOpposite(x => x.CertifiedBy).ToColumn("CertifiedByID").HasConstraint((y, x) =>  x.CertifiedByID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CERT_EquipmentsAssigned).HasFieldName("_CERTEquipmentsAssigned").WithOpposite(x => x.AssignedTo).ToColumn("AssignedToID").HasConstraint((y, x) => x.AssignedToID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CERT_Users).HasFieldName("_CERTUsers").WithOpposite(x => x.CertifiedBy).ToColumn("CertifiedByID").HasConstraint((y, x) =>  x.CertifiedByID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CERT_UsersAssigned).HasFieldName("_CERTUsersAssigned").WithOpposite(x => x.AssignedTo).ToColumn("AssignedToID").HasConstraint((y, x) => x.AssignedToID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.BGD_Jobs).HasFieldName("_BGDJobs").WithOpposite(x => x.CONTACTUser).ToColumn("UserID").HasConstraint((y, x) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_ProcessedData).HasFieldName("_PACSProcessedData").WithOpposite(x => x.CONTACTUser).ToColumn("UserID").HasConstraint((y, x) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			//configuration.HasAssociation(x => x.AUDIT_Records1).HasFieldName("_AUDITRecords1").WithOpposite(x => x.RelatedUser).ToColumn("RelatedUserID").HasConstraint((y, x) =>  x.RelatedUserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.VerifiedCRF_Data).HasFieldName("_VerifiedCRFData").WithOpposite(x => x.VerifiedBy).ToColumn("VerifiedByID").HasConstraint((y, x) => x.VerifiedByID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.SignedCRF_Data).HasFieldName("_SignedCRFData").WithOpposite(x => x.SignedBy).ToColumn("SignedByID").HasConstraint((y, x) => x.SignedByID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_SeriesAssigned).HasFieldName("_PACSSeriesAssigned").WithOpposite(x => x.PACS_SeriesAssignees).IsManaged().MapJoinTable("PACS_SeriesAssignees", (u, s) => new
            {
                UserID = u.UserID,
                SeriesID = s.SeriesID
            });
        }

        public MappingConfiguration<CONTACT_TrialSponsor> GetCONTACT_TrialSponsorMappingConfiguration()
		{
			MappingConfiguration<CONTACT_TrialSponsor> configuration = this.GetCONTACT_TrialSponsorClassConfiguration();
			this.PrepareCONTACT_TrialSponsorPropertyConfigurations(configuration);
			this.PrepareCONTACT_TrialSponsorAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CONTACT_TrialSponsor> GetCONTACT_TrialSponsorClassConfiguration()
		{
			MappingConfiguration<CONTACT_TrialSponsor> configuration = new MappingConfiguration<CONTACT_TrialSponsor>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CONTACT_TrialSponsors");
	
			return configuration;
		}
	
		public void PrepareCONTACT_TrialSponsorPropertyConfigurations(MappingConfiguration<CONTACT_TrialSponsor> configuration)
		{
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.AffiliationTrialID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_AffiliationTrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AffiliationTrialID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.AffiliationID).HasFieldName("_AffiliationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AffiliationID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareCONTACT_TrialSponsorAssociationConfigurations(MappingConfiguration<CONTACT_TrialSponsor> configuration)
		{
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.CONTACT_TrialSponsors).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTAffiliation).HasFieldName("_CONTACTAffiliation").WithOpposite(x => x.CONTACT_TrialSponsors).ToColumn("AffiliationID").HasConstraint((x, y) =>  x.AffiliationID == y.AffiliationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<CONTACT_Equipment> GetCONTACT_EquipmentMappingConfiguration()
		{
			MappingConfiguration<CONTACT_Equipment> configuration = this.GetCONTACT_EquipmentClassConfiguration();
			this.PrepareCONTACT_EquipmentPropertyConfigurations(configuration);
			this.PrepareCONTACT_EquipmentAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CONTACT_Equipment> GetCONTACT_EquipmentClassConfiguration()
		{
			MappingConfiguration<CONTACT_Equipment> configuration = new MappingConfiguration<CONTACT_Equipment>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CONTACT_Equipments");
	
			return configuration;
		}
	
		public void PrepareCONTACT_EquipmentPropertyConfigurations(MappingConfiguration<CONTACT_Equipment> configuration)
		{
			configuration.HasProperty(x => x.StationName).HasFieldName("_StationName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StationName").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.SoftwareVersion).HasFieldName("_SoftwareVersion").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SoftwareVersion").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.SeconarySerialNum).HasFieldName("_SeconarySerialNum").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeconarySerialNum").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.OtherSerialNum).HasFieldName("_OtherSerialNum").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("OtherSerialNum").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.Notes).HasFieldName("_Notes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("notes").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.MainSerialNum).HasFieldName("_MainSerialNum").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MainSerialNum").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.LastCalibrationTime).HasFieldName("_LastCalibrationTime").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastCalibrationTime").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.LastCalibrationDate).HasFieldName("_LastCalibrationDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastCalibrationDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.IsValidated).HasFieldName("_IsValidated").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsValidated").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.FirmwareVersion).HasFieldName("_FirmwareVersion").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FirmwareVersion").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.EquipmentModelID).HasFieldName("_EquipmentModelID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EquipmentModelID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.EquipmentID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_EquipmentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EquipmentID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.AffiliationID).HasFieldName("_AffiliationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AffiliationID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareCONTACT_EquipmentAssociationConfigurations(MappingConfiguration<CONTACT_Equipment> configuration)
		{
			configuration.HasAssociation(x => x.CONTACTEquipmentModel).HasFieldName("_CONTACTEquipmentModel").WithOpposite(x => x.CONTACT_Equipments).ToColumn("EquipmentModelID").HasConstraint((x, y) =>  x.EquipmentModelID == y.EquipmentModelID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTAffiliation).HasFieldName("_CONTACTAffiliation").WithOpposite(x => x.CONTACT_Equipments).ToColumn("AffiliationID").HasConstraint((x, y) =>  x.AffiliationID == y.AffiliationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERT_Equipments).HasFieldName("_CERTEquipments").WithOpposite(x => x.CONTACTEquipment).ToColumn("EquipmentID").HasConstraint((y, x) =>  x.EquipmentID == y.EquipmentID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_Series).HasFieldName("_PACSSeries").WithOpposite(x => x.CONTACTEquipment).ToColumn("EquipmentID").HasConstraint((y, x) =>  x.EquipmentID == y.EquipmentID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERT_UploadInfos).HasFieldName("_CERTUploadInfos").WithOpposite(x => x.CONTACTEquipment).ToColumn("EquipmentID").HasConstraint((y, x) =>  x.EquipmentID == y.EquipmentID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<CONTACT_EquipmentModel> GetCONTACT_EquipmentModelMappingConfiguration()
		{
			MappingConfiguration<CONTACT_EquipmentModel> configuration = this.GetCONTACT_EquipmentModelClassConfiguration();
			this.PrepareCONTACT_EquipmentModelPropertyConfigurations(configuration);
			this.PrepareCONTACT_EquipmentModelAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CONTACT_EquipmentModel> GetCONTACT_EquipmentModelClassConfiguration()
		{
			MappingConfiguration<CONTACT_EquipmentModel> configuration = new MappingConfiguration<CONTACT_EquipmentModel>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CONTACT_EquipmentModel");
	
			return configuration;
		}
	
		public void PrepareCONTACT_EquipmentModelPropertyConfigurations(MappingConfiguration<CONTACT_EquipmentModel> configuration)
		{
			configuration.HasProperty(x => x.ManufacturerName).HasFieldName("_ManufacturerName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ManufacturerName").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.ManufacturerModel).HasFieldName("_ManufacturerModel").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ManufacturerModel").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.EquipmentType).HasFieldName("_EquipmentType").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EquipmentType").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.EquipmentModelID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_EquipmentModelID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EquipmentModelID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareCONTACT_EquipmentModelAssociationConfigurations(MappingConfiguration<CONTACT_EquipmentModel> configuration)
		{
			configuration.HasAssociation(x => x.CONTACT_Equipments).HasFieldName("_CONTACTEquipments").WithOpposite(x => x.CONTACTEquipmentModel).ToColumn("EquipmentModelID").HasConstraint((y, x) =>  x.EquipmentModelID == y.EquipmentModelID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<CONTACT_Affiliation> GetCONTACT_AffiliationMappingConfiguration()
		{
			MappingConfiguration<CONTACT_Affiliation> configuration = this.GetCONTACT_AffiliationClassConfiguration();
			this.PrepareCONTACT_AffiliationPropertyConfigurations(configuration);
			this.PrepareCONTACT_AffiliationAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CONTACT_Affiliation> GetCONTACT_AffiliationClassConfiguration()
		{
			MappingConfiguration<CONTACT_Affiliation> configuration = new MappingConfiguration<CONTACT_Affiliation>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CONTACT_Affiliations");
	
			return configuration;
		}
	
		public void PrepareCONTACT_AffiliationPropertyConfigurations(MappingConfiguration<CONTACT_Affiliation> configuration)
		{
			configuration.HasProperty(x => x.ZipCode).HasFieldName("_ZipCode").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ZipCode").IsNullable().HasColumnType("nvarchar").HasLength(10);
			configuration.HasProperty(x => x.StateProvince).HasFieldName("_StateProvince").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StateProvince").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.PhoneNumber).HasFieldName("_PhoneNumber").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PhoneNumber").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.IsValidated).HasFieldName("_IsValidated").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsValidated").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.City).HasFieldName("_City").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("City").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.AffiliationName).HasFieldName("_AffiliationName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AffiliationName").IsNullable().HasColumnType("nvarchar").HasLength(100);
			configuration.HasProperty(x => x.AffiliationID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_AffiliationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AffiliationID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Address2).HasFieldName("_Address2").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Address2").IsNullable().HasColumnType("nvarchar").HasLength(1000);
			configuration.HasProperty(x => x.Address1).HasFieldName("_Address1").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Address1").IsNullable().HasColumnType("nvarchar").HasLength(1000);
            configuration.HasProperty(x => x.LogoURL).HasFieldName("_LogoURL").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LogoURL").IsNullable().HasColumnType("nvarchar").HasLength(512);
            configuration.HasProperty(x => x.CountryID).HasFieldName("_CountryID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CountryID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareCONTACT_AffiliationAssociationConfigurations(MappingConfiguration<CONTACT_Affiliation> configuration)
		{
			configuration.HasAssociation(x => x.CONTACTCountry).HasFieldName("_CONTACTCountry").WithOpposite(x => x.CONTACT_Affiliations).ToColumn("CountryID").HasConstraint((x, y) =>  x.CountryID == y.CountryID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACT_Users).HasFieldName("_CONTACTUsers").WithOpposite(x => x.CONTACTAffiliation).ToColumn("AffiliationID").HasConstraint((y, x) =>  x.AffiliationID == y.AffiliationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACT_TrialSponsors).HasFieldName("_CONTACTTrialSponsors").WithOpposite(x => x.CONTACTAffiliation).ToColumn("AffiliationID").HasConstraint((y, x) =>  x.AffiliationID == y.AffiliationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACT_Equipments).HasFieldName("_CONTACTEquipments").WithOpposite(x => x.CONTACTAffiliation).ToColumn("AffiliationID").HasConstraint((y, x) =>  x.AffiliationID == y.AffiliationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_Sites).HasFieldName("_PACSSites").WithOpposite(x => x.CONTACTAffiliation).ToColumn("AffiliationID").HasConstraint((y, x) =>  x.AffiliationID == y.AffiliationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACT_TrialReadingCenters).HasFieldName("_CONTACTTrialReadingCenters").WithOpposite(x => x.CONTACTAffiliation).ToColumn("AffiliationID").HasConstraint((y, x) =>  x.AffiliationID == y.AffiliationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACT_UserAffiliations).HasFieldName("_CONTACTUserAffiliations").WithOpposite(x => x.CONTACTAffiliation).ToColumn("AffiliationID").HasConstraint((y, x) =>  x.AffiliationID == y.AffiliationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<CERT_ImgProcedureList> GetCERT_ImgProcedureListMappingConfiguration()
		{
			MappingConfiguration<CERT_ImgProcedureList> configuration = this.GetCERT_ImgProcedureListClassConfiguration();
			this.PrepareCERT_ImgProcedureListPropertyConfigurations(configuration);
			this.PrepareCERT_ImgProcedureListAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CERT_ImgProcedureList> GetCERT_ImgProcedureListClassConfiguration()
		{
			MappingConfiguration<CERT_ImgProcedureList> configuration = new MappingConfiguration<CERT_ImgProcedureList>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CERT_ImgProcedureList");
	
			return configuration;
		}
	
		public void PrepareCERT_ImgProcedureListPropertyConfigurations(MappingConfiguration<CERT_ImgProcedureList> configuration)
		{
			configuration.HasProperty(x => x.ImgProcedureName).HasFieldName("_ImgProcedureName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImgProcedureName").IsNullable().HasColumnType("varchar(max)").HasLength(0);
			configuration.HasProperty(x => x.ImgProcedureID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_ImgProcedureID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImgProcedureID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ImgProcedureDescription).HasFieldName("_ImgProcedureDescription").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImgProcedureDescription").IsNullable().HasColumnType("varchar(max)").HasLength(0);
			configuration.HasProperty(x => x.DataTypeID).HasFieldName("_DataTypeID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DataTypeID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.DICOMAnatomicStructureCodeValue).HasFieldName("_DICOMAnatomicStructureCodeValue").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DICOMAnatomicStructureCodeValue").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.DICOMAnatomicStructureCodeSchemeDesignator).HasFieldName("_DICOMAnatomicStructureCodeSchemeDesignator").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DICOMAnatomicStructureCodeSchemeDesignator").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.DICOMAnatomicStructureCodeMeaning).HasFieldName("_DICOMAnatomicStructureCodeMeaning").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DICOMAnatomicStructureCodeMeaning").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.DICOMAcquisitionDeviceCodeValue).HasFieldName("_DICOMAcquisitionDeviceCodeValue").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DICOMAcquisitionDeviceCodeValue").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.DICOMAcquisitionDeviceCodeSchemeDesignator).HasFieldName("_DICOMAcquisitionDeviceCodeSchemeDesignator").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DICOMAcquisitionDeviceCodeSchemeDesignator").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.DICOMAcquisitionDeviceCodeMeaning).HasFieldName("_DICOMAcquisitionDeviceCodeMeaning").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DICOMAcquisitionDeviceCodeMeaning").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
		}
	
		public void PrepareCERT_ImgProcedureListAssociationConfigurations(MappingConfiguration<CERT_ImgProcedureList> configuration)
		{
			configuration.HasAssociation(x => x.PACSDataType).HasFieldName("_PACSDataType").WithOpposite(x => x.CERT_ImgProcedureLists).ToColumn("DataTypeID").HasConstraint((x, y) =>  x.DataTypeID == y.DataTypeID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_TPProcLists).HasFieldName("_PACSTPProcLists").WithOpposite(x => x.CERTImgProcedureList).ToColumn("ImgProcedureID").HasConstraint((y, x) =>  x.ImgProcedureID == y.ImgProcedureID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERT_Users).HasFieldName("_CERTUsers").WithOpposite(x => x.CERTImgProcedureList).ToColumn("ImgProcedureID").HasConstraint((y, x) =>  x.ImgProcedureID == y.ImgProcedureID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERT_Equipments).HasFieldName("_CERTEquipments").WithOpposite(x => x.CERTImgProcedureList).ToColumn("ImgProcedureID").HasConstraint((y, x) =>  x.ImgProcedureID == y.ImgProcedureID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACT_TrialReadingCenters).HasFieldName("_CONTACTTrialReadingCenters").WithOpposite(x => x.CERTImgProcedureList).ToColumn("ImgProcedureID").HasConstraint((y, x) =>  x.ImgProcedureID == y.ImgProcedureID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERT_QuestionLists).HasFieldName("_CERTQuestionLists").WithOpposite(x => x.CERTImgProcedureList).ToColumn("ImgProcedureID").HasConstraint((y, x) =>  x.ImgProcedureID == y.ImgProcedureID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_Trials).HasFieldName("_PACSTrials").WithOpposite(x => x.CERT_ImgProcedureLists).IsManaged().MapJoinTable("PACS_TrialProcedures", (p, t) => new
            {
                TrialID = t.TrialID,
                ImgProcedureID = p.ImgProcedureID
            });
        }

        public MappingConfiguration<CERT_Result> GetCERT_ResultMappingConfiguration()
		{
			MappingConfiguration<CERT_Result> configuration = this.GetCERT_ResultClassConfiguration();
			this.PrepareCERT_ResultPropertyConfigurations(configuration);
			this.PrepareCERT_ResultAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CERT_Result> GetCERT_ResultClassConfiguration()
		{
			MappingConfiguration<CERT_Result> configuration = new MappingConfiguration<CERT_Result>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CERT_Results");
	
			return configuration;
		}
	
		public void PrepareCERT_ResultPropertyConfigurations(MappingConfiguration<CERT_Result> configuration)
		{
			configuration.HasProperty(x => x.CertResultID).IsIdentity().HasFieldName("_CertResultID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertResultID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CertResult).HasFieldName("_CertResult").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertResult").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.CertQuestionListID).HasFieldName("_CertQuestionListID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertQuestionListID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CertUploadInfoID).HasFieldName("_CertUploadInfoID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertUploadInfoID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareCERT_ResultAssociationConfigurations(MappingConfiguration<CERT_Result> configuration)
		{
			configuration.HasAssociation(x => x.CERTQuestionList).HasFieldName("_CERTQuestionList").WithOpposite(x => x.CERT_Results).ToColumn("CertQuestionListID").HasConstraint((x, y) =>  x.CertQuestionListID == y.CertQuestionListID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<CERT_QuestionList> GetCERT_QuestionListMappingConfiguration()
		{
			MappingConfiguration<CERT_QuestionList> configuration = this.GetCERT_QuestionListClassConfiguration();
			this.PrepareCERT_QuestionListPropertyConfigurations(configuration);
			this.PrepareCERT_QuestionListAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CERT_QuestionList> GetCERT_QuestionListClassConfiguration()
		{
			MappingConfiguration<CERT_QuestionList> configuration = new MappingConfiguration<CERT_QuestionList>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CERT_QuestionList");
	
			return configuration;
		}
	
		public void PrepareCERT_QuestionListPropertyConfigurations(MappingConfiguration<CERT_QuestionList> configuration)
		{
			configuration.HasProperty(x => x.CertQuestionListID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CertQuestionListID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertQuestionListID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ImgProcedureID).HasFieldName("_ImgProcedureID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImgProcedureID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CertQuestionDes).HasFieldName("_CertQuestionDes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertQuestionDes").IsNullable().HasColumnType("nvarchar").HasLength(256);
		}
	
		public void PrepareCERT_QuestionListAssociationConfigurations(MappingConfiguration<CERT_QuestionList> configuration)
		{
			configuration.HasAssociation(x => x.CERTImgProcedureList).HasFieldName("_CERTImgProcedureList").WithOpposite(x => x.CERT_QuestionLists).ToColumn("ImgProcedureID").HasConstraint((x, y) =>  x.ImgProcedureID == y.ImgProcedureID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERT_Results).HasFieldName("_CERTResults").WithOpposite(x => x.CERTQuestionList).ToColumn("CertQuestionListID").HasConstraint((y, x) =>  x.CertQuestionListID == y.CertQuestionListID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<Aspnet_Role> GetAspnet_RoleMappingConfiguration()
		{
			MappingConfiguration<Aspnet_Role> configuration = this.GetAspnet_RoleClassConfiguration();
			this.PrepareAspnet_RolePropertyConfigurations(configuration);
			this.PrepareAspnet_RoleAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Aspnet_Role> GetAspnet_RoleClassConfiguration()
		{
			MappingConfiguration<Aspnet_Role> configuration = new MappingConfiguration<Aspnet_Role>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("aspnet_Roles");
	
			return configuration;
		}
	
		public void PrepareAspnet_RolePropertyConfigurations(MappingConfiguration<Aspnet_Role> configuration)
		{
			configuration.HasProperty(x => x.RoleName).HasFieldName("_RoleName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RoleName").IsNotNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.RoleId).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_RoleId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RoleId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.LoweredRoleName).HasFieldName("_LoweredRoleName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LoweredRoleName").IsNotNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.Description).HasFieldName("_Description").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Description").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.ApplicationId).HasFieldName("_ApplicationId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ApplicationId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareAspnet_RoleAssociationConfigurations(MappingConfiguration<Aspnet_Role> configuration)
		{
			configuration.HasAssociation(x => x.AspnetApplication).HasFieldName("_AspnetApplication").WithOpposite(x => x.Aspnet_Roles).ToColumn("ApplicationId").HasConstraint((x, y) =>  x.ApplicationId == y.ApplicationId ).IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACT_Users).HasFieldName("_CONTACTUsers").WithOpposite(x => x.AspnetRole).ToColumn("RoleId").HasConstraint((y, x) =>  x.RoleId == y.RoleId ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACT_NotificationRoles).HasFieldName("_CONTACTNotificationRoles").WithOpposite(x => x.AspnetRole).ToColumn("RoleId").HasConstraint((y, x) =>  x.RoleId == y.RoleId ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.RPT_TrialReportRoles).HasFieldName("_RPTTrialReportRoles").WithOpposite(x => x.AspnetRole).ToColumn("RoleId").HasConstraint((y, x) =>  x.RoleId == y.RoleId ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.DOCU_DocumentRoles).HasFieldName("_DOCUDocumentRoles").WithOpposite(x => x.AspnetRole).ToColumn("RoleId").HasConstraint((y, x) => x.RoleId == y.RoleId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<Aspnet_Application> GetAspnet_ApplicationMappingConfiguration()
		{
			MappingConfiguration<Aspnet_Application> configuration = this.GetAspnet_ApplicationClassConfiguration();
			this.PrepareAspnet_ApplicationPropertyConfigurations(configuration);
			this.PrepareAspnet_ApplicationAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Aspnet_Application> GetAspnet_ApplicationClassConfiguration()
		{
			MappingConfiguration<Aspnet_Application> configuration = new MappingConfiguration<Aspnet_Application>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("aspnet_Applications");
	
			return configuration;
		}
	
		public void PrepareAspnet_ApplicationPropertyConfigurations(MappingConfiguration<Aspnet_Application> configuration)
		{
			configuration.HasProperty(x => x.LoweredApplicationName).HasFieldName("_LoweredApplicationName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LoweredApplicationName").IsNotNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.Description).HasFieldName("_Description").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Description").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.ApplicationName).HasFieldName("_ApplicationName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ApplicationName").IsNotNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.ApplicationId).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_ApplicationId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ApplicationId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0).HasDefaultValue();
		}
	
		public void PrepareAspnet_ApplicationAssociationConfigurations(MappingConfiguration<Aspnet_Application> configuration)
		{
			configuration.HasAssociation(x => x.Aspnet_Roles).HasFieldName("_AspnetRoles").WithOpposite(x => x.AspnetApplication).ToColumn("ApplicationId").HasConstraint((y, x) =>  x.ApplicationId == y.ApplicationId ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Aspnet_Memberships).HasFieldName("_AspnetMemberships").WithOpposite(x => x.AspnetApplication).ToColumn("ApplicationId").HasConstraint((y, x) =>  x.ApplicationId == y.ApplicationId ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.Aspnet_Users).HasFieldName("_AspnetUsers").WithOpposite(x => x.AspnetApplication).ToColumn("ApplicationId").HasConstraint((y, x) => x.ApplicationId == y.ApplicationId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }
		
		public MappingConfiguration<WF_TempStep> GetWF_TempStepMappingConfiguration()
		{
			MappingConfiguration<WF_TempStep> configuration = this.GetWF_TempStepClassConfiguration();
			this.PrepareWF_TempStepPropertyConfigurations(configuration);
			this.PrepareWF_TempStepAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<WF_TempStep> GetWF_TempStepClassConfiguration()
		{
			MappingConfiguration<WF_TempStep> configuration = new MappingConfiguration<WF_TempStep>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("WF_TempSteps");
	
			return configuration;
		}
	
		public void PrepareWF_TempStepPropertyConfigurations(MappingConfiguration<WF_TempStep> configuration)
		{
			configuration.HasProperty(x => x.WFTempStepID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_WFTempStepID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFTempStepID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.WFTemplateID).HasFieldName("_WFTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFTemplateID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.WFStepOrder).HasFieldName("_WFStepOrder").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFStepOrder").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.WFStepListID).HasFieldName("_WFStepListID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFStepListID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ShouldSkip).HasFieldName("_ShouldSkip").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ShouldSkip").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
		}
	
		public void PrepareWF_TempStepAssociationConfigurations(MappingConfiguration<WF_TempStep> configuration)
		{
			configuration.HasAssociation(x => x.WFTemplate).HasFieldName("_WFTemplate").WithOpposite(x => x.WF_TempSteps).ToColumn("WFTemplateID").HasConstraint((x, y) =>  x.WFTemplateID == y.WFTemplateID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.WFStepList).HasFieldName("_WFStepList").WithOpposite(x => x.WF_TempSteps).ToColumn("WFStepListID").HasConstraint((x, y) =>  x.WFStepListID == y.WFStepListID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.WF_Sequences).HasFieldName("_WFSequences").WithOpposite(x => x.WFTempStep).ToColumn("WFTempStepID").WithDataAccessKind(DataAccessKind.ReadWrite);
			//configuration.HasAssociation(x => x.AUDIT_Records).HasFieldName("_AUDITRecords").WithOpposite(x => x.WFTempStep).ToColumn("WFTempStepID").HasConstraint((y, x) =>  x.WFTempStepID == y.WFTempStepID ).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<WF_Template> GetWF_TemplateMappingConfiguration()
		{
			MappingConfiguration<WF_Template> configuration = this.GetWF_TemplateClassConfiguration();
			this.PrepareWF_TemplatePropertyConfigurations(configuration);
			this.PrepareWF_TemplateAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<WF_Template> GetWF_TemplateClassConfiguration()
		{
			MappingConfiguration<WF_Template> configuration = new MappingConfiguration<WF_Template>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("WF_Templates");
	
			return configuration;
		}
	
		public void PrepareWF_TemplatePropertyConfigurations(MappingConfiguration<WF_Template> configuration)
		{
			configuration.HasProperty(x => x.WFTemplateType).HasFieldName("_WFTemplateType").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFTemplateType").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.WFTemplateNote).HasFieldName("_WFTemplateNote").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFTemplateNote").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.WFTemplateName).HasFieldName("_WFTemplateName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFTemplateName").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.WFTemplateID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_WFTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFTemplateID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsLocked).HasFieldName("_IsLocked").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsLocked").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PrepareWF_TemplateAssociationConfigurations(MappingConfiguration<WF_Template> configuration)
		{
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.WF_Templates).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.WF_TempSteps).HasFieldName("_WFTempSteps").WithOpposite(x => x.WFTemplate).ToColumn("WFTemplateID").HasConstraint((y, x) =>  x.WFTemplateID == y.WFTemplateID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_TPProcLists).HasFieldName("_PACSTPProcLists").WithOpposite(x => x.WFTemplate).ToColumn("WFTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_SeriesGroups).HasFieldName("_PACSSeriesGroups").WithOpposite(x => x.WFTemplate).ToColumn("WFTemplateID").HasConstraint((y, x) => x.WFTemplateID == y.WFTemplateID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<WF_StepList> GetWF_StepListMappingConfiguration()
		{
			MappingConfiguration<WF_StepList> configuration = this.GetWF_StepListClassConfiguration();
			this.PrepareWF_StepListPropertyConfigurations(configuration);
			this.PrepareWF_StepListAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<WF_StepList> GetWF_StepListClassConfiguration()
		{
			MappingConfiguration<WF_StepList> configuration = new MappingConfiguration<WF_StepList>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("WF_StepList");
	
			return configuration;
		}
	
		public void PrepareWF_StepListPropertyConfigurations(MappingConfiguration<WF_StepList> configuration)
		{
			configuration.HasProperty(x => x.WFStepListID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_WFStepListID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFStepListID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.WFStepListDes).HasFieldName("_WFStepListDes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFStepListDes").IsNullable().HasColumnType("varchar").HasLength(50);
			configuration.HasProperty(x => x.SortingOrder).HasFieldName("_SortingOrder").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SortingOrder").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareWF_StepListAssociationConfigurations(MappingConfiguration<WF_StepList> configuration)
		{
			configuration.HasAssociation(x => x.WF_TempSteps).HasFieldName("_WFTempSteps").WithOpposite(x => x.WFStepList).ToColumn("WFStepListID").HasConstraint((y, x) =>  x.WFStepListID == y.WFStepListID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<PACS_Series> GetPACS_SeriesMappingConfiguration()
		{
			MappingConfiguration<PACS_Series> configuration = this.GetPACS_SeriesClassConfiguration();
			this.PreparePACS_SeriesPropertyConfigurations(configuration);
			this.PreparePACS_SeriesAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_Series> GetPACS_SeriesClassConfiguration()
		{
			MappingConfiguration<PACS_Series> configuration = new MappingConfiguration<PACS_Series>();
            configuration.HasDiscriminatorValue("{no}");
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).Inheritance(InheritanceStrategy.Default).ToTable("PACS_Series");
	
			return configuration;
		}
	
		public void PreparePACS_SeriesPropertyConfigurations(MappingConfiguration<PACS_Series> configuration)
		{
			configuration.HasProperty(x => x.TimePointsID).HasFieldName("_TimePointsID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TimePointsID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.SeriesID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_SeriesID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeriesID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsValidated).HasFieldName("_IsValidated").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsValidated").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsQCSeries).HasFieldName("_IsQCSeries").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsQCSeries").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.DirectorReviewComplete).HasFieldName("_DirectorReviewComplete").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DirectorReviewComplete").IsNullable().HasColumnType("bit").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TPProcListID).HasFieldName("_TPProcListID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TPProcListID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PhotographerID).HasFieldName("_PhotographerID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PhotographerID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.EquipmentID).HasFieldName("_EquipmentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EquipmentID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.LastExportDateTime).HasFieldName("_LastExportDateTime").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastExportDateTime").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.SeriesDCMInstanceUID).HasFieldName("_SeriesDCMInstanceUID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeriesDCMInstanceUID").IsNullable().HasColumnType("nvarchar").HasLength(64);
			configuration.HasProperty(x => x.IsDataQualityAdequate).HasFieldName("_IsDataQualityAdequate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsDataQualityAdequate").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.StudyDate).HasFieldName("_StudyDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StudyDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.SeriesGroupID).HasFieldName("_SeriesGroupID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeriesGroupID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.LateralityReceived).HasFieldName("_LateralityReceived").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LateralityReceived").IsNullable().HasColumnType("nvarchar").HasLength(10);
        }

        public void PreparePACS_SeriesAssociationConfigurations(MappingConfiguration<PACS_Series> configuration)
		{
			configuration.HasAssociation(x => x.PACSTPProcList).HasFieldName("_PACSTPProcList").WithOpposite(x => x.PACS_Series).ToColumn("TPProcListID").HasConstraint((x, y) =>  x.TPProcListID == y.TPProcID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.PACS_Series).ToColumn("PhotographerID").HasConstraint((x, y) =>  x.PhotographerID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTEquipment).HasFieldName("_CONTACTEquipment").WithOpposite(x => x.PACS_Series).ToColumn("EquipmentID").HasConstraint((x, y) =>  x.EquipmentID == y.EquipmentID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACSTimePoint).HasFieldName("_PACSTimePoint").WithOpposite(x => x.PACS_Series).ToColumn("TimePointsID").HasConstraint((x, y) =>  x.TimePointsID == y.TimePointsID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACSSeriesGroup).HasFieldName("_PACSSeriesGroup").WithOpposite(x => x.PACS_Series).ToColumn("SeriesGroupID").HasConstraint((x, y) =>  x.SeriesGroupID == y.SeriesGroupID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_RawData).HasFieldName("_PACSRawData").WithOpposite(x => x.PACSSeries).ToColumn("SeriesID").HasConstraint((y, x) =>  x.SeriesID == y.SeriesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.UPLD_UploadInfos).HasFieldName("_UPLDUploadInfos").WithOpposite(x => x.PACSSeries).ToColumn("SeriesID").HasConstraint((y, x) =>  x.SeriesID == y.SeriesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.QRY_Queries).HasFieldName("_QRYQueries").WithOpposite(x => x.PACSSeries).ToColumn("SeriesID").HasConstraint((y, x) =>  x.SeriesID == y.SeriesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRD_Reports).HasFieldName("_GRDReports").WithOpposite(x => x.PACSSeries).ToColumn("SeriesID").HasConstraint((y, x) =>  x.SeriesID == y.SeriesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			//configuration.HasAssociation(x => x.AUDIT_Records).HasFieldName("_AUDITRecords").WithOpposite(x => x.PACSSeries).ToColumn("SeriesID").HasConstraint((y, x) =>  x.SeriesID == y.SeriesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_SeriesComments).HasFieldName("_PACSSeriesComments").WithOpposite(x => x.PACSSeries).ToColumn("SeriesID").HasConstraint((y, x) =>  x.SeriesID == y.SeriesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_SeriesAttachments).HasFieldName("_PACSSeriesAttachments").WithOpposite(x => x.PACSSeries).ToColumn("SeriesID").HasConstraint((y, x) => x.SeriesID == y.SeriesID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_Data).HasFieldName("_CRFData").WithOpposite(x => x.PACSSeries).ToColumn("SeriesID").HasConstraint((y, x) => x.SeriesID == y.SeriesID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_SeriesAssignees).HasFieldName("_PACSSeriesAssignees").WithOpposite(x => x.PACS_SeriesAssigned).IsManaged().MapJoinTable("PACS_SeriesAssignees", (s, u) => new
            {
                UserID = u.UserID,
                SeriesID = s.SeriesID
            });
        }

        public MappingConfiguration<WF_Sequence> GetWF_SequenceMappingConfiguration()
		{
			MappingConfiguration<WF_Sequence> configuration = this.GetWF_SequenceClassConfiguration();
			this.PrepareWF_SequencePropertyConfigurations(configuration);
			this.PrepareWF_SequenceAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<WF_Sequence> GetWF_SequenceClassConfiguration()
		{
			MappingConfiguration<WF_Sequence> configuration = new MappingConfiguration<WF_Sequence>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.WF_Sequence");
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).Inheritance(InheritanceStrategy.Vertical).ToTable("WF_Sequences");
	
			return configuration;
		}
	
		public void PrepareWF_SequencePropertyConfigurations(MappingConfiguration<WF_Sequence> configuration)
		{
			configuration.HasProperty(x => x.WFTempStepID).HasFieldName("_WFTempStepID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFTempStepID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CategoryFlagID).HasFieldName("_CategoryFlagID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CategoryFlagID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.LastStepCompletionDate).HasFieldName("_LastStepCompletionDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastStepCompletionDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.AssignedToID).HasFieldName("_AssignedToID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AssignedToID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareWF_SequenceAssociationConfigurations(MappingConfiguration<WF_Sequence> configuration)
		{
			configuration.HasAssociation(x => x.WFTempStep).HasFieldName("_WFTempStep").WithOpposite(x => x.WF_Sequences).ToColumn("WFTempStepID").WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.WFCategoryFlag).HasFieldName("_WFCategoryFlag").WithOpposite(x => x.WF_Sequences).ToColumn("CategoryFlagID").HasConstraint((x, y) =>  x.CategoryFlagID == y.CategoryFlagID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.AssignedTo).HasFieldName("_AssignedTo").WithOpposite(x => x.WF_Sequences).ToColumn("AssignedToID").WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<PACS_RawDatum> GetPACS_RawDatumMappingConfiguration()
		{
			MappingConfiguration<PACS_RawDatum> configuration = this.GetPACS_RawDatumClassConfiguration();
			this.PreparePACS_RawDatumPropertyConfigurations(configuration);
			this.PreparePACS_RawDatumAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_RawDatum> GetPACS_RawDatumClassConfiguration()
		{
			MappingConfiguration<PACS_RawDatum> configuration = new MappingConfiguration<PACS_RawDatum>();
            configuration.HasDiscriminatorValue("{no}");
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).Inheritance(InheritanceStrategy.Default).ToTable("PACS_RawData");
	
			return configuration;
		}
	
		public void PreparePACS_RawDatumPropertyConfigurations(MappingConfiguration<PACS_RawDatum> configuration)
		{
			configuration.HasProperty(x => x.ThumbImageLocation).HasFieldName("_ThumbImageLocation").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ThumbImageLocation").IsNullable().HasColumnType("nvarchar").HasLength(512);
            configuration.HasProperty(x => x.RawDataIndex).HasFieldName("_RawDataIndex").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RawDataIndex").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.SeriesID).HasFieldName("_SeriesID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeriesID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CertUserID).HasFieldName("_CertUserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertUserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CertEquipmentID).HasFieldName("_CertEquipmentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertEquipmentID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.RawDataID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_RawDataID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RawDataID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.DataTypeID).HasFieldName("_DataTypeID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DataTypeID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.DCMInstanceUID).HasFieldName("_DCMInstanceUID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DCMInstanceUID").IsNullable().HasColumnType("nvarchar").HasLength(64);
			configuration.HasProperty(x => x.DCMFileLocation).HasFieldName("_DCMFileLocation").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DCMFileLocation").IsNullable().HasColumnType("nvarchar").HasLength(512);
			configuration.HasProperty(x => x.LastError).HasFieldName("_LastError").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastError").IsNullable().HasColumnType("nvarchar").HasLength(1024);
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.StatusID).HasFieldName("_StatusID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StatusID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.HasError).HasFieldName("_HasError").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("HasError").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.Laterality).HasFieldName("_Laterality").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Laterality").IsNullable().HasColumnType("nvarchar").HasLength(10);
            configuration.HasProperty(x => x.OriginalFileName).HasFieldName("_OriginalFileName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("OriginalFileName").IsNullable().HasColumnType("nvarchar").HasLength(256);
        }

        public void PreparePACS_RawDatumAssociationConfigurations(MappingConfiguration<PACS_RawDatum> configuration)
		{
			configuration.HasAssociation(x => x.PACSSeries).HasFieldName("_PACSSeries").WithOpposite(x => x.PACS_RawData).ToColumn("SeriesID").HasConstraint((x, y) =>  x.SeriesID == y.SeriesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CERTUser).HasFieldName("_CERTUser").WithOpposite(x => x.PACS_RawData).ToColumn("CertUserID").HasConstraint((x, y) => x.CertUserID == y.CertUserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CERTEquipment).HasFieldName("_CERTEquipment").WithOpposite(x => x.PACS_RawData).ToColumn("CertEquipmentID").HasConstraint((x, y) => x.CertEquipmentID == y.CertEquipmentID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACSDataType).HasFieldName("_PACSDataType").WithOpposite(x => x.PACS_RawData).ToColumn("DataTypeID").HasConstraint((x, y) =>  x.DataTypeID == y.DataTypeID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACSRawDataStatus).HasFieldName("_PACSRawDataStatus").ToColumn("StatusID").HasConstraint((x, y) =>  x.StatusID == y.StatusID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_DicomFrames).HasFieldName("_PACSDicomFrames").WithOpposite(x => x.PACSRawDatum).ToColumn("RawDataID").HasConstraint((y, x) =>  x.RawDataID == y.RawDataID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.MEA_Measurements).HasFieldName("_MEAMeasurements").WithOpposite(x => x.PACSRawDatum).ToColumn("RawDataID").HasConstraint((y, x) =>  x.RawDataID == y.RawDataID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_ProcessedData).HasFieldName("_PACSProcessedData").WithOpposite(x => x.PACSRawDatum).ToColumn("RawDataID").HasConstraint((y, x) =>  x.RawDataID == y.RawDataID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_DicomOPTs).HasFieldName("_PACSDicomOPTs").WithOpposite(x => x.ScoutImage).ToColumn("RefRawDataID").HasConstraint((y, x) =>  x.RefRawDataID == y.RawDataID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<PACS_DicomEPDF> GetPACS_DicomEPDFMappingConfiguration()
		{
			MappingConfiguration<PACS_DicomEPDF> configuration = this.GetPACS_DicomEPDFClassConfiguration();

			return configuration;
		}

		public MappingConfiguration<PACS_DicomEPDF> GetPACS_DicomEPDFClassConfiguration()
		{
			MappingConfiguration<PACS_DicomEPDF> configuration = new MappingConfiguration<PACS_DicomEPDF>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.PACS_DicomEPDF");
            configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).Inheritance(InheritanceStrategy.Vertical).ToTable("PACS_DicomEPDF");
	
			return configuration;
		}

        public MappingConfiguration<PACS_DicomOP> GetPACS_DicomOPMappingConfiguration()
		{
			MappingConfiguration<PACS_DicomOP> configuration = this.GetPACS_DicomOPClassConfiguration();
			this.PreparePACS_DicomOPPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_DicomOP> GetPACS_DicomOPClassConfiguration()
		{
			MappingConfiguration<PACS_DicomOP> configuration = new MappingConfiguration<PACS_DicomOP>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.PACS_DicomOP");
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).Inheritance(InheritanceStrategy.Vertical).ToTable("PACS_DicomOP");
	
			return configuration;
		}
	
		public void PreparePACS_DicomOPPropertyConfigurations(MappingConfiguration<PACS_DicomOP> configuration)
		{
			configuration.HasProperty(x => x.PixelSpacingY).HasFieldName("_PixelSpacingY").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PixelSpacingY").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PixelSpacingX).HasFieldName("_PixelSpacingX").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PixelSpacingX").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.BolusTime).HasFieldName("_BolusTime").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("BolusTime").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.AcquisitionTime).HasFieldName("_AcquisitionTime").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AcquisitionTime").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.ImageWidth).HasFieldName("_ImageWidth").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImageWidth").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ImageHeight).HasFieldName("_ImageHeight").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImageHeight").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
		}
		public MappingConfiguration<PACS_DicomOPT> GetPACS_DicomOPTMappingConfiguration()
		{
			MappingConfiguration<PACS_DicomOPT> configuration = this.GetPACS_DicomOPTClassConfiguration();
			this.PreparePACS_DicomOPTPropertyConfigurations(configuration);
			this.PreparePACS_DicomOPTAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_DicomOPT> GetPACS_DicomOPTClassConfiguration()
		{
			MappingConfiguration<PACS_DicomOPT> configuration = new MappingConfiguration<PACS_DicomOPT>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.PACS_DicomOPT");
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).Inheritance(InheritanceStrategy.Vertical).ToTable("PACS_DicomOPT");
	
			return configuration;
		}
	
		public void PreparePACS_DicomOPTPropertyConfigurations(MappingConfiguration<PACS_DicomOPT> configuration)
		{
			configuration.HasProperty(x => x.PixelSpacingY).HasFieldName("_PixelSpacingY").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PixelSpacingY").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PixelSpacingX).HasFieldName("_PixelSpacingX").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PixelSpacingX").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.FrameSpacing).HasFieldName("_FrameSpacing").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FrameSpacing").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ImageWidth).HasFieldName("_ImageWidth").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImageWidth").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ImageHeight).HasFieldName("_ImageHeight").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImageHeight").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.RefRawDataID).HasFieldName("_RefRawDataID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RefRawDataID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.RefImageCoveredArea).HasFieldName("_RefImageCoveredArea").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RefImageCoveredArea").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.RefDCMInstanceUID).HasFieldName("_RefDCMInstanceUID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RefDCMInstanceUID").IsNullable().HasColumnType("nvarchar").HasLength(64);
			configuration.HasProperty(x => x.ScanType).HasFieldName("_ScanType").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ScanType").IsNullable().HasColumnType("nvarchar").HasLength(32);
		}
	
		public void PreparePACS_DicomOPTAssociationConfigurations(MappingConfiguration<PACS_DicomOPT> configuration)
		{
			configuration.HasAssociation(x => x.ScoutImage).HasFieldName("_PACSRawDatum").WithOpposite(x => x.PACS_DicomOPTs).ToColumn("RefRawDataID").HasConstraint((x, y) =>  x.RefRawDataID == y.RawDataID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<CONTACT_UserTrial> GetCONTACT_UserTrialMappingConfiguration()
		{
			MappingConfiguration<CONTACT_UserTrial> configuration = this.GetCONTACT_UserTrialClassConfiguration();
			this.PrepareCONTACT_UserTrialPropertyConfigurations(configuration);
			this.PrepareCONTACT_UserTrialAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CONTACT_UserTrial> GetCONTACT_UserTrialClassConfiguration()
		{
			MappingConfiguration<CONTACT_UserTrial> configuration = new MappingConfiguration<CONTACT_UserTrial>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CONTACT_UserTrial");
	
			return configuration;
		}
	
		public void PrepareCONTACT_UserTrialPropertyConfigurations(MappingConfiguration<CONTACT_UserTrial> configuration)
		{
			configuration.HasProperty(x => x.UserID).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.UserTrialID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_UserTrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserTrialID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
		}
	
		public void PrepareCONTACT_UserTrialAssociationConfigurations(MappingConfiguration<CONTACT_UserTrial> configuration)
		{
			configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.CONTACT_UserTrials).ToColumn("UserID").HasConstraint((x, y) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.CONTACT_UserTrials).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERT_Users).HasFieldName("_CERTUsers").WithOpposite(x => x.CONTACTUserTrial).ToColumn("UserTrialID").HasConstraint((y, x) =>  x.UserTrialID == y.UserTrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<CERT_User> GetCERT_UserMappingConfiguration()
		{
			MappingConfiguration<CERT_User> configuration = this.GetCERT_UserClassConfiguration();
			this.PrepareCERT_UserPropertyConfigurations(configuration);
			this.PrepareCERT_UserAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CERT_User> GetCERT_UserClassConfiguration()
		{
			MappingConfiguration<CERT_User> configuration = new MappingConfiguration<CERT_User>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CERT_Users");
	
			return configuration;
		}
	
		public void PrepareCERT_UserPropertyConfigurations(MappingConfiguration<CERT_User> configuration)
		{
			configuration.HasProperty(x => x.UserTrialID).HasFieldName("_UserTrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserTrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.DateCreated).HasFieldName("_DateCreated").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DateCreated").IsNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.DateofCertification).HasFieldName("_DateofCertification").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DateofCertification").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.CertUserID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CertUserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertUserID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsCertified).HasFieldName("_IsCertified").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsCertified").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.ImgProcedureID).HasFieldName("_ImgProcedureID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImgProcedureID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.CertifiedByID).HasFieldName("_CertifiedByID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertifiedByID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.AssignedToID).HasFieldName("_AssignedToID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AssignedToID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
        }

        public void PrepareCERT_UserAssociationConfigurations(MappingConfiguration<CERT_User> configuration)
		{
			configuration.HasAssociation(x => x.CERTImgProcedureList).HasFieldName("_CERTImgProcedureList").WithOpposite(x => x.CERT_Users).ToColumn("ImgProcedureID").HasConstraint((x, y) =>  x.ImgProcedureID == y.ImgProcedureID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTUserTrial).HasFieldName("_CONTACTUserTrial").WithOpposite(x => x.CERT_Users).ToColumn("UserTrialID").HasConstraint((x, y) =>  x.UserTrialID == y.UserTrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CertifiedBy).HasFieldName("_CertifiedBy").WithOpposite(x => x.CERT_Users).ToColumn("CertifiedByID").HasConstraint((x, y) =>  x.CertifiedByID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.AssignedTo).HasFieldName("_AssignedTo").WithOpposite(x => x.CERT_Users).ToColumn("AssignedToID").HasConstraint((x, y) => x.AssignedToID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CERT_UploadInfos).HasFieldName("_CERTUploadInfos").WithOpposite(x => x.CERTUser).ToColumn("CertUserID").HasConstraint((y, x) =>  x.CertUserID == y.CertUserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_RawData).HasFieldName("_PACSRawData").WithOpposite(x => x.CERTUser).ToColumn("CertUserID").HasConstraint((y, x) => x.CertUserID == y.CertUserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.QRY_Queries).HasFieldName("_QRYQueries").WithOpposite(x => x.CERTUser).ToColumn("CertUserID").HasConstraint((y, x) =>  x.CertUserID == y.CertUserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			//configuration.HasAssociation(x => x.AUDIT_Records).HasFieldName("_AUDITRecords").WithOpposite(x => x.CERTUser).ToColumn("CertUserID").HasConstraint((y, x) =>  x.CertUserID == y.CertUserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<CERT_Equipment> GetCERT_EquipmentMappingConfiguration()
		{
			MappingConfiguration<CERT_Equipment> configuration = this.GetCERT_EquipmentClassConfiguration();
			this.PrepareCERT_EquipmentPropertyConfigurations(configuration);
			this.PrepareCERT_EquipmentAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CERT_Equipment> GetCERT_EquipmentClassConfiguration()
		{
			MappingConfiguration<CERT_Equipment> configuration = new MappingConfiguration<CERT_Equipment>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CERT_Equipments");
	
			return configuration;
		}
	
		public void PrepareCERT_EquipmentPropertyConfigurations(MappingConfiguration<CERT_Equipment> configuration)
		{
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ImgProcedureID).HasFieldName("_ImgProcedureID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImgProcedureID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.EquipmentID).HasFieldName("_EquipmentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EquipmentID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.DateCreated).HasFieldName("_DateCreated").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DateCreated").IsNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.DateofCertification).HasFieldName("_DateofCertification").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DateofCertification").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.IsCertified).HasFieldName("_IsCertified").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsCertified").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.CertEquipmentID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CertEquipmentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertEquipmentID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PixelSpacingY).HasFieldName("_PixelSpacingY").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PixelSpacingY").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PixelSpacingX).HasFieldName("_PixelSpacingX").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PixelSpacingX").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.FrameSpacing).HasFieldName("_FrameSpacing").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FrameSpacing").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.CertifiedByID).HasFieldName("_CertifiedByID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertifiedByID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.AssignedToID).HasFieldName("_AssignedToID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AssignedToID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
        }

        public void PrepareCERT_EquipmentAssociationConfigurations(MappingConfiguration<CERT_Equipment> configuration)
		{
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.CERT_Equipments).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERTImgProcedureList).HasFieldName("_CERTImgProcedureList").WithOpposite(x => x.CERT_Equipments).ToColumn("ImgProcedureID").HasConstraint((x, y) =>  x.ImgProcedureID == y.ImgProcedureID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTEquipment).HasFieldName("_CONTACTEquipment").WithOpposite(x => x.CERT_Equipments).ToColumn("EquipmentID").HasConstraint((x, y) =>  x.EquipmentID == y.EquipmentID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CertifiedBy).HasFieldName("_CertifiedBy").WithOpposite(x => x.CERT_Equipments).ToColumn("CertifiedByID").HasConstraint((x, y) =>  x.CertifiedByID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.AssignedTo).HasFieldName("_AssignedTo").WithOpposite(x => x.CERT_Equipments).ToColumn("AssignedToID").HasConstraint((x, y) => x.AssignedToID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CERT_UploadInfos).HasFieldName("_CERTUploadInfos").WithOpposite(x => x.CERTEquipment).ToColumn("CertEquipmentID").HasConstraint((y, x) =>  x.CertEquipmentID == y.CertEquipmentID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_RawData).HasFieldName("_PACSRawData").WithOpposite(x => x.CERTEquipment).ToColumn("CertEquipmentID").HasConstraint((y, x) => x.CertEquipmentID == y.CertEquipmentID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.QRY_Queries).HasFieldName("_QRYQueries").WithOpposite(x => x.CERTEquipment).ToColumn("CertEquipmentID").HasConstraint((y, x) =>  x.CertEquipmentID == y.CertEquipmentID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			//configuration.HasAssociation(x => x.AUDIT_Records).HasFieldName("_AUDITRecords").WithOpposite(x => x.CERTEquipment).ToColumn("CertEquipmentID").HasConstraint((y, x) =>  x.CertEquipmentID == y.CertEquipmentID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<UPLD_UploadInfo> GetUPLD_UploadInfoMappingConfiguration()
		{
			MappingConfiguration<UPLD_UploadInfo> configuration = this.GetUPLD_UploadInfoClassConfiguration();
			this.PrepareUPLD_UploadInfoPropertyConfigurations(configuration);
			this.PrepareUPLD_UploadInfoAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<UPLD_UploadInfo> GetUPLD_UploadInfoClassConfiguration()
		{
			MappingConfiguration<UPLD_UploadInfo> configuration = new MappingConfiguration<UPLD_UploadInfo>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("UPLD_UploadInfo");
	
			return configuration;
		}
	
		public void PrepareUPLD_UploadInfoPropertyConfigurations(MappingConfiguration<UPLD_UploadInfo> configuration)
		{
			configuration.HasProperty(x => x.UploadInfoID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_UploadInfoID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UploadInfoID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.UploadDate).HasFieldName("_UploadDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UploadDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.UploaderID).HasFieldName("_UploaderID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UploaderID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.StatusID).HasFieldName("_StatusID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StatusID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.SeriesID).HasFieldName("_SeriesID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeriesID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PhotoDate).HasFieldName("_PhotoDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PhotoDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.DataFileLocation).HasFieldName("_DataFileLocation").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DataFileLocation").IsNullable().HasColumnType("nvarchar").HasLength(512);
			configuration.HasProperty(x => x.UploadNote).HasFieldName("_UploadNote").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UploadNote").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.Laterality).HasFieldName("_Laterality").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Laterality").IsNullable().HasColumnType("nvarchar").HasLength(10);
            configuration.HasProperty(x => x.LastError).HasFieldName("_LastError").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastError").IsNullable().HasColumnType("nvarchar").HasLength(1024);
            configuration.HasProperty(x => x.HasError).HasFieldName("_HasError").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("HasError").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PrepareUPLD_UploadInfoAssociationConfigurations(MappingConfiguration<UPLD_UploadInfo> configuration)
		{
			configuration.HasAssociation(x => x.PACSSeries).HasFieldName("_PACSSeries").WithOpposite(x => x.UPLD_UploadInfos).ToColumn("SeriesID").HasConstraint((x, y) =>  x.SeriesID == y.SeriesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.UPLD_UploadInfos).ToColumn("UploaderID").HasConstraint((x, y) =>  x.UploaderID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACSRawDataStatus).HasFieldName("_PACSRawDataStatus").ToColumn("StatusID").HasConstraint((x, y) => x.StatusID == y.StatusID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<PACS_DataType> GetPACS_DataTypeMappingConfiguration()
		{
			MappingConfiguration<PACS_DataType> configuration = this.GetPACS_DataTypeClassConfiguration();
			this.PreparePACS_DataTypePropertyConfigurations(configuration);
			this.PreparePACS_DataTypeAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_DataType> GetPACS_DataTypeClassConfiguration()
		{
			MappingConfiguration<PACS_DataType> configuration = new MappingConfiguration<PACS_DataType>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_DataTypes");
	
			return configuration;
		}
	
		public void PreparePACS_DataTypePropertyConfigurations(MappingConfiguration<PACS_DataType> configuration)
		{
			configuration.HasProperty(x => x.DataTypeID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_DataTypeID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DataTypeID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.DataType).HasFieldName("_DataType").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DataType").IsNotNullable().HasColumnType("nvarchar").HasLength(50);
		}
	
		public void PreparePACS_DataTypeAssociationConfigurations(MappingConfiguration<PACS_DataType> configuration)
		{
			configuration.HasAssociation(x => x.CERT_ImgProcedureLists).HasFieldName("_CERTImgProcedureLists").WithOpposite(x => x.PACSDataType).ToColumn("DataTypeID").HasConstraint((y, x) =>  x.DataTypeID == y.DataTypeID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_RawData).HasFieldName("_PACSRawData").WithOpposite(x => x.PACSDataType).ToColumn("DataTypeID").HasConstraint((y, x) =>  x.DataTypeID == y.DataTypeID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.MEA_MeasDataTypes).HasFieldName("_MEAMeasDataTypes").WithOpposite(x => x.PACSDataType).ToColumn("DataTypeID").HasConstraint((y, x) =>  x.DataTypeID == y.DataTypeID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<PACS_DicomFrame> GetPACS_DicomFrameMappingConfiguration()
		{
			MappingConfiguration<PACS_DicomFrame> configuration = this.GetPACS_DicomFrameClassConfiguration();
			this.PreparePACS_DicomFramePropertyConfigurations(configuration);
			this.PreparePACS_DicomFrameAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_DicomFrame> GetPACS_DicomFrameClassConfiguration()
		{
			MappingConfiguration<PACS_DicomFrame> configuration = new MappingConfiguration<PACS_DicomFrame>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_DicomFrames");
	
			return configuration;
		}
	
		public void PreparePACS_DicomFramePropertyConfigurations(MappingConfiguration<PACS_DicomFrame> configuration)
		{
			configuration.HasProperty(x => x.RawDataID).HasFieldName("_RawDataID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RawDataID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ImageWidth).HasFieldName("_ImageWidth").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImageWidth").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ImageHeight).HasFieldName("_ImageHeight").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImageHeight").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.FrameIndex).HasFieldName("_FrameIndex").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FrameIndex").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.FrameImageLocation).HasFieldName("_FrameImageLocation").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FrameImageLocation").IsNullable().HasColumnType("nvarchar").HasLength(512);
			configuration.HasProperty(x => x.DicomFrameID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_DicomFrameID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DicomFrameID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.RefLineType).HasFieldName("_RefLineType").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RefLineType").IsNullable().HasColumnType("nvarchar").HasLength(32);
			configuration.HasProperty(x => x.RefLineCoordinates).HasFieldName("_RefLineCoordinates").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RefLineCoordinates").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.IsKeyFrame).HasFieldName("_IsKeyFrame").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsKeyFrame").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
		}
	
		public void PreparePACS_DicomFrameAssociationConfigurations(MappingConfiguration<PACS_DicomFrame> configuration)
		{
			configuration.HasAssociation(x => x.PACSRawDatum).HasFieldName("_PACSRawDatum").WithOpposite(x => x.PACS_DicomFrames).ToColumn("RawDataID").HasConstraint((x, y) =>  x.RawDataID == y.RawDataID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.MEA_Measurements).HasFieldName("_MEAMeasurements").WithOpposite(x => x.PACSDicomFrame).ToColumn("DicomFrameID").HasConstraint((y, x) =>  x.DicomFrameID == y.DicomFrameID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_ProcessedData).HasFieldName("_PACSProcessedData").WithOpposite(x => x.PACSDicomFrame).ToColumn("DicomFrameID").HasConstraint((y, x) =>  x.DicomFrameID == y.DicomFrameID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<GRD_ReportResult> GetGRD_ReportResultMappingConfiguration()
		{
			MappingConfiguration<GRD_ReportResult> configuration = this.GetGRD_ReportResultClassConfiguration();
			this.PrepareGRD_ReportResultPropertyConfigurations(configuration);
			this.PrepareGRD_ReportResultAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<GRD_ReportResult> GetGRD_ReportResultClassConfiguration()
		{
			MappingConfiguration<GRD_ReportResult> configuration = new MappingConfiguration<GRD_ReportResult>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("GRD_ReportResults");
	
			return configuration;
		}
	
		public void PrepareGRD_ReportResultPropertyConfigurations(MappingConfiguration<GRD_ReportResult> configuration)
		{
			configuration.HasProperty(x => x.GRDReportResultID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_GRDReportResultID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GRD_ReportResultID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GReportID).HasFieldName("_GReportID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GReportID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GQuestionString).HasFieldName("_GQuestionString").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionString").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.GQuestionGroupName).HasFieldName("_GQuestionGroupName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionGroupName").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.GQuestionDes).HasFieldName("_GQuestionDes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionDes").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.GAnswersString).HasFieldName("_GAnswersString").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GAnswersString").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.GAnswerMeasurement).HasFieldName("_GAnswerMeasurement").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GAnswerMeasurement").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Laterality).HasFieldName("_Laterality").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Laterality").IsNullable().HasColumnType("nvarchar").HasLength(10);
		}
	
		public void PrepareGRD_ReportResultAssociationConfigurations(MappingConfiguration<GRD_ReportResult> configuration)
		{
			configuration.HasAssociation(x => x.MEAMeasurement).HasFieldName("_MEAMeasurement").WithOpposite(x => x.GRD_ReportResults).ToColumn("GAnswerMeasurement").HasConstraint((x, y) =>  x.GAnswerMeasurement == y.MeasurementID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRDReport).HasFieldName("_GRDReport").WithOpposite(x => x.GRD_ReportResults).ToColumn("GReportID").HasConstraint((x, y) =>  x.GReportID == y.GReportID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<GRD_QuestionTag> GetGRD_QuestionTagMappingConfiguration()
		{
			MappingConfiguration<GRD_QuestionTag> configuration = this.GetGRD_QuestionTagClassConfiguration();
			this.PrepareGRD_QuestionTagPropertyConfigurations(configuration);
			this.PrepareGRD_QuestionTagAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<GRD_QuestionTag> GetGRD_QuestionTagClassConfiguration()
		{
			MappingConfiguration<GRD_QuestionTag> configuration = new MappingConfiguration<GRD_QuestionTag>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("GRD_QuestionTags");
	
			return configuration;
		}
	
		public void PrepareGRD_QuestionTagPropertyConfigurations(MappingConfiguration<GRD_QuestionTag> configuration)
		{
			configuration.HasProperty(x => x.GQuestionTagID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_GQuestionTagID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionTagID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GQuestionTagString).HasFieldName("_GQuestionTagString").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionTagString").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
		}
	
		public void PrepareGRD_QuestionTagAssociationConfigurations(MappingConfiguration<GRD_QuestionTag> configuration)
		{
			configuration.HasAssociation(x => x.GRD_GradingQuestions).HasFieldName("_GRDGradingQuestions").WithOpposite(x => x.GRDQuestionTag).ToColumn("GQuestionTagID").HasConstraint((y, x) =>  x.GQuestionTagID == y.GQuestionTagID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<GRD_GradingQuestion> GetGRD_GradingQuestionMappingConfiguration()
		{
			MappingConfiguration<GRD_GradingQuestion> configuration = this.GetGRD_GradingQuestionClassConfiguration();
			this.PrepareGRD_GradingQuestionPropertyConfigurations(configuration);
			this.PrepareGRD_GradingQuestionAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<GRD_GradingQuestion> GetGRD_GradingQuestionClassConfiguration()
		{
			MappingConfiguration<GRD_GradingQuestion> configuration = new MappingConfiguration<GRD_GradingQuestion>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("GRD_GradingQuestions");
	
			return configuration;
		}
	
		public void PrepareGRD_GradingQuestionPropertyConfigurations(MappingConfiguration<GRD_GradingQuestion> configuration)
		{
			configuration.HasProperty(x => x.GQuestionID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_GQuestionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GQuestionDes).HasFieldName("_GQuestionDes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionDes").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.GQuestionString).HasFieldName("_GQuestionString").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionString").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.GQuestionTagID).HasFieldName("_GQuestionTagID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionTagID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsAnswerMeasurement).HasFieldName("_IsAnswerMeasurement").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsAnswerMeasurement").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.AnswerMask).HasFieldName("_AnswerMask").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AnswerMask").IsNullable().HasColumnType("nvarchar").HasLength(64);
		}
	
		public void PrepareGRD_GradingQuestionAssociationConfigurations(MappingConfiguration<GRD_GradingQuestion> configuration)
		{
			configuration.HasAssociation(x => x.GRDQuestionTag).HasFieldName("_GRDQuestionTag").WithOpposite(x => x.GRD_GradingQuestions).ToColumn("GQuestionTagID").HasConstraint((x, y) =>  x.GQuestionTagID == y.GQuestionTagID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRD_GradingAnswers).HasFieldName("_GRDGradingAnswers").WithOpposite(x => x.GRDGradingQuestion).ToColumn("GQuestionID").HasConstraint((y, x) =>  x.GQuestionID == y.GQuestionID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRD_TempQuestions).HasFieldName("_GRDTempQuestions").WithOpposite(x => x.GRDGradingQuestion).ToColumn("GQuestionID").HasConstraint((y, x) =>  x.GQuestionID == y.GQuestionID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRD_Dependencies).HasFieldName("_GRDDependencies").WithOpposite(x => x.GRDGradingQuestion).ToColumn("GTargetQuestionID").HasConstraint((y, x) =>  x.GTargetQuestionID == y.GQuestionID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<GRD_GradingAnswer> GetGRD_GradingAnswerMappingConfiguration()
		{
			MappingConfiguration<GRD_GradingAnswer> configuration = this.GetGRD_GradingAnswerClassConfiguration();
			this.PrepareGRD_GradingAnswerPropertyConfigurations(configuration);
			this.PrepareGRD_GradingAnswerAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<GRD_GradingAnswer> GetGRD_GradingAnswerClassConfiguration()
		{
			MappingConfiguration<GRD_GradingAnswer> configuration = new MappingConfiguration<GRD_GradingAnswer>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("GRD_GradingAnswers");
	
			return configuration;
		}
	
		public void PrepareGRD_GradingAnswerPropertyConfigurations(MappingConfiguration<GRD_GradingAnswer> configuration)
		{
			configuration.HasProperty(x => x.GAnswersID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_GAnswersID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GAnswersID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GQuestionID).HasFieldName("_GQuestionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GAnswerString).HasFieldName("_GAnswerString").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GAnswerString").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.GAnswerSeq).HasFieldName("_GAnswerSeq").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GAnswerSeq").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareGRD_GradingAnswerAssociationConfigurations(MappingConfiguration<GRD_GradingAnswer> configuration)
		{
			configuration.HasAssociation(x => x.GRDGradingQuestion).HasFieldName("_GRDGradingQuestion").WithOpposite(x => x.GRD_GradingAnswers).ToColumn("GQuestionID").HasConstraint((x, y) =>  x.GQuestionID == y.GQuestionID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.GRD_GradingAnswers).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRD_Dependencies).HasFieldName("_GRDDependencies").WithOpposite(x => x.GRDGradingAnswer).ToColumn("GTargetAnswerID").HasConstraint((y, x) =>  x.GTargetAnswerID == y.GAnswersID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRD_Dependencies1).HasFieldName("_GRDDependencies1").WithOpposite(x => x.GRDGradingAnswer1).ToColumn("GSourceAnswerID").HasConstraint((y, x) =>  x.GSourceAnswerID == y.GAnswersID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<GRD_GradingTemplate> GetGRD_GradingTemplateMappingConfiguration()
		{
			MappingConfiguration<GRD_GradingTemplate> configuration = this.GetGRD_GradingTemplateClassConfiguration();
			this.PrepareGRD_GradingTemplatePropertyConfigurations(configuration);
			this.PrepareGRD_GradingTemplateAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<GRD_GradingTemplate> GetGRD_GradingTemplateClassConfiguration()
		{
			MappingConfiguration<GRD_GradingTemplate> configuration = new MappingConfiguration<GRD_GradingTemplate>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("GRD_GradingTemplates");
	
			return configuration;
		}
	
		public void PrepareGRD_GradingTemplatePropertyConfigurations(MappingConfiguration<GRD_GradingTemplate> configuration)
		{
			configuration.HasProperty(x => x.GTemplateID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_GTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GTemplateID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GTemplateName).HasFieldName("_GTemplateName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GTemplateName").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.GTemplateDes).HasFieldName("_GTemplateDes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GTemplateDes").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsLocked).HasFieldName("_IsLocked").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsLocked").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
		}
	
		public void PrepareGRD_GradingTemplateAssociationConfigurations(MappingConfiguration<GRD_GradingTemplate> configuration)
		{
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.GRD_GradingTemplates).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_TPProcLists).HasFieldName("_PACSTPProcLists").WithOpposite(x => x.GRDGradingTemplate).ToColumn("GTemplateID").HasConstraint((y, x) =>  x.GTemplateID == y.GTemplateID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRD_Reports).HasFieldName("_GRDReports").WithOpposite(x => x.GRDGradingTemplate).ToColumn("GTemplateID").HasConstraint((y, x) =>  x.GTemplateID == y.GTemplateID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRD_QuestionGroups).HasFieldName("_GRDQuestionGroups").WithOpposite(x => x.GRDGradingTemplate).ToColumn("GTemplateID").HasConstraint((y, x) =>  x.GTemplateID == y.GTemplateID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_SeriesGroups).HasFieldName("_PACSSeriesGroups").WithOpposite(x => x.GRDGradingTemplate).ToColumn("GTemplateID").HasConstraint((y, x) =>  x.GTemplateID == y.GTemplateID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<GRD_QuestionGroup> GetGRD_QuestionGroupMappingConfiguration()
		{
			MappingConfiguration<GRD_QuestionGroup> configuration = this.GetGRD_QuestionGroupClassConfiguration();
			this.PrepareGRD_QuestionGroupPropertyConfigurations(configuration);
			this.PrepareGRD_QuestionGroupAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<GRD_QuestionGroup> GetGRD_QuestionGroupClassConfiguration()
		{
			MappingConfiguration<GRD_QuestionGroup> configuration = new MappingConfiguration<GRD_QuestionGroup>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("GRD_QuestionGroups");
	
			return configuration;
		}
	
		public void PrepareGRD_QuestionGroupPropertyConfigurations(MappingConfiguration<GRD_QuestionGroup> configuration)
		{
			configuration.HasProperty(x => x.GQuestionGroupID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_GQuestionGroupID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionGroupID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GQuestionGroupName).HasFieldName("_GQuestionGroupName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionGroupName").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.GQuestionGroupSeq).HasFieldName("_GQuestionGroupSeq").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionGroupSeq").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GTemplateID).HasFieldName("_GTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GTemplateID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareGRD_QuestionGroupAssociationConfigurations(MappingConfiguration<GRD_QuestionGroup> configuration)
		{
			configuration.HasAssociation(x => x.GRDGradingTemplate).HasFieldName("_GRDGradingTemplate").WithOpposite(x => x.GRD_QuestionGroups).ToColumn("GTemplateID").HasConstraint((x, y) =>  x.GTemplateID == y.GTemplateID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRD_TempQuestions).HasFieldName("_GRDTempQuestions").WithOpposite(x => x.GRDQuestionGroup).ToColumn("GQuestionGroupID").HasConstraint((y, x) =>  x.GQuestionGroupID == y.GQuestionGroupID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<GRD_TempQuestion> GetGRD_TempQuestionMappingConfiguration()
		{
			MappingConfiguration<GRD_TempQuestion> configuration = this.GetGRD_TempQuestionClassConfiguration();
			this.PrepareGRD_TempQuestionPropertyConfigurations(configuration);
			this.PrepareGRD_TempQuestionAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<GRD_TempQuestion> GetGRD_TempQuestionClassConfiguration()
		{
			MappingConfiguration<GRD_TempQuestion> configuration = new MappingConfiguration<GRD_TempQuestion>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("GRD_TempQuestions");
	
			return configuration;
		}
	
		public void PrepareGRD_TempQuestionPropertyConfigurations(MappingConfiguration<GRD_TempQuestion> configuration)
		{
			configuration.HasProperty(x => x.GTempQuestionID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_GTempQuestionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GTempQuestionID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GQuestionID).HasFieldName("_GQuestionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GQuestionGroupID).HasFieldName("_GQuestionGroupID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GQuestionGroupID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GTempQuestionSeqInGroup).HasFieldName("_GTempQuestionSeqInGroup").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GTempQuestionSeqInGroup").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareGRD_TempQuestionAssociationConfigurations(MappingConfiguration<GRD_TempQuestion> configuration)
		{
			configuration.HasAssociation(x => x.GRDQuestionGroup).HasFieldName("_GRDQuestionGroup").WithOpposite(x => x.GRD_TempQuestions).ToColumn("GQuestionGroupID").HasConstraint((x, y) =>  x.GQuestionGroupID == y.GQuestionGroupID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRDGradingQuestion).HasFieldName("_GRDGradingQuestion").WithOpposite(x => x.GRD_TempQuestions).ToColumn("GQuestionID").HasConstraint((x, y) =>  x.GQuestionID == y.GQuestionID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<GRD_Dependency> GetGRD_DependencyMappingConfiguration()
		{
			MappingConfiguration<GRD_Dependency> configuration = this.GetGRD_DependencyClassConfiguration();
			this.PrepareGRD_DependencyPropertyConfigurations(configuration);
			this.PrepareGRD_DependencyAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<GRD_Dependency> GetGRD_DependencyClassConfiguration()
		{
			MappingConfiguration<GRD_Dependency> configuration = new MappingConfiguration<GRD_Dependency>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("GRD_Dependencies");
	
			return configuration;
		}
	
		public void PrepareGRD_DependencyPropertyConfigurations(MappingConfiguration<GRD_Dependency> configuration)
		{
			configuration.HasProperty(x => x.GDependencyID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_GDependencyID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GDependencyID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GSourceAnswerID).HasFieldName("_GSourceAnswerID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GSourceAnswerID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GTargetAnswerID).HasFieldName("_GTargetAnswerID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GTargetAnswerID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GTargetQuestionID).HasFieldName("_GTargetQuestionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GTargetQuestionID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ActionEnable).HasFieldName("_ActionEnable").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ActionEnable").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
		}
	
		public void PrepareGRD_DependencyAssociationConfigurations(MappingConfiguration<GRD_Dependency> configuration)
		{
			configuration.HasAssociation(x => x.GRDGradingQuestion).HasFieldName("_GRDGradingQuestion").WithOpposite(x => x.GRD_Dependencies).ToColumn("GTargetQuestionID").HasConstraint((x, y) =>  x.GTargetQuestionID == y.GQuestionID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRDGradingAnswer).HasFieldName("_GRDGradingAnswer").WithOpposite(x => x.GRD_Dependencies).ToColumn("GTargetAnswerID").HasConstraint((x, y) =>  x.GTargetAnswerID == y.GAnswersID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRDGradingAnswer1).HasFieldName("_GRDGradingAnswer1").WithOpposite(x => x.GRD_Dependencies1).ToColumn("GSourceAnswerID").HasConstraint((x, y) =>  x.GSourceAnswerID == y.GAnswersID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<QRY_Message> GetQRY_MessageMappingConfiguration()
		{
			MappingConfiguration<QRY_Message> configuration = this.GetQRY_MessageClassConfiguration();
			this.PrepareQRY_MessagePropertyConfigurations(configuration);
			this.PrepareQRY_MessageAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<QRY_Message> GetQRY_MessageClassConfiguration()
		{
			MappingConfiguration<QRY_Message> configuration = new MappingConfiguration<QRY_Message>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("QRY_Messages");
	
			return configuration;
		}
	
		public void PrepareQRY_MessagePropertyConfigurations(MappingConfiguration<QRY_Message> configuration)
		{
			configuration.HasProperty(x => x.SeqCount).HasFieldName("_SeqCount").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeqCount").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.UserID).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.QueryID).HasFieldName("_QueryID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("QueryID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.MessageID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_MessageID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MessageID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.MessageBody).HasFieldName("_MessageBody").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MessageBody").IsNullable().HasColumnType("varchar(max)").HasLength(0);
			configuration.HasProperty(x => x.DateCreated).HasFieldName("_DateCreated").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DateCreated").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.IsRequest).HasFieldName("_IsRequest").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsRequest").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.HasResponded).HasFieldName("_HasResponded").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("HasResponded").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PrepareQRY_MessageAssociationConfigurations(MappingConfiguration<QRY_Message> configuration)
		{
			configuration.HasAssociation(x => x.QRYQuery).HasFieldName("_QRYQuery").WithOpposite(x => x.QRY_Messages).ToColumn("QueryID").HasConstraint((x, y) =>  x.QueryID == y.QueryID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.QRY_Messages).ToColumn("UserID").HasConstraint((x, y) => x.UserID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<MEA_MeasDataType> GetMEA_MeasDataTypeMappingConfiguration()
		{
			MappingConfiguration<MEA_MeasDataType> configuration = this.GetMEA_MeasDataTypeClassConfiguration();
			this.PrepareMEA_MeasDataTypePropertyConfigurations(configuration);
			this.PrepareMEA_MeasDataTypeAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<MEA_MeasDataType> GetMEA_MeasDataTypeClassConfiguration()
		{
			MappingConfiguration<MEA_MeasDataType> configuration = new MappingConfiguration<MEA_MeasDataType>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("MEA_MeasDataTypes");
	
			return configuration;
		}
	
		public void PrepareMEA_MeasDataTypePropertyConfigurations(MappingConfiguration<MEA_MeasDataType> configuration)
		{
			configuration.HasProperty(x => x.MeasDataTypeID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_MeasDataTypeID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MeasDataTypeID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.DataTypeID).HasFieldName("_DataTypeID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DataTypeID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.MeasurementTypeID).HasFieldName("_MeasurementTypeID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MeasurementTypeID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareMEA_MeasDataTypeAssociationConfigurations(MappingConfiguration<MEA_MeasDataType> configuration)
		{
			configuration.HasAssociation(x => x.PACSDataType).HasFieldName("_PACSDataType").WithOpposite(x => x.MEA_MeasDataTypes).ToColumn("DataTypeID").HasConstraint((x, y) =>  x.DataTypeID == y.DataTypeID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.MEAMeasurementType).HasFieldName("_MEAMeasurementType").WithOpposite(x => x.MEA_MeasDataTypes).ToColumn("MeasurementTypeID").HasConstraint((x, y) =>  x.MeasurementTypeID == y.MeasurementTypeID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<EXCELSIOR_SYSTEM> GetEXCELSIOR_SYSTEMMappingConfiguration()
		{
			MappingConfiguration<EXCELSIOR_SYSTEM> configuration = this.GetEXCELSIOR_SYSTEMClassConfiguration();
			this.PrepareEXCELSIOR_SYSTEMPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<EXCELSIOR_SYSTEM> GetEXCELSIOR_SYSTEMClassConfiguration()
		{
			MappingConfiguration<EXCELSIOR_SYSTEM> configuration = new MappingConfiguration<EXCELSIOR_SYSTEM>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("EXCELSIOR_SYSTEM");
	
			return configuration;
		}
	
		public void PrepareEXCELSIOR_SYSTEMPropertyConfigurations(MappingConfiguration<EXCELSIOR_SYSTEM> configuration)
		{
			configuration.HasProperty(x => x.SystemID).IsIdentity().HasFieldName("_SystemID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SystemID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.SystemVersion).HasFieldName("_SystemVersion").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SystemVersion").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.ScreenTimeOutInterval).HasFieldName("_ScreenTimeOutInterval").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ScreenTimeOutInterval").IsNullable().HasColumnType("time");
			configuration.HasProperty(x => x.SystemType).HasFieldName("_SystemType").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SystemType").IsNullable().HasColumnType("nvarchar").HasLength(32);
		}

    	public MappingConfiguration<MEA_OCTLayer> GetMEA_OCTLayerMappingConfiguration()
		{
			MappingConfiguration<MEA_OCTLayer> configuration = this.GetMEA_OCTLayerClassConfiguration();
			this.PrepareMEA_OCTLayerPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<MEA_OCTLayer> GetMEA_OCTLayerClassConfiguration()
		{
			MappingConfiguration<MEA_OCTLayer> configuration = new MappingConfiguration<MEA_OCTLayer>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.MEA_OCTLayer");
            configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("MEA_OCTLayer");
	
			return configuration;
		}
	
		public void PrepareMEA_OCTLayerPropertyConfigurations(MappingConfiguration<MEA_OCTLayer> configuration)
		{
			configuration.HasProperty(x => x.LayerLabel).HasFieldName("_LayerLabel").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LayerLabel").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.MeasurementXML).HasFieldName("_MeasurementXML").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MeasurementXML").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
		}

        public MappingConfiguration<MEA_OCTGrid> GetMEA_OCTGridMappingConfiguration()
		{
			MappingConfiguration<MEA_OCTGrid> configuration = this.GetMEA_OCTGridClassConfiguration();
			this.PrepareMEA_OCTGridPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<MEA_OCTGrid> GetMEA_OCTGridClassConfiguration()
		{
			MappingConfiguration<MEA_OCTGrid> configuration = new MappingConfiguration<MEA_OCTGrid>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.MEA_OCTGrid");
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("MEA_OCTGrid");
	
			return configuration;
		}
	
		public void PrepareMEA_OCTGridPropertyConfigurations(MappingConfiguration<MEA_OCTGrid> configuration)
		{
			configuration.HasProperty(x => x.OCTGridLabel).HasFieldName("_OCTGridLabel").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("OCTGridLabel").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.CenterPointThicknessMm).HasFieldName("_CenterPointThicknessMm").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CenterPointThickness_mm").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TotalVolumeMm3).HasFieldName("_TotalVolumeMm3").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TotalVolume_mm3").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector0Thick).HasFieldName("_Sector0Thick").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector0Thick").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector1Thick).HasFieldName("_Sector1Thick").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector1Thick").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector2Thick).HasFieldName("_Sector2Thick").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector2Thick").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector3Thick).HasFieldName("_Sector3Thick").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector3Thick").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector4Thick).HasFieldName("_Sector4Thick").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector4Thick").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector5Thick).HasFieldName("_Sector5Thick").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector5Thick").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector6Thick).HasFieldName("_Sector6Thick").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector6Thick").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector7Thick).HasFieldName("_Sector7Thick").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector7Thick").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector8Thick).HasFieldName("_Sector8Thick").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector8Thick").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector0Vol).HasFieldName("_Sector0Vol").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector0Vol").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector1Vol).HasFieldName("_Sector1Vol").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector1Vol").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector2Vol).HasFieldName("_Sector2Vol").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector2Vol").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector3Vol).HasFieldName("_Sector3Vol").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector3Vol").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector4Vol).HasFieldName("_Sector4Vol").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector4Vol").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector5Vol).HasFieldName("_Sector5Vol").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector5Vol").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector6Vol).HasFieldName("_Sector6Vol").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector6Vol").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector7Vol).HasFieldName("_Sector7Vol").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector7Vol").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector8Vol).HasFieldName("_Sector8Vol").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector8Vol").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CenterLocationFrame).HasFieldName("_CenterLocationFrame").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CenterLocationFrame").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CenterLocationAscan).HasFieldName("_CenterLocationAscan").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CenterLocationAscan").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.OCTGridLayer2).HasFieldName("_OCTGridLayer2").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("OCTGridLayer2").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.OCTGridLayer1).HasFieldName("_OCTGridLayer1").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("OCTGridLayer1").IsNullable().HasColumnType("nvarchar").HasLength(50);
		}

        public MappingConfiguration<MEA_ETDRSGrid> GetMEA_ETDRSGridMappingConfiguration()
		{
			MappingConfiguration<MEA_ETDRSGrid> configuration = this.GetMEA_ETDRSGridClassConfiguration();
			this.PrepareMEA_ETDRSGridPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<MEA_ETDRSGrid> GetMEA_ETDRSGridClassConfiguration()
		{
			MappingConfiguration<MEA_ETDRSGrid> configuration = new MappingConfiguration<MEA_ETDRSGrid>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.MEA_ETDRSGrid");
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("MEA_ETDRSGrid");
	
			return configuration;
		}
	
		public void PrepareMEA_ETDRSGridPropertyConfigurations(MappingConfiguration<MEA_ETDRSGrid> configuration)
		{
			configuration.HasProperty(x => x.FoveaLocationX).HasFieldName("_FoveaLocationX").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FoveaLocationX").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.FoveaLocationY).HasFieldName("_FoveaLocationY").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FoveaLocationY").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ONHLocationX).HasFieldName("_ONHLocationX").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ONHLocationX").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ONHLocationY).HasFieldName("_ONHLocationY").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ONHLocationY").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector0).HasFieldName("_Sector0").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector0").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector1).HasFieldName("_Sector1").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector1").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector2).HasFieldName("_Sector2").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector2").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector3).HasFieldName("_Sector3").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector3").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector4).HasFieldName("_Sector4").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector4").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector5).HasFieldName("_Sector5").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector5").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector6).HasFieldName("_Sector6").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector6").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector7).HasFieldName("_Sector7").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector7").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Sector8).HasFieldName("_Sector8").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Sector8").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
		}

        public MappingConfiguration<MEA_Distance> GetMEA_DistanceMappingConfiguration()
		{
			MappingConfiguration<MEA_Distance> configuration = this.GetMEA_DistanceClassConfiguration();
			this.PrepareMEA_DistancePropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<MEA_Distance> GetMEA_DistanceClassConfiguration()
		{
			MappingConfiguration<MEA_Distance> configuration = new MappingConfiguration<MEA_Distance>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.MEA_Distance");
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("MEA_Distance");
	
			return configuration;
		}
	
		public void PrepareMEA_DistancePropertyConfigurations(MappingConfiguration<MEA_Distance> configuration)
		{
			configuration.HasProperty(x => x.DistanceMm).HasFieldName("_DistanceMm").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Distance_mm").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.StartX).HasFieldName("_StartX").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StartX").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.StartY).HasFieldName("_StartY").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StartY").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.EndX).HasFieldName("_EndX").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EndX").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.EndY).HasFieldName("_EndY").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EndY").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
		}

        public MappingConfiguration<MEA_Area> GetMEA_AreaMappingConfiguration()
		{
			MappingConfiguration<MEA_Area> configuration = this.GetMEA_AreaClassConfiguration();
			this.PrepareMEA_AreaPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<MEA_Area> GetMEA_AreaClassConfiguration()
		{
			MappingConfiguration<MEA_Area> configuration = new MappingConfiguration<MEA_Area>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.MEA_Area");
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("MEA_Area");
	
			return configuration;
		}
	
		public void PrepareMEA_AreaPropertyConfigurations(MappingConfiguration<MEA_Area> configuration)
		{
			configuration.HasProperty(x => x.AreaSizeMm2).HasFieldName("_AreaSizeMm2").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AreaSize_mm2").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.AreaSizeDA).HasFieldName("_AreaSizeDA").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AreaSize_DA").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.DistanceToFoveaMm).HasFieldName("_DistanceToFoveaMm").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DistanceToFovea_mm").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PerimeterMm).HasFieldName("_PerimeterMm").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Perimeter_mm").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.AreaLabel).HasFieldName("_AreaLabel").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AreaLabel").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.MeasurementXML).HasFieldName("_MeasurementXML").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MeasurementXML").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
		}

        public MappingConfiguration<MEA_Measurement> GetMEA_MeasurementMappingConfiguration()
		{
			MappingConfiguration<MEA_Measurement> configuration = this.GetMEA_MeasurementClassConfiguration();
			this.PrepareMEA_MeasurementPropertyConfigurations(configuration);
			this.PrepareMEA_MeasurementAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<MEA_Measurement> GetMEA_MeasurementClassConfiguration()
		{
			MappingConfiguration<MEA_Measurement> configuration = new MappingConfiguration<MEA_Measurement>();
            configuration.HasDiscriminatorValue("{no}");
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).Inheritance(InheritanceStrategy.Default).ToTable("MEA_Measurements");
	
			return configuration;
		}
	
		public void PrepareMEA_MeasurementPropertyConfigurations(MappingConfiguration<MEA_Measurement> configuration)
		{
			configuration.HasProperty(x => x.MeasurementID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_MeasurementID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MeasurementID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GReportID).HasFieldName("_GReportID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GReportID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.MeasurementTypeID).HasFieldName("_MeasurementTypeID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MeasurementTypeID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.DicomFrameID).HasFieldName("_DicomFrameID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DicomFrameID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.RawDataID).HasFieldName("_RawDataID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RawDataID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareMEA_MeasurementAssociationConfigurations(MappingConfiguration<MEA_Measurement> configuration)
		{
			configuration.HasAssociation(x => x.PACSRawDatum).HasFieldName("_PACSRawDatum").WithOpposite(x => x.MEA_Measurements).ToColumn("RawDataID").HasConstraint((x, y) =>  x.RawDataID == y.RawDataID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACSDicomFrame).HasFieldName("_PACSDicomFrame").WithOpposite(x => x.MEA_Measurements).ToColumn("DicomFrameID").HasConstraint((x, y) =>  x.DicomFrameID == y.DicomFrameID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.MEAMeasurementType).HasFieldName("_MEAMeasurementType").WithOpposite(x => x.MEA_Measurements).ToColumn("MeasurementTypeID").HasConstraint((x, y) =>  x.MeasurementTypeID == y.MeasurementTypeID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRDReport).HasFieldName("_GRDReport").WithOpposite(x => x.MEA_Measurements).ToColumn("GReportID").HasConstraint((x, y) =>  x.GReportID == y.GReportID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRD_ReportResults).HasFieldName("_GRDReportResults").WithOpposite(x => x.MEAMeasurement).ToColumn("GAnswerMeasurement").HasConstraint((y, x) =>  x.GAnswerMeasurement == y.MeasurementID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_DataResults).HasFieldName("_CRFDataResults").WithOpposite(x => x.MEAMeasurement).ToColumn("MeasurementID").HasConstraint((y, x) => x.MeasurementID == y.MeasurementID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<PACS_TrialKeyMetric> GetPACS_TrialKeyMetricMappingConfiguration()
		{
			MappingConfiguration<PACS_TrialKeyMetric> configuration = this.GetPACS_TrialKeyMetricClassConfiguration();
			this.PreparePACS_TrialKeyMetricPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_TrialKeyMetric> GetPACS_TrialKeyMetricClassConfiguration()
		{
			MappingConfiguration<PACS_TrialKeyMetric> configuration = new MappingConfiguration<PACS_TrialKeyMetric>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.PACS_TrialKeyMetric");
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("PACS_TrialKeyMetrics");
	
			return configuration;
		}
	
		public void PreparePACS_TrialKeyMetricPropertyConfigurations(MappingConfiguration<PACS_TrialKeyMetric> configuration)
		{
			configuration.HasProperty(x => x.TargetUploadTAT).HasFieldName("_TargetUploadTAT").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetUploadTAT").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TargetTotalTAT).HasFieldName("_TargetTotalTAT").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetTotalTAT").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TargetTechCertTime).HasFieldName("_TargetTechCertTime").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetTechCertTime").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TargetSubjectsEnrolled).HasFieldName("_TargetSubjectsEnrolled").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetSubjectsEnrolled").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TargetSeriesCollected).HasFieldName("_TargetSeriesCollected").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetSeriesCollected").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TargetQueryTAT).HasFieldName("_TargetQueryTAT").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetQueryTAT").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TargetQueryRatio).HasFieldName("_TargetQueryRatio").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetQueryRatio").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TargetPercentSuboptimalData).HasFieldName("_TargetPercentSuboptimalData").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetPercentSuboptimalData").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TargetGradingTAT).HasFieldName("_TargetGradingTAT").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetGradingTAT").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TargetEqmtCertTime).HasFieldName("_TargetEqmtCertTime").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetEqmtCertTime").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TargetEligibilityTotalTAT).HasFieldName("_TargetEligibilityTotalTAT").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetEligibilityTotalTAT").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TargetEligibilityGradingTAT).HasFieldName("_TargetEligibilityGradingTAT").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetEligibilityGradingTAT").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TargetEligibilityCheckinTAT).HasFieldName("_TargetEligibilityCheckinTAT").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetEligibilityCheckinTAT").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TargetCheckinTAT).HasFieldName("_TargetCheckinTAT").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetCheckinTAT").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
		}

        public MappingConfiguration<CONTACT_Country> GetCONTACT_CountryMappingConfiguration()
		{
			MappingConfiguration<CONTACT_Country> configuration = this.GetCONTACT_CountryClassConfiguration();
			this.PrepareCONTACT_CountryPropertyConfigurations(configuration);
			this.PrepareCONTACT_CountryAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CONTACT_Country> GetCONTACT_CountryClassConfiguration()
		{
			MappingConfiguration<CONTACT_Country> configuration = new MappingConfiguration<CONTACT_Country>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CONTACT_Countries");
	
			return configuration;
		}
	
		public void PrepareCONTACT_CountryPropertyConfigurations(MappingConfiguration<CONTACT_Country> configuration)
		{
			configuration.HasProperty(x => x.CountryID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CountryID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CountryID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CountryName).HasFieldName("_CountryName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CountryName").IsNullable().HasColumnType("nvarchar").HasLength(50);
		}
	
		public void PrepareCONTACT_CountryAssociationConfigurations(MappingConfiguration<CONTACT_Country> configuration)
		{
			configuration.HasAssociation(x => x.CONTACT_Affiliations).HasFieldName("_CONTACTAffiliations").WithOpposite(x => x.CONTACTCountry).ToColumn("CountryID").HasConstraint((y, x) =>  x.CountryID == y.CountryID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACT_Users).HasFieldName("_CONTACTUsers").WithOpposite(x => x.CONTACTCountry).ToColumn("CountryID").HasConstraint((y, x) =>  x.CountryID == y.CountryID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<WF_CategoryFlag> GetWF_CategoryFlagMappingConfiguration()
		{
			MappingConfiguration<WF_CategoryFlag> configuration = this.GetWF_CategoryFlagClassConfiguration();
			this.PrepareWF_CategoryFlagPropertyConfigurations(configuration);
			this.PrepareWF_CategoryFlagAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<WF_CategoryFlag> GetWF_CategoryFlagClassConfiguration()
		{
			MappingConfiguration<WF_CategoryFlag> configuration = new MappingConfiguration<WF_CategoryFlag>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("WF_CategoryFlags");
	
			return configuration;
		}
	
		public void PrepareWF_CategoryFlagPropertyConfigurations(MappingConfiguration<WF_CategoryFlag> configuration)
		{
			configuration.HasProperty(x => x.CategoryFlagID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CategoryFlagID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CategoryFlagID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CategoryDes).HasFieldName("_CategoryDes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CategoryDes").IsNullable().HasColumnType("nvarchar").HasLength(64);
		}
	
		public void PrepareWF_CategoryFlagAssociationConfigurations(MappingConfiguration<WF_CategoryFlag> configuration)
		{
			configuration.HasAssociation(x => x.WF_Sequences).HasFieldName("_WFSequences").WithOpposite(x => x.WFCategoryFlag).ToColumn("CategoryFlagID").HasConstraint((y, x) =>  x.CategoryFlagID == y.CategoryFlagID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<CONTACT_TrialReadingCenter> GetCONTACT_TrialReadingCenterMappingConfiguration()
		{
			MappingConfiguration<CONTACT_TrialReadingCenter> configuration = this.GetCONTACT_TrialReadingCenterClassConfiguration();
			this.PrepareCONTACT_TrialReadingCenterPropertyConfigurations(configuration);
			this.PrepareCONTACT_TrialReadingCenterAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CONTACT_TrialReadingCenter> GetCONTACT_TrialReadingCenterClassConfiguration()
		{
			MappingConfiguration<CONTACT_TrialReadingCenter> configuration = new MappingConfiguration<CONTACT_TrialReadingCenter>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CONTACT_TrialReadingCenters");
	
			return configuration;
		}
	
		public void PrepareCONTACT_TrialReadingCenterPropertyConfigurations(MappingConfiguration<CONTACT_TrialReadingCenter> configuration)
		{
			configuration.HasProperty(x => x.TrialRCID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_TrialRCID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialRCID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.AffiliationID).HasFieldName("_AffiliationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AffiliationID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ImgProcedureID).HasFieldName("_ImgProcedureID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImgProcedureID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareCONTACT_TrialReadingCenterAssociationConfigurations(MappingConfiguration<CONTACT_TrialReadingCenter> configuration)
		{
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.CONTACT_TrialReadingCenters).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTAffiliation).HasFieldName("_CONTACTAffiliation").WithOpposite(x => x.CONTACT_TrialReadingCenters).ToColumn("AffiliationID").HasConstraint((x, y) =>  x.AffiliationID == y.AffiliationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERTImgProcedureList).HasFieldName("_CERTImgProcedureList").WithOpposite(x => x.CONTACT_TrialReadingCenters).ToColumn("ImgProcedureID").HasConstraint((x, y) =>  x.ImgProcedureID == y.ImgProcedureID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<AUDIT_Action> GetAUDIT_ActionMappingConfiguration()
		{
			MappingConfiguration<AUDIT_Action> configuration = this.GetAUDIT_ActionClassConfiguration();
			this.PrepareAUDIT_ActionPropertyConfigurations(configuration);
			this.PrepareAUDIT_ActionAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<AUDIT_Action> GetAUDIT_ActionClassConfiguration()
		{
			MappingConfiguration<AUDIT_Action> configuration = new MappingConfiguration<AUDIT_Action>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("AUDIT_Actions");
	
			return configuration;
		}
	
		public void PrepareAUDIT_ActionPropertyConfigurations(MappingConfiguration<AUDIT_Action> configuration)
		{
			configuration.HasProperty(x => x.AuditActionID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_AuditActionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AuditActionID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.AuditActionDes).HasFieldName("_AuditActionDes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AuditActionDes").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.AuditActionName).HasFieldName("_AuditActionName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AuditActionName").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
		}
	
		public void PrepareAUDIT_ActionAssociationConfigurations(MappingConfiguration<AUDIT_Action> configuration)
		{
			//configuration.HasAssociation(x => x.AUDIT_Records).HasFieldName("_AUDITRecords").WithOpposite(x => x.AUDITAction).ToColumn("AuditActionID").HasConstraint((y, x) =>  x.AuditActionID == y.AuditActionID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<AUDIT_CRUDAudit> GetAUDIT_CRUDAuditMappingConfiguration()
		{
			MappingConfiguration<AUDIT_CRUDAudit> configuration = this.GetAUDIT_CRUDAuditClassConfiguration();
			this.PrepareAUDIT_CRUDAuditPropertyConfigurations(configuration);
			this.PrepareAUDIT_CRUDAuditAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<AUDIT_CRUDAudit> GetAUDIT_CRUDAuditClassConfiguration()
		{
			MappingConfiguration<AUDIT_CRUDAudit> configuration = new MappingConfiguration<AUDIT_CRUDAudit>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("AUDIT_CRUDAudits");
	
			return configuration;
		}
	
		public void PrepareAUDIT_CRUDAuditPropertyConfigurations(MappingConfiguration<AUDIT_CRUDAudit> configuration)
		{
			configuration.HasProperty(x => x.AuditID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_AuditID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AuditID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ObjectID).HasFieldName("_ObjectID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ObjectID").IsNullable().HasColumnType("nvarchar").HasLength(250);
			configuration.HasProperty(x => x.Type).HasFieldName("_Type").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Type").IsNullable().HasColumnType("nvarchar").HasLength(10);
			configuration.HasProperty(x => x.ClassName).HasFieldName("_ClassName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ClassName").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.TableName).HasFieldName("_TableName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TableName").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.RowID).HasFieldName("_RowID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RowID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.OldData).HasFieldName("_OldData").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("OldData").IsNullable().HasColumnType("varchar(max)").HasLength(0);
			configuration.HasProperty(x => x.NewData).HasFieldName("_NewData").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("NewData").IsNullable().HasColumnType("varchar(max)").HasLength(0);
			configuration.HasProperty(x => x.AuditDate).HasFieldName("_AuditDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AuditDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.UserID).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareAUDIT_CRUDAuditAssociationConfigurations(MappingConfiguration<AUDIT_CRUDAudit> configuration)
		{
			//configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.AUDIT_CRUDAudits).ToColumn("UserID").HasConstraint((x, y) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
        }
		
		public MappingConfiguration<QRY_Query> GetQRY_QueryMappingConfiguration()
		{
			MappingConfiguration<QRY_Query> configuration = this.GetQRY_QueryClassConfiguration();
			this.PrepareQRY_QueryPropertyConfigurations(configuration);
			this.PrepareQRY_QueryAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<QRY_Query> GetQRY_QueryClassConfiguration()
		{
			MappingConfiguration<QRY_Query> configuration = new MappingConfiguration<QRY_Query>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("QRY_Query");
	
			return configuration;
		}
	
		public void PrepareQRY_QueryPropertyConfigurations(MappingConfiguration<QRY_Query> configuration)
		{
			configuration.HasProperty(x => x.SeriesID).HasFieldName("_SeriesID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeriesID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.StatusID).HasFieldName("_StatusID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StatusID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.RecipientID).HasFieldName("_RecipientID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReceipientID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.QueryID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_QueryID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("QueryID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.IsResolved).HasFieldName("_IsResolved").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsResolved").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.DeactivateSeries).HasFieldName("_DeactivateSeries").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DeactivateSeries").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.ActionRequired).HasFieldName("_ActionRequired").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ActionRequired").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.Subject).HasFieldName("_Subject").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Subject").IsNullable().HasColumnType("varchar(max)").HasLength(0);
			configuration.HasProperty(x => x.SenderID).HasFieldName("_SenderID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SenderID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.DateResolved).HasFieldName("_DateResolved").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DateResolved").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.InitiateDate).HasFieldName("_InitiateDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("InitiateDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CertUserID).HasFieldName("_CertUserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertUserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CertEquipmentID).HasFieldName("_CertEquipmentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertEquipmentID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareQRY_QueryAssociationConfigurations(MappingConfiguration<QRY_Query> configuration)
		{
            configuration.HasAssociation(x => x.QRYStatus).HasFieldName("_QRYStatus").ToColumn("StatusID").HasConstraint((x, y) => x.StatusID == y.StatusID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACSSeries).HasFieldName("_PACSSeries").WithOpposite(x => x.QRY_Queries).ToColumn("SeriesID").HasConstraint((x, y) =>  x.SeriesID == y.SeriesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Recipient).HasFieldName("_Recipient").WithOpposite(x => x.QRY_Queries).ToColumn("ReceipientID").HasConstraint((x, y) =>  x.RecipientID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.Sender).HasFieldName("_Sender").WithOpposite(x => x.QRY_Queries1).ToColumn("SenderID").HasConstraint((x, y) =>  x.SenderID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.QRY_Queries).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERTUser).HasFieldName("_CERTUser").WithOpposite(x => x.QRY_Queries).ToColumn("CertUserID").HasConstraint((x, y) =>  x.CertUserID == y.CertUserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERTEquipment).HasFieldName("_CERTEquipment").WithOpposite(x => x.QRY_Queries).ToColumn("CertEquipmentID").HasConstraint((x, y) =>  x.CertEquipmentID == y.CertEquipmentID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.QRY_Messages).HasFieldName("_QRYMessages").WithOpposite(x => x.QRYQuery).ToColumn("QueryID").HasConstraint((y, x) =>  x.QueryID == y.QueryID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERT_UploadInfos).HasFieldName("_CERTUploadInfos").WithOpposite(x => x.QRYQuery).ToColumn("QueryID").HasConstraint((y, x) =>  x.QueryID == y.QueryID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}

        public MappingConfiguration<QRY_Status> GetQRY_StatusMappingConfiguration()
        {
            MappingConfiguration<QRY_Status> configuration = this.GetQRY_StatusClassConfiguration();
            this.PrepareQRY_StatusPropertyConfigurations(configuration);
            this.PrepareQRY_StatusAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<QRY_Status> GetQRY_StatusClassConfiguration()
        {
            MappingConfiguration<QRY_Status> configuration = new MappingConfiguration<QRY_Status>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("QRY_Status");

            return configuration;
        }

        public void PrepareQRY_StatusPropertyConfigurations(MappingConfiguration<QRY_Status> configuration)
        {
            configuration.HasProperty(x => x.StatusID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_StatusID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StatusID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.StatusName).HasFieldName("_StatusName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StatusName").IsNotNullable().HasColumnType("nvarchar").HasLength(256);
        }

        public void PrepareQRY_StatusAssociationConfigurations(MappingConfiguration<QRY_Status> configuration)
        {
        }

        public MappingConfiguration<GRD_Report> GetGRD_ReportMappingConfiguration()
		{
			MappingConfiguration<GRD_Report> configuration = this.GetGRD_ReportClassConfiguration();
			this.PrepareGRD_ReportPropertyConfigurations(configuration);
			this.PrepareGRD_ReportAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<GRD_Report> GetGRD_ReportClassConfiguration()
		{
			MappingConfiguration<GRD_Report> configuration = new MappingConfiguration<GRD_Report>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("GRD_Reports");
	
			return configuration;
		}
	
		public void PrepareGRD_ReportPropertyConfigurations(MappingConfiguration<GRD_Report> configuration)
		{
			configuration.HasProperty(x => x.GReportID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_GReportID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GReportID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PerformedBy).HasFieldName("_PerformedBy").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PerformedBy").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsPrimaryResult).HasFieldName("_IsPrimaryResult").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsPrimaryResult").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.PerformedDate).HasFieldName("_PerformedDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PerformedDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.PerformedTime).HasFieldName("_PerformedTime").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PerformedTime").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.SeriesID).HasFieldName("_SeriesID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeriesID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GTemplateID).HasFieldName("_GTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GTemplateID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsSigned).HasFieldName("_IsSigned").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsSigned").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
		}
	
		public void PrepareGRD_ReportAssociationConfigurations(MappingConfiguration<GRD_Report> configuration)
		{
			configuration.HasAssociation(x => x.PACSSeries).HasFieldName("_PACSSeries").WithOpposite(x => x.GRD_Reports).ToColumn("SeriesID").HasConstraint((x, y) =>  x.SeriesID == y.SeriesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.GRD_Reports).ToColumn("PerformedBy").HasConstraint((x, y) =>  x.PerformedBy == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRDGradingTemplate).HasFieldName("_GRDGradingTemplate").WithOpposite(x => x.GRD_Reports).ToColumn("GTemplateID").HasConstraint((x, y) =>  x.GTemplateID == y.GTemplateID).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRD_ReportResults).HasFieldName("_GRDReportResults").WithOpposite(x => x.GRDReport).ToColumn("GReportID").HasConstraint((y, x) =>  x.GReportID == y.GReportID).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.MEA_Measurements).HasFieldName("_MEAMeasurements").WithOpposite(x => x.GRDReport).ToColumn("GReportID").HasConstraint((y, x) =>  x.GReportID == y.GReportID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_SeriesAttachments).HasFieldName("_PACSSeriesAttachments").WithOpposite(x => x.GRDReport).ToColumn("GReportID").HasConstraint((y, x) => x.GReportID == y.GReportID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<PACS_Subject> GetPACS_SubjectMappingConfiguration()
		{
			MappingConfiguration<PACS_Subject> configuration = this.GetPACS_SubjectClassConfiguration();
			this.PreparePACS_SubjectPropertyConfigurations(configuration);
			this.PreparePACS_SubjectAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_Subject> GetPACS_SubjectClassConfiguration()
		{
			MappingConfiguration<PACS_Subject> configuration = new MappingConfiguration<PACS_Subject>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_Subjects");
	
			return configuration;
		}
	
		public void PreparePACS_SubjectPropertyConfigurations(MappingConfiguration<PACS_Subject> configuration)
		{
			configuration.HasProperty(x => x.SiteID).HasFieldName("_SiteID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SiteID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.RandomizedSubjectID).HasFieldName("_RandomizedSubjectID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RandomizedSubjectID").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.AlternativeRandomizedSubjectID).HasFieldName("_AlternativeRandomizedSubjectID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AlternativeRandomizedSubjectID").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.NameCode).HasFieldName("_NameCode").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("NameCode").IsNullable().HasColumnType("nvarchar").HasLength(10);
			configuration.HasProperty(x => x.BirthYear).HasFieldName("_BirthYear").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("BirthYear").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsValidated).HasFieldName("_IsValidated").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsValidated").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.SubjectID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_SubjectID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SubjectID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Laterality).HasFieldName("_Laterality").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Laterality").IsNullable().HasColumnType("nvarchar").HasLength(10);
			configuration.HasProperty(x => x.IsSubjectRejected).HasFieldName("_IsSubjectRejected").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsSubjectRejected").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.IsTestingSubject).HasFieldName("_IsTestingSubject").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsTestingSubject").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.SubjectGroupID).HasFieldName("_SubjectGroupID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SubjectGroupID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.SubjectEnrollmentDate).HasFieldName("_SubjectEnrollmentDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SubjectEnrollmentDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.SubjectCohortID).HasFieldName("_SubjectCohortID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SubjectCohortID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Gender).HasFieldName("_Gender").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Gender").IsNullable().HasColumnType("nvarchar").HasLength(10);
			configuration.HasProperty(x => x.IsDismissed).HasFieldName("_IsDismissed").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsDismissed").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
		}
	
		public void PreparePACS_SubjectAssociationConfigurations(MappingConfiguration<PACS_Subject> configuration)
		{
			configuration.HasAssociation(x => x.PACSSite).HasFieldName("_PACSSite").WithOpposite(x => x.PACS_Subjects).ToColumn("SiteID").HasConstraint((x, y) =>  x.SiteID == y.SiteID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACSSubjectCohort).HasFieldName("_PACSSubjectCohort").WithOpposite(x => x.PACS_Subjects).ToColumn("SubjectCohortID").HasConstraint((x, y) =>  x.SubjectCohortID == y.SubjectCohortID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACSSubjectGroup).HasFieldName("_PACSSubjectGroup").WithOpposite(x => x.PACS_Subjects).ToColumn("SubjectGroupID").HasConstraint((x, y) =>  x.SubjectGroupID == y.SubjectGroupID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_TimePoints).HasFieldName("_PACSTimePoints").WithOpposite(x => x.PACSSubject).ToColumn("SubjectID").HasConstraint((y, x) =>  x.SubjectID == y.SubjectID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			//configuration.HasAssociation(x => x.AUDIT_Records).HasFieldName("_AUDITRecords").WithOpposite(x => x.PACSSubject).ToColumn("SubjectID").HasConstraint((y, x) =>  x.SubjectID == y.SubjectID ).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<PACS_TimePoint> GetPACS_TimePointMappingConfiguration()
		{
			MappingConfiguration<PACS_TimePoint> configuration = this.GetPACS_TimePointClassConfiguration();
			this.PreparePACS_TimePointPropertyConfigurations(configuration);
			this.PreparePACS_TimePointAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_TimePoint> GetPACS_TimePointClassConfiguration()
		{
			MappingConfiguration<PACS_TimePoint> configuration = new MappingConfiguration<PACS_TimePoint>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_TimePoints");
	
			return configuration;
		}
	
		public void PreparePACS_TimePointPropertyConfigurations(MappingConfiguration<PACS_TimePoint> configuration)
		{
			configuration.HasProperty(x => x.TimePointsListID).HasFieldName("_TimePointsListID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TimePointsListID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TimePointsID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_TimePointsID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TimePointsID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TimePointsDCMInstanceUID).HasFieldName("_TimePointsDCMInstanceUID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TimePointsDCMInstanceUID").IsNullable().HasColumnType("nvarchar").HasLength(64);
			configuration.HasProperty(x => x.SubjectID).HasFieldName("_SubjectID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SubjectID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PreparePACS_TimePointAssociationConfigurations(MappingConfiguration<PACS_TimePoint> configuration)
		{
			configuration.HasAssociation(x => x.PACSTimePointsList).HasFieldName("_PACSTimePointsList").WithOpposite(x => x.PACS_TimePoints).ToColumn("TimePointsListID").HasConstraint((x, y) =>  x.TimePointsListID == y.TimePointsListID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACSSubject).HasFieldName("_PACSSubject").WithOpposite(x => x.PACS_TimePoints).ToColumn("SubjectID").HasConstraint((x, y) =>  x.SubjectID == y.SubjectID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_Series).HasFieldName("_PACSSeries").WithOpposite(x => x.PACSTimePoint).ToColumn("TimePointsID").HasConstraint((y, x) =>  x.TimePointsID == y.TimePointsID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_SeriesGroups).HasFieldName("_PACSSeriesGroups").WithOpposite(x => x.PACSTimePoint).ToColumn("TimePointsID").HasConstraint((y, x) =>  x.TimePointsID == y.TimePointsID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<CERT_UploadInfo> GetCERT_UploadInfoMappingConfiguration()
		{
			MappingConfiguration<CERT_UploadInfo> configuration = this.GetCERT_UploadInfoClassConfiguration();
			this.PrepareCERT_UploadInfoPropertyConfigurations(configuration);
			this.PrepareCERT_UploadInfoAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CERT_UploadInfo> GetCERT_UploadInfoClassConfiguration()
		{
			MappingConfiguration<CERT_UploadInfo> configuration = new MappingConfiguration<CERT_UploadInfo>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CERT_UploadInfo");
	
			return configuration;
		}
	
		public void PrepareCERT_UploadInfoPropertyConfigurations(MappingConfiguration<CERT_UploadInfo> configuration)
		{
			configuration.HasProperty(x => x.CertUploadInfoID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CertUploadInfoID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertUploadInfoID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.StatusID).HasFieldName("_StatusID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StatusID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.QueryID).HasFieldName("_QueryID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("QueryID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CertUserID).HasFieldName("_CertUserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertUserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CertEquipmentID).HasFieldName("_CertEquipmentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertEquipmentID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsCertified).HasFieldName("_IsCertified").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsCertified").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.PhotoDate).HasFieldName("_PhotoDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PhotoDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.UploadDate).HasFieldName("_UploadDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UploadDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.DataFileLocation).HasFieldName("_DataFileLocation").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DataFileLocation").IsNullable().HasColumnType("nvarchar").HasLength(512);
			configuration.HasProperty(x => x.InternalNote).HasFieldName("_InternalNote").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("InternalNote").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.UserID).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.EquipmentID).HasFieldName("_EquipmentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("EquipmentID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.LastError).HasFieldName("_LastError").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastError").IsNullable().HasColumnType("nvarchar").HasLength(1024);
            configuration.HasProperty(x => x.HasError).HasFieldName("_HasError").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("HasError").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PrepareCERT_UploadInfoAssociationConfigurations(MappingConfiguration<CERT_UploadInfo> configuration)
		{
			configuration.HasAssociation(x => x.QRYQuery).HasFieldName("_QRYQuery").WithOpposite(x => x.CERT_UploadInfos).ToColumn("QueryID").HasConstraint((x, y) =>  x.QueryID == y.QueryID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERTUser).HasFieldName("_CERTUser").WithOpposite(x => x.CERT_UploadInfos).ToColumn("CertUserID").HasConstraint((x, y) =>  x.CertUserID == y.CertUserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CERTEquipment).HasFieldName("_CERTEquipment").WithOpposite(x => x.CERT_UploadInfos).ToColumn("CertEquipmentID").HasConstraint((x, y) =>  x.CertEquipmentID == y.CertEquipmentID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.CERT_UploadInfos).ToColumn("UserID").HasConstraint((x, y) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTEquipment).HasFieldName("_CONTACTEquipment").WithOpposite(x => x.CERT_UploadInfos).ToColumn("EquipmentID").HasConstraint((x, y) =>  x.EquipmentID == y.EquipmentID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			//configuration.HasAssociation(x => x.AUDIT_Records).HasFieldName("_AUDITRecords").WithOpposite(x => x.CERTUploadInfo).ToColumn("CertUploadInfoID").HasConstraint((y, x) =>  x.CertUploadInfoID == y.CertUploadInfoID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACSRawDataStatus).HasFieldName("_PACSRawDataStatus").ToColumn("StatusID").HasConstraint((x, y) => x.StatusID == y.StatusID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<AUDIT_Record> GetAUDIT_RecordMappingConfiguration()
		{
			MappingConfiguration<AUDIT_Record> configuration = this.GetAUDIT_RecordClassConfiguration();
			this.PrepareAUDIT_RecordPropertyConfigurations(configuration);
			this.PrepareAUDIT_RecordAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<AUDIT_Record> GetAUDIT_RecordClassConfiguration()
		{
			MappingConfiguration<AUDIT_Record> configuration = new MappingConfiguration<AUDIT_Record>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("AUDIT_Records");
	
			return configuration;
		}
	
		public void PrepareAUDIT_RecordPropertyConfigurations(MappingConfiguration<AUDIT_Record> configuration)
		{
			configuration.HasProperty(x => x.AuditRecordID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_AuditRecordID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AuditRecordID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.UserID).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PerformedDateTime).HasFieldName("_PerformedDateTime").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PerformedDateTime").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.AuditActionID).HasFieldName("_AuditActionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AuditActionID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.SeriesID).HasFieldName("_SeriesID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeriesID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.WFTempStepID).HasFieldName("_WFTempStepID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFTempStepID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CertUploadInfoID).HasFieldName("_CertUploadInfoID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertUploadInfoID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ReasonForChange).HasFieldName("_ReasonForChange").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReasonForChange").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
            configuration.HasProperty(x => x.DetailsXML).HasFieldName("_DetailsXML").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DetailsXML").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
            configuration.HasProperty(x => x.CertUserID).HasFieldName("_CertUserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertUserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CertEquipmentID).HasFieldName("_CertEquipmentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CertEquipmentID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.SoftwareVersion).HasFieldName("_SoftwareVersion").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SoftwareVersion").IsNullable().HasColumnType("nvarchar").HasLength(32);
			configuration.HasProperty(x => x.SubjectID).HasFieldName("_SubjectID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SubjectID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.RelatedUserID).HasFieldName("_RelatedUserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RelatedUserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareAUDIT_RecordAssociationConfigurations(MappingConfiguration<AUDIT_Record> configuration)
		{
            //configuration.HasAssociation(x => x.WFTempStep).HasFieldName("_WFTempStep").WithOpposite(x => x.AUDIT_Records).ToColumn("WFTempStepID").HasConstraint((x, y) =>  x.WFTempStepID == y.WFTempStepID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.WFTempStep).HasFieldName("_WFTempStep").ToColumn("WFTempStepID").HasConstraint((x, y) => x.WFTempStepID == y.WFTempStepID).WithDataAccessKind(DataAccessKind.ReadWrite);
            //configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.AUDIT_Records).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").ToColumn("TrialID").HasConstraint((x, y) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            //configuration.HasAssociation(x => x.PACSSeries).HasFieldName("_PACSSeries").WithOpposite(x => x.AUDIT_Records).ToColumn("SeriesID").HasConstraint((x, y) =>  x.SeriesID == y.SeriesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACSSeries).HasFieldName("_PACSSeries").ToColumn("SeriesID").HasConstraint((x, y) => x.SeriesID == y.SeriesID).WithDataAccessKind(DataAccessKind.ReadWrite);
            //configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.AUDIT_Records).ToColumn("UserID").HasConstraint((x, y) => x.UserID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").ToColumn("UserID").HasConstraint((x, y) => x.UserID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            //configuration.HasAssociation(x => x.CERTUploadInfo).HasFieldName("_CERTUploadInfo").WithOpposite(x => x.AUDIT_Records).ToColumn("CertUploadInfoID").HasConstraint((x, y) => x.CertUploadInfoID == y.CertUploadInfoID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CERTUploadInfo).HasFieldName("_CERTUploadInfo").ToColumn("CertUploadInfoID").HasConstraint((x, y) => x.CertUploadInfoID == y.CertUploadInfoID).WithDataAccessKind(DataAccessKind.ReadWrite);
            //configuration.HasAssociation(x => x.AUDITAction).HasFieldName("_AUDITAction").WithOpposite(x => x.AUDIT_Records).ToColumn("AuditActionID").HasConstraint((x, y) => x.AuditActionID == y.AuditActionID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.AUDITAction).HasFieldName("_AUDITAction").ToColumn("AuditActionID").HasConstraint((x, y) => x.AuditActionID == y.AuditActionID).WithDataAccessKind(DataAccessKind.ReadWrite);
            //configuration.HasAssociation(x => x.CERTUser).HasFieldName("_CERTUser").WithOpposite(x => x.AUDIT_Records).ToColumn("CertUserID").HasConstraint((x, y) => x.CertUserID == y.CertUserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CERTUser).HasFieldName("_CERTUser").ToColumn("CertUserID").HasConstraint((x, y) => x.CertUserID == y.CertUserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            //configuration.HasAssociation(x => x.CERTEquipment).HasFieldName("_CERTEquipment").WithOpposite(x => x.AUDIT_Records).ToColumn("CertEquipmentID").HasConstraint((x, y) => x.CertEquipmentID == y.CertEquipmentID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CERTEquipment).HasFieldName("_CERTEquipment").ToColumn("CertEquipmentID").HasConstraint((x, y) => x.CertEquipmentID == y.CertEquipmentID).WithDataAccessKind(DataAccessKind.ReadWrite);
            //configuration.HasAssociation(x => x.PACSSubject).HasFieldName("_PACSSubject").WithOpposite(x => x.AUDIT_Records).ToColumn("SubjectID").HasConstraint((x, y) => x.SubjectID == y.SubjectID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACSSubject).HasFieldName("_PACSSubject").ToColumn("SubjectID").HasConstraint((x, y) => x.SubjectID == y.SubjectID).WithDataAccessKind(DataAccessKind.ReadWrite);
            //configuration.HasAssociation(x => x.RelatedUser).HasFieldName("_RelatedUser").WithOpposite(x => x.AUDIT_Records1).ToColumn("RelatedUserID").HasConstraint((x, y) => x.RelatedUserID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.RelatedUser).HasFieldName("_RelatedUser").ToColumn("RelatedUserID").HasConstraint((x, y) => x.RelatedUserID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<PACS_SeriesComment> GetPACS_SeriesCommentMappingConfiguration()
		{
			MappingConfiguration<PACS_SeriesComment> configuration = this.GetPACS_SeriesCommentClassConfiguration();
			this.PreparePACS_SeriesCommentPropertyConfigurations(configuration);
			this.PreparePACS_SeriesCommentAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_SeriesComment> GetPACS_SeriesCommentClassConfiguration()
		{
			MappingConfiguration<PACS_SeriesComment> configuration = new MappingConfiguration<PACS_SeriesComment>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_SeriesComments");
	
			return configuration;
		}
	
		public void PreparePACS_SeriesCommentPropertyConfigurations(MappingConfiguration<PACS_SeriesComment> configuration)
		{
			configuration.HasProperty(x => x.SCommentID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_SCommentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SCommentID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.SeriesID).HasFieldName("_SeriesID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeriesID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CommentText).HasFieldName("_CommentText").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CommentText").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.CreatedDate).HasFieldName("_CreatedDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CreatedDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.UserID).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PreparePACS_SeriesCommentAssociationConfigurations(MappingConfiguration<PACS_SeriesComment> configuration)
		{
			configuration.HasAssociation(x => x.PACSSeries).HasFieldName("_PACSSeries").WithOpposite(x => x.PACS_SeriesComments).ToColumn("SeriesID").HasConstraint((x, y) =>  x.SeriesID == y.SeriesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.PACS_SeriesComments).ToColumn("UserID").HasConstraint((x, y) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<PACS_RawDataStatus> GetPACS_RawDataStatusMappingConfiguration()
		{
			MappingConfiguration<PACS_RawDataStatus> configuration = this.GetPACS_RawDataStatusClassConfiguration();
			this.PreparePACS_RawDataStatusPropertyConfigurations(configuration);
			this.PreparePACS_RawDataStatusAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_RawDataStatus> GetPACS_RawDataStatusClassConfiguration()
		{
			MappingConfiguration<PACS_RawDataStatus> configuration = new MappingConfiguration<PACS_RawDataStatus>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_RawDataStatus");
	
			return configuration;
		}
	
		public void PreparePACS_RawDataStatusPropertyConfigurations(MappingConfiguration<PACS_RawDataStatus> configuration)
		{
			configuration.HasProperty(x => x.StatusID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_StatusID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StatusID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.StatusName).HasFieldName("_StatusName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StatusName").IsNotNullable().HasColumnType("nvarchar").HasLength(50);
		}
	
		public void PreparePACS_RawDataStatusAssociationConfigurations(MappingConfiguration<PACS_RawDataStatus> configuration)
		{
        }

        public MappingConfiguration<PACS_DicomWSI> GetPACS_DicomWSIMappingConfiguration()
		{
			MappingConfiguration<PACS_DicomWSI> configuration = this.GetPACS_DicomWSIClassConfiguration();
			this.PreparePACS_DicomWSIPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_DicomWSI> GetPACS_DicomWSIClassConfiguration()
		{
			MappingConfiguration<PACS_DicomWSI> configuration = new MappingConfiguration<PACS_DicomWSI>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.PACS_DicomWSI");
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("PACS_DicomWSI");
	
			return configuration;
		}
	
		public void PreparePACS_DicomWSIPropertyConfigurations(MappingConfiguration<PACS_DicomWSI> configuration)
		{
			configuration.HasProperty(x => x.WSIImageWidth).HasFieldName("_WSIImageWidth").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WSIImageWidth").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.WSIImageHeight).HasFieldName("_WSIImageHeight").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WSIImageHeight").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PixelSpacingX).HasFieldName("_PixelSpacingX").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PixelSpacingX").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PixelSpacingY).HasFieldName("_PixelSpacingY").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PixelSpacingY").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TileSizeY).HasFieldName("_TileSizeY").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TileSizeY").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TileSizeX).HasFieldName("_TileSizeX").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TileSizeX").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TileOverlap).HasFieldName("_TileOverlap").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TileOverlap").IsNullable().HasColumnType("smallint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TileFormat).HasFieldName("_TileFormat").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TileFormat").IsNullable().HasColumnType("nvarchar").HasLength(10);
		}
		public MappingConfiguration<CONTACT_UserNotification> GetCONTACT_UserNotificationMappingConfiguration()
		{
			MappingConfiguration<CONTACT_UserNotification> configuration = this.GetCONTACT_UserNotificationClassConfiguration();
			this.PrepareCONTACT_UserNotificationPropertyConfigurations(configuration);
			this.PrepareCONTACT_UserNotificationAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CONTACT_UserNotification> GetCONTACT_UserNotificationClassConfiguration()
		{
			MappingConfiguration<CONTACT_UserNotification> configuration = new MappingConfiguration<CONTACT_UserNotification>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CONTACT_UserNotifications");
	
			return configuration;
		}
	
		public void PrepareCONTACT_UserNotificationPropertyConfigurations(MappingConfiguration<CONTACT_UserNotification> configuration)
		{
			configuration.HasProperty(x => x.UserNotificationID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_UserNotificationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserNotificationID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.UserID).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.NotificationID).HasFieldName("_NotificationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("NotificationID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareCONTACT_UserNotificationAssociationConfigurations(MappingConfiguration<CONTACT_UserNotification> configuration)
		{
			configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.CONTACT_UserNotifications).ToColumn("UserID").HasConstraint((x, y) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTNotification).HasFieldName("_CONTACTNotification").WithOpposite(x => x.CONTACT_UserNotifications).ToColumn("NotificationID").HasConstraint((x, y) =>  x.NotificationID == y.NotificationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<CONTACT_Notification> GetCONTACT_NotificationMappingConfiguration()
		{
			MappingConfiguration<CONTACT_Notification> configuration = this.GetCONTACT_NotificationClassConfiguration();
			this.PrepareCONTACT_NotificationPropertyConfigurations(configuration);
			this.PrepareCONTACT_NotificationAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CONTACT_Notification> GetCONTACT_NotificationClassConfiguration()
		{
			MappingConfiguration<CONTACT_Notification> configuration = new MappingConfiguration<CONTACT_Notification>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CONTACT_Notifications");
	
			return configuration;
		}
	
		public void PrepareCONTACT_NotificationPropertyConfigurations(MappingConfiguration<CONTACT_Notification> configuration)
		{
			configuration.HasProperty(x => x.NotificationID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_NotificationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("NotificationID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.NotificationName).HasFieldName("_NotificationName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("NotificationName").IsNullable().HasColumnType("nvarchar").HasLength(32);
			configuration.HasProperty(x => x.NotificationDesc).HasFieldName("_NotificationDesc").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("NotificationDesc").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.NotificationMsg).HasFieldName("_NotificationMsg").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("NotificationMsg").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.IsPrivate).HasFieldName("_IsPrivate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsPrivate").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
		}
	
		public void PrepareCONTACT_NotificationAssociationConfigurations(MappingConfiguration<CONTACT_Notification> configuration)
		{
			configuration.HasAssociation(x => x.CONTACT_UserNotifications).HasFieldName("_CONTACTUserNotifications").WithOpposite(x => x.CONTACTNotification).ToColumn("NotificationID").HasConstraint((y, x) =>  x.NotificationID == y.NotificationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACT_NotificationRoles).HasFieldName("_CONTACTNotificationRoles").WithOpposite(x => x.CONTACTNotification).ToColumn("NotificationID").HasConstraint((y, x) =>  x.NotificationID == y.NotificationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<CONTACT_NotificationRole> GetCONTACT_NotificationRoleMappingConfiguration()
		{
			MappingConfiguration<CONTACT_NotificationRole> configuration = this.GetCONTACT_NotificationRoleClassConfiguration();
			this.PrepareCONTACT_NotificationRolePropertyConfigurations(configuration);
			this.PrepareCONTACT_NotificationRoleAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CONTACT_NotificationRole> GetCONTACT_NotificationRoleClassConfiguration()
		{
			MappingConfiguration<CONTACT_NotificationRole> configuration = new MappingConfiguration<CONTACT_NotificationRole>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CONTACT_NotificationRoles");
	
			return configuration;
		}
	
		public void PrepareCONTACT_NotificationRolePropertyConfigurations(MappingConfiguration<CONTACT_NotificationRole> configuration)
		{
			configuration.HasProperty(x => x.NotificationRoleID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_NotificationRoleID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("NotificationRoleID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.NotificationID).HasFieldName("_NotificationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("NotificationID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.RoleId).HasFieldName("_RoleId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RoleId").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareCONTACT_NotificationRoleAssociationConfigurations(MappingConfiguration<CONTACT_NotificationRole> configuration)
		{
			configuration.HasAssociation(x => x.AspnetRole).HasFieldName("_AspnetRole").WithOpposite(x => x.CONTACT_NotificationRoles).ToColumn("RoleId").HasConstraint((x, y) =>  x.RoleId == y.RoleId ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTNotification).HasFieldName("_CONTACTNotification").WithOpposite(x => x.CONTACT_NotificationRoles).ToColumn("NotificationID").HasConstraint((x, y) =>  x.NotificationID == y.NotificationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<PACS_SubjectGroup> GetPACS_SubjectGroupMappingConfiguration()
		{
			MappingConfiguration<PACS_SubjectGroup> configuration = this.GetPACS_SubjectGroupClassConfiguration();
			this.PreparePACS_SubjectGroupPropertyConfigurations(configuration);
			this.PreparePACS_SubjectGroupAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_SubjectGroup> GetPACS_SubjectGroupClassConfiguration()
		{
			MappingConfiguration<PACS_SubjectGroup> configuration = new MappingConfiguration<PACS_SubjectGroup>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_SubjectGroups");
	
			return configuration;
		}
	
		public void PreparePACS_SubjectGroupPropertyConfigurations(MappingConfiguration<PACS_SubjectGroup> configuration)
		{
			configuration.HasProperty(x => x.SubjectGroupID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_SubjectGroupID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SubjectGroupID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GroupName).HasFieldName("_GroupName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GroupName").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.NumberofSubjects).HasFieldName("_NumberofSubjects").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("NumberofSubjects").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.GroupDescription).HasFieldName("_GroupDescription").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GroupDescription").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.DosingInfo).HasFieldName("_DosingInfo").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DosingInfo").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.TreatmentEye).HasFieldName("_TreatmentEye").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TreatmentEye").IsNullable().HasColumnType("nvarchar").HasLength(10);
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
		}
	
		public void PreparePACS_SubjectGroupAssociationConfigurations(MappingConfiguration<PACS_SubjectGroup> configuration)
		{
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.PACS_SubjectGroups).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_Subjects).HasFieldName("_PACSSubjects").WithOpposite(x => x.PACSSubjectGroup).ToColumn("SubjectGroupID").HasConstraint((y, x) =>  x.SubjectGroupID == y.SubjectGroupID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<PACS_SubjectCohort> GetPACS_SubjectCohortMappingConfiguration()
		{
			MappingConfiguration<PACS_SubjectCohort> configuration = this.GetPACS_SubjectCohortClassConfiguration();
			this.PreparePACS_SubjectCohortPropertyConfigurations(configuration);
			this.PreparePACS_SubjectCohortAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_SubjectCohort> GetPACS_SubjectCohortClassConfiguration()
		{
			MappingConfiguration<PACS_SubjectCohort> configuration = new MappingConfiguration<PACS_SubjectCohort>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_SubjectCohorts");
	
			return configuration;
		}
	
		public void PreparePACS_SubjectCohortPropertyConfigurations(MappingConfiguration<PACS_SubjectCohort> configuration)
		{
			configuration.HasProperty(x => x.SubjectCohortID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_SubjectCohortID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SubjectCohortID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CohortName).HasFieldName("_CohortName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CohortName").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
		}
	
		public void PreparePACS_SubjectCohortAssociationConfigurations(MappingConfiguration<PACS_SubjectCohort> configuration)
		{
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.PACS_SubjectCohorts).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACS_Subjects).HasFieldName("_PACSSubjects").WithOpposite(x => x.PACSSubjectCohort).ToColumn("SubjectCohortID").HasConstraint((y, x) =>  x.SubjectCohortID == y.SubjectCohortID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<CONTACT_UserAffiliation> GetCONTACT_UserAffiliationMappingConfiguration()
		{
			MappingConfiguration<CONTACT_UserAffiliation> configuration = this.GetCONTACT_UserAffiliationClassConfiguration();
			this.PrepareCONTACT_UserAffiliationPropertyConfigurations(configuration);
			this.PrepareCONTACT_UserAffiliationAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CONTACT_UserAffiliation> GetCONTACT_UserAffiliationClassConfiguration()
		{
			MappingConfiguration<CONTACT_UserAffiliation> configuration = new MappingConfiguration<CONTACT_UserAffiliation>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CONTACT_UserAffiliations");
	
			return configuration;
		}
	
		public void PrepareCONTACT_UserAffiliationPropertyConfigurations(MappingConfiguration<CONTACT_UserAffiliation> configuration)
		{
			configuration.HasProperty(x => x.UserAffiliationID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_UserAffiliationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserAffiliationID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.AffiliationID).HasFieldName("_AffiliationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AffiliationID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.UserID).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareCONTACT_UserAffiliationAssociationConfigurations(MappingConfiguration<CONTACT_UserAffiliation> configuration)
		{
			configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.CONTACT_UserAffiliations).ToColumn("UserID").HasConstraint((x, y) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTAffiliation).HasFieldName("_CONTACTAffiliation").WithOpposite(x => x.CONTACT_UserAffiliations).ToColumn("AffiliationID").HasConstraint((x, y) =>  x.AffiliationID == y.AffiliationID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<MEA_Freehand> GetMEA_FreehandMappingConfiguration()
		{
			MappingConfiguration<MEA_Freehand> configuration = this.GetMEA_FreehandClassConfiguration();
			this.PrepareMEA_FreehandPropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<MEA_Freehand> GetMEA_FreehandClassConfiguration()
		{
			MappingConfiguration<MEA_Freehand> configuration = new MappingConfiguration<MEA_Freehand>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.MEA_Freehand");
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("MEA_Freehand");
	
			return configuration;
		}
	
		public void PrepareMEA_FreehandPropertyConfigurations(MappingConfiguration<MEA_Freehand> configuration)
		{
			configuration.HasProperty(x => x.MeasurementXML).HasFieldName("_MeasurementXML").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MeasurementXML").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.Tag).HasFieldName("_Tag").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Tag").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.Color).HasFieldName("_Color").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Color").IsNullable().HasColumnType("nvarchar").HasLength(10);
		}

		public MappingConfiguration<PACS_SeriesGroup> GetPACS_SeriesGroupMappingConfiguration()
		{
			MappingConfiguration<PACS_SeriesGroup> configuration = this.GetPACS_SeriesGroupClassConfiguration();
			this.PreparePACS_SeriesGroupPropertyConfigurations(configuration);
			this.PreparePACS_SeriesGroupAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<PACS_SeriesGroup> GetPACS_SeriesGroupClassConfiguration()
		{
			MappingConfiguration<PACS_SeriesGroup> configuration = new MappingConfiguration<PACS_SeriesGroup>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_SeriesGroups");
	
			return configuration;
		}
	
		public void PreparePACS_SeriesGroupPropertyConfigurations(MappingConfiguration<PACS_SeriesGroup> configuration)
		{
			configuration.HasProperty(x => x.SeriesGroupID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_SeriesGroupID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeriesGroupID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TimePointsID).HasFieldName("_TimePointsID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TimePointsID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.GTemplateID).HasFieldName("_GTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GTemplateID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.WFTemplateID).HasFieldName("_WFTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("WFTemplateID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CRFTemplateID).HasFieldName("_CRFTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
        }

        public void PreparePACS_SeriesGroupAssociationConfigurations(MappingConfiguration<PACS_SeriesGroup> configuration)
		{
			configuration.HasAssociation(x => x.PACSTimePoint).HasFieldName("_PACSTimePoint").WithOpposite(x => x.PACS_SeriesGroups).ToColumn("TimePointsID").HasConstraint((x, y) =>  x.TimePointsID == y.TimePointsID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.GRDGradingTemplate).HasFieldName("_GRDGradingTemplate").WithOpposite(x => x.PACS_SeriesGroups).ToColumn("GTemplateID").HasConstraint((x, y) =>  x.GTemplateID == y.GTemplateID ).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.WFTemplate).HasFieldName("_WFTemplate").WithOpposite(x => x.PACS_SeriesGroups).ToColumn("WFTemplateID").HasConstraint((x, y) => x.WFTemplateID == y.WFTemplateID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRFTemplate).HasFieldName("_CRFTemplate").WithOpposite(x => x.PACS_SeriesGroups).ToColumn("CRFTemplateID").HasConstraint((x, y) => x.CRFTemplateID == y.CRFTemplateID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_Series).HasFieldName("_PACSSeries").WithOpposite(x => x.PACSSeriesGroup).ToColumn("SeriesGroupID").HasConstraint((y, x) =>  x.SeriesGroupID == y.SeriesGroupID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<RPT_TrialReport> GetRPT_TrialReportMappingConfiguration()
		{
			MappingConfiguration<RPT_TrialReport> configuration = this.GetRPT_TrialReportClassConfiguration();
			this.PrepareRPT_TrialReportPropertyConfigurations(configuration);
			this.PrepareRPT_TrialReportAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<RPT_TrialReport> GetRPT_TrialReportClassConfiguration()
		{
			MappingConfiguration<RPT_TrialReport> configuration = new MappingConfiguration<RPT_TrialReport>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("RPT_TrialReports");
	
			return configuration;
		}
	
		public void PrepareRPT_TrialReportPropertyConfigurations(MappingConfiguration<RPT_TrialReport> configuration)
		{
			configuration.HasProperty(x => x.TrialReportID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_TrialReportID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialReportID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ReportID).HasFieldName("_ReportID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReportID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ReportAlias).HasFieldName("_ReportAlias").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReportAlias").IsNullable().HasColumnType("nvarchar").HasLength(1028);
		}
	
		public void PrepareRPT_TrialReportAssociationConfigurations(MappingConfiguration<RPT_TrialReport> configuration)
		{
			configuration.HasAssociation(x => x.RPTReport).HasFieldName("_RPTReport").WithOpposite(x => x.RPT_TrialReports).ToColumn("ReportID").HasConstraint((x, y) =>  x.ReportID == y.ReportID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.RPT_TrialReports).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.RPT_TrialReportRoles).HasFieldName("_RPTTrialReportRoles").WithOpposite(x => x.RPTTrialReport).ToColumn("TrialReportID").HasConstraint((y, x) =>  x.TrialReportID == y.TrialReportID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<RPT_Report> GetRPT_ReportMappingConfiguration()
		{
			MappingConfiguration<RPT_Report> configuration = this.GetRPT_ReportClassConfiguration();
			this.PrepareRPT_ReportPropertyConfigurations(configuration);
			this.PrepareRPT_ReportAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<RPT_Report> GetRPT_ReportClassConfiguration()
		{
			MappingConfiguration<RPT_Report> configuration = new MappingConfiguration<RPT_Report>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("RPT_Reports");
	
			return configuration;
		}
	
		public void PrepareRPT_ReportPropertyConfigurations(MappingConfiguration<RPT_Report> configuration)
		{
            configuration.HasProperty(x => x.ReportID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_ReportID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReportID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ReportName).HasFieldName("_ReportName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReportName").IsNullable().HasColumnType("nvarchar").HasLength(1028);
			configuration.HasProperty(x => x.ReportClass).HasFieldName("_ReportClass").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReportClass").IsNullable().HasColumnType("nvarchar").HasLength(2056);
            configuration.HasProperty(x => x.ReportAPIClass).HasFieldName("_ReportAPIClass").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReportAPIClass").IsNullable().HasColumnType("nvarchar").HasLength(2056);
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.ReportCategoryID).HasFieldName("_ReportCategoryID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReportCategoryID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareRPT_ReportAssociationConfigurations(MappingConfiguration<RPT_Report> configuration)
		{
			configuration.HasAssociation(x => x.RPTReportCategory).HasFieldName("_RPTReportCategory").WithOpposite(x => x.RPT_Reports).ToColumn("ReportCategoryID").HasConstraint((x, y) =>  x.ReportCategoryID == y.ReportCategoryID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.RPT_TrialReports).HasFieldName("_RPTTrialReports").WithOpposite(x => x.RPTReport).ToColumn("ReportID").HasConstraint((y, x) =>  x.ReportID == y.ReportID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<RPT_ReportCategory> GetRPT_ReportCategoryMappingConfiguration()
		{
			MappingConfiguration<RPT_ReportCategory> configuration = this.GetRPT_ReportCategoryClassConfiguration();
			this.PrepareRPT_ReportCategoryPropertyConfigurations(configuration);
			this.PrepareRPT_ReportCategoryAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<RPT_ReportCategory> GetRPT_ReportCategoryClassConfiguration()
		{
			MappingConfiguration<RPT_ReportCategory> configuration = new MappingConfiguration<RPT_ReportCategory>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("RPT_ReportCategories");
	
			return configuration;
		}
	
		public void PrepareRPT_ReportCategoryPropertyConfigurations(MappingConfiguration<RPT_ReportCategory> configuration)
		{
			configuration.HasProperty(x => x.ReportCategoryID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_ReportCategoryID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReportCategoryID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ReportCategoryName).HasFieldName("_ReportCategoryName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReportCategoryName").IsNullable().HasColumnType("nvarchar").HasLength(1028);
		}
	
		public void PrepareRPT_ReportCategoryAssociationConfigurations(MappingConfiguration<RPT_ReportCategory> configuration)
		{
			configuration.HasAssociation(x => x.RPT_Reports).HasFieldName("_RPTReports").WithOpposite(x => x.RPTReportCategory).ToColumn("ReportCategoryID").HasConstraint((y, x) =>  x.ReportCategoryID == y.ReportCategoryID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<RPT_TrialReportRole> GetRPT_TrialReportRoleMappingConfiguration()
		{
			MappingConfiguration<RPT_TrialReportRole> configuration = this.GetRPT_TrialReportRoleClassConfiguration();
			this.PrepareRPT_TrialReportRolePropertyConfigurations(configuration);
			this.PrepareRPT_TrialReportRoleAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<RPT_TrialReportRole> GetRPT_TrialReportRoleClassConfiguration()
		{
			MappingConfiguration<RPT_TrialReportRole> configuration = new MappingConfiguration<RPT_TrialReportRole>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("RPT_TrialReportRoles");
	
			return configuration;
		}
	
		public void PrepareRPT_TrialReportRolePropertyConfigurations(MappingConfiguration<RPT_TrialReportRole> configuration)
		{
			configuration.HasProperty(x => x.TrialReportID).IsIdentity().HasFieldName("_TrialReportID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialReportID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.RoleId).IsIdentity().HasFieldName("_RoleId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RoleId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
		}
	
		public void PrepareRPT_TrialReportRoleAssociationConfigurations(MappingConfiguration<RPT_TrialReportRole> configuration)
		{
			configuration.HasAssociation(x => x.RPTTrialReport).HasFieldName("_RPTTrialReport").WithOpposite(x => x.RPT_TrialReportRoles).ToColumn("TrialReportID").HasConstraint((x, y) =>  x.TrialReportID == y.TrialReportID ).IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.AspnetRole).HasFieldName("_AspnetRole").WithOpposite(x => x.RPT_TrialReportRoles).ToColumn("RoleId").HasConstraint((x, y) =>  x.RoleId == y.RoleId ).IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<BGD_JobStatus> GetBGD_JobStatusMappingConfiguration()
		{
			MappingConfiguration<BGD_JobStatus> configuration = this.GetBGD_JobStatusClassConfiguration();
			this.PrepareBGD_JobStatusPropertyConfigurations(configuration);
			this.PrepareBGD_JobStatusAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<BGD_JobStatus> GetBGD_JobStatusClassConfiguration()
		{
			MappingConfiguration<BGD_JobStatus> configuration = new MappingConfiguration<BGD_JobStatus>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("BGD_JobStatus");
	
			return configuration;
		}
	
		public void PrepareBGD_JobStatusPropertyConfigurations(MappingConfiguration<BGD_JobStatus> configuration)
		{
			configuration.HasProperty(x => x.JobStatusID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_JobStatusID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("JobStatusID").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.JobStatusName).HasFieldName("_JobStatusName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("JobStatusName").IsNullable().HasColumnType("nvarchar").HasLength(50);
		}
	
		public void PrepareBGD_JobStatusAssociationConfigurations(MappingConfiguration<BGD_JobStatus> configuration)
		{
		}
		
		public MappingConfiguration<BGD_Job> GetBGD_JobMappingConfiguration()
		{
			MappingConfiguration<BGD_Job> configuration = this.GetBGD_JobClassConfiguration();
			this.PrepareBGD_JobPropertyConfigurations(configuration);
			this.PrepareBGD_JobAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<BGD_Job> GetBGD_JobClassConfiguration()
		{
			MappingConfiguration<BGD_Job> configuration = new MappingConfiguration<BGD_Job>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("BGD_Jobs");
	
			return configuration;
		}
	
		public void PrepareBGD_JobPropertyConfigurations(MappingConfiguration<BGD_Job> configuration)
		{
			configuration.HasProperty(x => x.JobID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_JobID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("JobID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.JobType).HasFieldName("_JobType").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("JobType").IsNullable().HasColumnType("nvarchar").HasLength(1028);
			configuration.HasProperty(x => x.Parameters).HasFieldName("_Parameters").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Parameters").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.JobStatusID).HasFieldName("_JobStatusID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("JobStatusID").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ProgressValue).HasFieldName("_ProgressValue").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ProgressValue").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.HasError).HasFieldName("_HasError").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("HasError").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
			configuration.HasProperty(x => x.LastError).HasFieldName("_LastError").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastError").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.UserID).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.CreatedDate).HasFieldName("_CreatedDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CreatedDate").IsNullable().HasColumnType("datetime");
			configuration.HasProperty(x => x.ResultLocation).HasFieldName("_ResultLocation").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ResultLocation").IsNullable().HasColumnType("nvarchar").HasLength(512);
			configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.IsDismissed).HasFieldName("_IsDismissed").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsDismissed").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
		}
	
		public void PrepareBGD_JobAssociationConfigurations(MappingConfiguration<BGD_Job> configuration)
		{
			configuration.HasAssociation(x => x.BGDJobStatus).HasFieldName("_BGDJobStatus").ToColumn("JobStatusID").HasConstraint((x, y) =>  x.JobStatusID == y.JobStatusID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.BGD_Jobs).ToColumn("UserID").HasConstraint((x, y) =>  x.UserID == y.UserID ).WithDataAccessKind(DataAccessKind.ReadWrite);
			configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.BGD_Jobs).ToColumn("TrialID").HasConstraint((x, y) =>  x.TrialID == y.TrialID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<MEA_DeltaVolume> GetMEA_DeltaVolumeMappingConfiguration()
		{
			MappingConfiguration<MEA_DeltaVolume> configuration = this.GetMEA_DeltaVolumeClassConfiguration();
			this.PrepareMEA_DeltaVolumePropertyConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<MEA_DeltaVolume> GetMEA_DeltaVolumeClassConfiguration()
		{
			MappingConfiguration<MEA_DeltaVolume> configuration = new MappingConfiguration<MEA_DeltaVolume>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.MEA_DeltaVolume");
			configuration.MapType(x => new { }).Inheritance(InheritanceStrategy.Vertical).ToTable("MEA_DeltaVolume");
	
			return configuration;
		}
	
		public void PrepareMEA_DeltaVolumePropertyConfigurations(MappingConfiguration<MEA_DeltaVolume> configuration)
		{
			configuration.HasProperty(x => x.AreaSizeMm2).HasFieldName("_AreaSizeMm2").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AreaSize_mm2").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.AreaSizeDA).HasFieldName("_AreaSizeDA").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AreaSize_DA").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.DistanceToFoveaMm).HasFieldName("_DistanceToFoveaMm").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DistanceToFovea_mm").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.PerimeterMm).HasFieldName("_PerimeterMm").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Perimeter_mm").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.AreaLabel).HasFieldName("_AreaLabel").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AreaLabel").IsNullable().HasColumnType("nvarchar").HasLength(50);
			configuration.HasProperty(x => x.MeasurementXML).HasFieldName("_MeasurementXML").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MeasurementXML").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
			configuration.HasProperty(x => x.GLD).HasFieldName("_GLD").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GLD").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.Volume).HasFieldName("_Volume").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Volume").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.DeltaVolume).HasFieldName("_DeltaVolume").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DeltaVolume").IsNullable().HasColumnType("float").HasPrecision(0).HasScale(0);
		}

        public MappingConfiguration<CFG_AnimalSpecy> GetCFG_AnimalSpecyMappingConfiguration()
		{
			MappingConfiguration<CFG_AnimalSpecy> configuration = this.GetCFG_AnimalSpecyClassConfiguration();
			this.PrepareCFG_AnimalSpecyPropertyConfigurations(configuration);
			this.PrepareCFG_AnimalSpecyAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<CFG_AnimalSpecy> GetCFG_AnimalSpecyClassConfiguration()
		{
			MappingConfiguration<CFG_AnimalSpecy> configuration = new MappingConfiguration<CFG_AnimalSpecy>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CFG_AnimalSpecies");
	
			return configuration;
		}
	
		public void PrepareCFG_AnimalSpecyPropertyConfigurations(MappingConfiguration<CFG_AnimalSpecy> configuration)
		{
			configuration.HasProperty(x => x.AnimalSpeciesID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_AnimalSpeciesID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AnimalSpeciesID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.AnimalSpeciesName).HasFieldName("_AnimalSpeciesName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AnimalSpeciesName").IsNullable().HasColumnType("nvarchar").HasLength(256);
			configuration.HasProperty(x => x.AnimalSpeciesDisplayName).HasFieldName("_AnimalSpeciesDisplayName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AnimalSpeciesDisplayName").IsNullable().HasColumnType("nvarchar").HasLength(512);
		}
	
		public void PrepareCFG_AnimalSpecyAssociationConfigurations(MappingConfiguration<CFG_AnimalSpecy> configuration)
		{
			configuration.HasAssociation(x => x.PACS_Trials).HasFieldName("_PACSTrials").WithOpposite(x => x.CFGAnimalSpecy).ToColumn("AnimalSpeciesID").HasConstraint((y, x) =>  x.AnimalSpeciesID == y.AnimalSpeciesID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}
		
		public MappingConfiguration<GRD_Impression> GetGRD_ImpressionMappingConfiguration()
		{
			MappingConfiguration<GRD_Impression> configuration = this.GetGRD_ImpressionClassConfiguration();
			this.PrepareGRD_ImpressionPropertyConfigurations(configuration);
			this.PrepareGRD_ImpressionAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<GRD_Impression> GetGRD_ImpressionClassConfiguration()
		{
			MappingConfiguration<GRD_Impression> configuration = new MappingConfiguration<GRD_Impression>();
			configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("GRD_Impressions");
	
			return configuration;
		}
	
		public void PrepareGRD_ImpressionPropertyConfigurations(MappingConfiguration<GRD_Impression> configuration)
		{
			configuration.HasProperty(x => x.ImpressionID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_ImpressionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImpressionID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
			configuration.HasProperty(x => x.ImpressionDes).HasFieldName("_ImpressionDes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImpressionDes").IsNullable().HasColumnType("nvarchar").HasLength(128);
			configuration.HasProperty(x => x.ImpressionColor).HasFieldName("_ImpressionColor").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ImpressionColor").IsNullable().HasColumnType("nvarchar").HasLength(64);
		}
	
		public void PrepareGRD_ImpressionAssociationConfigurations(MappingConfiguration<GRD_Impression> configuration)
		{
			configuration.HasAssociation(x => x.PACS_Trials).HasFieldName("_PACSTrials").WithOpposite(x => x.GRDImpression).ToColumn("ImpressionID").HasConstraint((y, x) =>  x.ImpressionID == y.ImpressionID ).WithDataAccessKind(DataAccessKind.ReadWrite);
		}

        #region CRF

        #region CRF_Datum

        public MappingConfiguration<CRF_Datum> GetCRF_DataMappingConfiguration()
        {
            MappingConfiguration<CRF_Datum> configuration = this.GetCRF_DataClassConfiguration();
            this.PrepareCRF_DataPropertyConfigurations(configuration);
            this.PrepareCRF_DataAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<CRF_Datum> GetCRF_DataClassConfiguration()
        {
            MappingConfiguration<CRF_Datum> configuration = new MappingConfiguration<CRF_Datum>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CRF_Data");

            return configuration;
        }

        public void PrepareCRF_DataPropertyConfigurations(MappingConfiguration<CRF_Datum> configuration)
        {
            configuration.HasProperty(x => x.CRFDataID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CRFDataID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFDataID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CRFTemplateID).HasFieldName("_CRFTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.VerifiedByID).HasFieldName("_VerifiedByID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("VerifiedByID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.VerifiedDateTime).HasFieldName("_VerifiedDateTime").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("VerifiedDateTime").IsNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.SignedByID).HasFieldName("_SignedByID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SignedByID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.SignedDateTime).HasFieldName("_SignedDateTime").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SignedDateTime").IsNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.SeriesID).HasFieldName("_SeriesID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeriesID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
        }

        public void PrepareCRF_DataAssociationConfigurations(MappingConfiguration<CRF_Datum> configuration)
        {
            configuration.HasAssociation(x => x.CRFTemplate).HasFieldName("_CRFTemplate").WithOpposite(x => x.CRF_Data).ToColumn("CRFTemplateID").HasConstraint((y, x) => x.CRFTemplateID == y.CRFTemplateID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.VerifiedBy).HasFieldName("_VerifiedBy").WithOpposite(x => x.VerifiedCRF_Data).ToColumn("VerifiedByID").HasConstraint((y, x) => x.UserID == y.VerifiedByID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.SignedBy).HasFieldName("_SignedBy").WithOpposite(x => x.SignedCRF_Data).ToColumn("SignedByID").HasConstraint((y, x) => x.UserID == y.SignedByID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACSSeries).HasFieldName("_PACSSeries").WithOpposite(x => x.CRF_Data).ToColumn("SeriesID").HasConstraint((y, x) => x.SeriesID == y.SeriesID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.SourceCRF_DataRELRECs).HasFieldName("_SourceCRFDataRELRECs").WithOpposite(x => x.SourceCRFData).ToColumn("SourceCRFDataID").HasConstraint((y, x) => x.SourceCRFDataID == y.CRFDataID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.TargetCRF_DataRELRECs).HasFieldName("_TargetCRFDataRELRECs").WithOpposite(x => x.TargetCRFData).ToColumn("TargetCRFDataID").HasConstraint((y, x) => x.TargetCRFDataID == y.CRFDataID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_DataResults).HasFieldName("_CRFDataResults").WithOpposite(x => x.CRFData).ToColumn("CRFDataID").HasConstraint((y, x) => x.CRFDataID == y.CRFDataID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region CRF_DataRELREC

        public MappingConfiguration<CRF_DataRELREC> GetCRF_DataRELRECMappingConfiguration()
        {
            MappingConfiguration<CRF_DataRELREC> configuration = this.GetCRF_DataRELRECClassConfiguration();
            this.PrepareCRF_DataRELRECPropertyConfigurations(configuration);
            this.PrepareCRF_DataRELRECAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<CRF_DataRELREC> GetCRF_DataRELRECClassConfiguration()
        {
            MappingConfiguration<CRF_DataRELREC> configuration = new MappingConfiguration<CRF_DataRELREC>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CRF_DataRELREC");

            return configuration;
        }

        public void PrepareCRF_DataRELRECPropertyConfigurations(MappingConfiguration<CRF_DataRELREC> configuration)
        {
            configuration.HasProperty(x => x.CRFDataRELRECID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CRFDataRELRECID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFDataRELRECID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.SourceCRFDataID).HasFieldName("_SourceCRFDataID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SourceCRFDataID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.TargetCRFDataID).HasFieldName("_TargetCRFDataID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetCRFDataID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
        }

        public void PrepareCRF_DataRELRECAssociationConfigurations(MappingConfiguration<CRF_DataRELREC> configuration)
        {
            configuration.HasAssociation(x => x.SourceCRFData).HasFieldName("_SourceCRFData").WithOpposite(x => x.SourceCRF_DataRELRECs).ToColumn("SourceCRFDataID").HasConstraint((y, x) => x.CRFDataID == y.SourceCRFDataID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.TargetCRFData).HasFieldName("_TargetCRFData").WithOpposite(x => x.TargetCRF_DataRELRECs).ToColumn("TargetCRFDataID").HasConstraint((y, x) => x.CRFDataID == y.TargetCRFDataID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region CRF_DataResult

        public MappingConfiguration<CRF_DataResult> GetCRF_DataResultMappingConfiguration()
        {
            MappingConfiguration<CRF_DataResult> configuration = this.GetCRF_DataResultClassConfiguration();
            this.PrepareCRF_DataResultPropertyConfigurations(configuration);
            this.PrepareCRF_DataResultAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<CRF_DataResult> GetCRF_DataResultClassConfiguration()
        {
            MappingConfiguration<CRF_DataResult> configuration = new MappingConfiguration<CRF_DataResult>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CRF_DataResults");

            return configuration;
        }

        public void PrepareCRF_DataResultPropertyConfigurations(MappingConfiguration<CRF_DataResult> configuration)
        {
            configuration.HasProperty(x => x.CRFDataResultID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CRFDataResultID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFDataResultID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CRFDataID).HasFieldName("_CRFDataID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFDataID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CRFTemplateQuestionID).HasFieldName("_CRFTemplateQuestionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateQuestionID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.MeasurementID).HasFieldName("_MeasurementID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MeasurementID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.AnswerString).HasFieldName("_AnswerString").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AnswerString").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
            configuration.HasProperty(x => x.Laterality).HasFieldName("_Laterality").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Laterality").IsNullable().HasColumnType("nvarchar").HasLength(10);
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PrepareCRF_DataResultAssociationConfigurations(MappingConfiguration<CRF_DataResult> configuration)
        {
            configuration.HasAssociation(x => x.CRFData).HasFieldName("_CRFData").WithOpposite(x => x.CRF_DataResults).ToColumn("CRFDataID").HasConstraint((y, x) => x.CRFDataID == y.CRFDataID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRFTemplateQuestion).HasFieldName("_CRFTemplateQuestion").WithOpposite(x => x.CRF_DataResults).ToColumn("CRFTemplateQuestionID").HasConstraint((y, x) => x.CRFTemplateQuestionID == y.CRFTemplateQuestionID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.MEAMeasurement).HasFieldName("_MEAMeasurement").WithOpposite(x => x.CRF_DataResults).ToColumn("MeasurementID").HasConstraint((y, x) => x.MeasurementID == y.MeasurementID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_TemplateAnswers).HasFieldName("_CRFTemplateAnswers").WithOpposite(x => x.CRF_DataResults).IsManaged().MapJoinTable("CRF_DataResultAnswers", (dr, ta) => new
            {
                CRFTemplateAnswerID = ta.CRFTemplateAnswerID,
                CRFDataResultID = dr.CRFDataResultID
            });
        }

        #endregion

        #region CRF_AnswerType

        public MappingConfiguration<CRF_AnswerType> GetCRF_AnswerTypeMappingConfiguration()
        {
            MappingConfiguration<CRF_AnswerType> configuration = this.GetCRF_AnswerTypeClassConfiguration();
            this.PrepareCRF_AnswerTypePropertyConfigurations(configuration);
            this.PrepareCRF_AnswerTypeAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<CRF_AnswerType> GetCRF_AnswerTypeClassConfiguration()
        {
            MappingConfiguration<CRF_AnswerType> configuration = new MappingConfiguration<CRF_AnswerType>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CRF_AnswerTypes");

            return configuration;
        }

        public void PrepareCRF_AnswerTypePropertyConfigurations(MappingConfiguration<CRF_AnswerType> configuration)
        {
            configuration.HasProperty(x => x.CRFAnswerTypeID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CRFAnswerTypeID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFAnswerTypeID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.AnswerTypeName).HasFieldName("_AnswerTypeName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AnswerTypeName").IsNullable().HasColumnType("nvarchar").HasLength(50);
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PrepareCRF_AnswerTypeAssociationConfigurations(MappingConfiguration<CRF_AnswerType> configuration)
        {
            configuration.HasAssociation(x => x.CRF_TemplateQuestions).HasFieldName("_CRFTemplateQuestions").WithOpposite(x => x.CRFAnswerType).ToColumn("CRFAnswerTypeID").HasConstraint((y, x) => x.CRFAnswerTypeID == y.CRFAnswerTypeID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region CRF_AnswerValidation

        public MappingConfiguration<CRF_AnswerValidation> GetCRF_AnswerValidationMappingConfiguration()
        {
            MappingConfiguration<CRF_AnswerValidation> configuration = this.GetCRF_AnswerValidationClassConfiguration();
            this.PrepareCRF_AnswerValidationPropertyConfigurations(configuration);
            this.PrepareCRF_AnswerValidationAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<CRF_AnswerValidation> GetCRF_AnswerValidationClassConfiguration()
        {
            MappingConfiguration<CRF_AnswerValidation> configuration = new MappingConfiguration<CRF_AnswerValidation>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CRF_AnswerValidations");

            return configuration;
        }

        public void PrepareCRF_AnswerValidationPropertyConfigurations(MappingConfiguration<CRF_AnswerValidation> configuration)
        {
            configuration.HasProperty(x => x.CRFAnswerValidationID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CRFAnswerValidationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFAnswerValidationID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.Control).HasFieldName("_Control").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Control").IsNullable().HasColumnType("nvarchar").HasLength(50);
            configuration.HasProperty(x => x.Description).HasFieldName("_Description").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Description").IsNullable().HasColumnType("nvarchar").HasLength(0);
            configuration.HasProperty(x => x.Mask).HasFieldName("_Mask").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Mask").IsNullable().HasColumnType("nvarchar").HasLength(0);
            configuration.HasProperty(x => x.Max).HasFieldName("_Max").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Max").IsNullable().HasColumnType("nvarchar").HasLength(0);
            configuration.HasProperty(x => x.Min).HasFieldName("_Min").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Min").IsNullable().HasColumnType("nvarchar").HasLength(0);
            configuration.HasProperty(x => x.Name).HasFieldName("_Name").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNullable().HasColumnType("nvarchar").HasLength(50);
            configuration.HasProperty(x => x.Tick).HasFieldName("_Tick").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Tick").IsNullable().HasColumnType("nvarchar").HasLength(0);
            configuration.HasProperty(x => x.ToolTip).HasFieldName("_ToolTip").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ToolTip").IsNullable().HasColumnType("nvarchar").HasLength(0);
            configuration.HasProperty(x => x.Unit).HasFieldName("_Unit").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Unit").IsNullable().HasColumnType("nvarchar").HasLength(50);
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PrepareCRF_AnswerValidationAssociationConfigurations(MappingConfiguration<CRF_AnswerValidation> configuration)
        {
            configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.CRF_AnswerValidations).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_TemplateQuestions).HasFieldName("_CRFTemplateQuestions").WithOpposite(x => x.CRFAnswerValidation).ToColumn("CRFAnswerValidationID").HasConstraint((y, x) => x.CRFAnswerValidationID == y.CRFAnswerValidationID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region CRF_TemplateGroup

        public MappingConfiguration<CRF_TemplateGroup> GetCRF_TemplateGroupMappingConfiguration()
        {
            MappingConfiguration<CRF_TemplateGroup> configuration = this.GetCRF_TemplateGroupClassConfiguration();
            this.PrepareCRF_TemplateGroupPropertyConfigurations(configuration);
            this.PrepareCRF_TemplateGroupAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<CRF_TemplateGroup> GetCRF_TemplateGroupClassConfiguration()
        {
            MappingConfiguration<CRF_TemplateGroup> configuration = new MappingConfiguration<CRF_TemplateGroup>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CRF_TemplateGroups");

            return configuration;
        }

        public void PrepareCRF_TemplateGroupPropertyConfigurations(MappingConfiguration<CRF_TemplateGroup> configuration)
        {
            configuration.HasProperty(x => x.CRFTemplateGroupID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CRFTemplateGroupID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateGroupID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CRFTemplateID).HasFieldName("_CRFTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.GroupName).HasFieldName("_GroupName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GroupName").IsNullable().HasColumnType("nvarchar").HasLength(8);
            configuration.HasProperty(x => x.GroupSeq).HasFieldName("_GroupSeq").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GroupSeq").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
        }

        public void PrepareCRF_TemplateGroupAssociationConfigurations(MappingConfiguration<CRF_TemplateGroup> configuration)
        {
            configuration.HasAssociation(x => x.CRFTemplate).HasFieldName("_CRFTemplate").WithOpposite(x => x.CRF_TemplateGroups).ToColumn("CRFTemplateID").HasConstraint((y, x) => x.CRFTemplateID == y.CRFTemplateID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_TemplateQuestions).HasFieldName("_CRFTemplateQuestions").WithOpposite(x => x.CRFTemplateGroup).ToColumn("CRFTemplateGroupID").HasConstraint((y, x) => x.CRFTemplateGroupID == y.CRFTemplateGroupID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_TemplateDependencies).HasFieldName("_CRFTemplateDependencies").WithOpposite(x => x.CRFTemplateGroup).ToColumn("CRFTemplateGroupID").HasConstraint((y, x) => x.CRFTemplateGroupID == y.CRFTemplateGroupID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region CRF_TemplateAnswer

        public MappingConfiguration<CRF_TemplateAnswer> GetCRF_TemplateAnswerMappingConfiguration()
        {
            MappingConfiguration<CRF_TemplateAnswer> configuration = this.GetCRF_TemplateAnswerClassConfiguration();
            this.PrepareCRF_TemplateAnswerPropertyConfigurations(configuration);
            this.PrepareCRF_TemplateAnswerAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<CRF_TemplateAnswer> GetCRF_TemplateAnswerClassConfiguration()
        {
            MappingConfiguration<CRF_TemplateAnswer> configuration = new MappingConfiguration<CRF_TemplateAnswer>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CRF_TemplateAnswers");

            return configuration;
        }

        public void PrepareCRF_TemplateAnswerPropertyConfigurations(MappingConfiguration<CRF_TemplateAnswer> configuration)
        {
            configuration.HasProperty(x => x.CRFTemplateAnswerID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CRFTemplateAnswerID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateAnswerID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CRFTemplateQuestionID).HasFieldName("_CRFTemplateQuestionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateQuestionID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.AnswerString).HasFieldName("_AnswerString").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AnswerString").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
            configuration.HasProperty(x => x.AltAnswerString).HasFieldName("_AltAnswerString").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AltAnswerString").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
            configuration.HasProperty(x => x.AnswerSeq).HasFieldName("_AnswerSeq").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AnswerSeq").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PrepareCRF_TemplateAnswerAssociationConfigurations(MappingConfiguration<CRF_TemplateAnswer> configuration)
        {
            configuration.HasAssociation(x => x.CRFTemplateQuestion).HasFieldName("_CRFTemplateQuestion").WithOpposite(x => x.CRF_TemplateAnswers).ToColumn("CRFTemplateQuestionID").HasConstraint((y, x) => x.CRFTemplateQuestionID == y.CRFTemplateQuestionID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_TemplateDependencySources).HasFieldName("_CRFTemplateDependencySources").WithOpposite(x => x.SourceAnswer).ToColumn("SourceAnswerID").HasConstraint((y, x) => x.SourceAnswerID == y.CRFTemplateAnswerID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_TemplateDependencies).HasFieldName("_CRFTemplateDependencies").WithOpposite(x => x.TargetAnswer).ToColumn("TargetAnswerID").HasConstraint((y, x) => x.TargetAnswerID == y.CRFTemplateAnswerID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_DataResults).HasFieldName("_CRFDataResults").WithOpposite(x => x.CRF_TemplateAnswers).IsManaged().MapJoinTable("CRF_DataResultAnswers", (ta, dr) => new
            {
                CRFTemplateAnswerID = ta.CRFTemplateAnswerID,
                CRFDataResultID = dr.CRFDataResultID
            });
        }

        #endregion

        #region CRF_TemplateDependency

        public MappingConfiguration<CRF_TemplateDependency> GetCRF_TemplateDependencyMappingConfiguration()
        {
            MappingConfiguration<CRF_TemplateDependency> configuration = this.GetCRF_TemplateDependencyClassConfiguration();
            this.PrepareCRF_TemplateDependencyPropertyConfigurations(configuration);
            this.PrepareCRF_TemplateDependencyAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<CRF_TemplateDependency> GetCRF_TemplateDependencyClassConfiguration()
        {
            MappingConfiguration<CRF_TemplateDependency> configuration = new MappingConfiguration<CRF_TemplateDependency>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CRF_TemplateDependencies");

            return configuration;
        }

        public void PrepareCRF_TemplateDependencyPropertyConfigurations(MappingConfiguration<CRF_TemplateDependency> configuration)
        {
            configuration.HasProperty(x => x.CRFTemplateDependencyID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CRFTemplateDependencyID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateDependencyID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CRFTemplateGroupID).HasFieldName("_CRFTemplateGroupID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateGroupID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.TargetQuestionID).HasFieldName("_TargetQuestionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetQuestionID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.TargetAnswerID).HasFieldName("_TargetAnswerID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TargetAnswerID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.ActionEnable).HasFieldName("_ActionEnable").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ActionEnable").IsNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.Expression).HasFieldName("_Expression").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Expression").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
        }

        public void PrepareCRF_TemplateDependencyAssociationConfigurations(MappingConfiguration<CRF_TemplateDependency> configuration)
        {
            configuration.HasAssociation(x => x.CRFTemplateGroup).HasFieldName("_CRFTemplateGroup").WithOpposite(x => x.CRF_TemplateDependencies).ToColumn("CRFTemplateGroupID").HasConstraint((y, x) => x.CRFTemplateGroupID == y.CRFTemplateGroupID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.TargetQuestion).HasFieldName("_TargetQuestion").WithOpposite(x => x.CRF_TemplateDependencies).ToColumn("TargetQuestionID").HasConstraint((y, x) => x.CRFTemplateQuestionID == y.TargetQuestionID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.TargetAnswer).HasFieldName("_TargetAnswer").WithOpposite(x => x.CRF_TemplateDependencies).ToColumn("TargetAnswerID").HasConstraint((y, x) => x.CRFTemplateAnswerID == y.TargetAnswerID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_TemplateDependencySources).HasFieldName("_CRFTemplateDependencySources").WithOpposite(x => x.CRFTemplateDependency).ToColumn("CRFTemplateDependencyID").HasConstraint((y, x) => x.CRFTemplateDependencyID == y.CRFTemplateDependencyID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region CRF_TemplateDependencySource

        public MappingConfiguration<CRF_TemplateDependencySource> GetCRF_TemplateDependencySourceMappingConfiguration()
        {
            MappingConfiguration<CRF_TemplateDependencySource> configuration = this.GetCRF_TemplateDependencySourceClassConfiguration();
            this.PrepareCRF_TemplateDependencySourcePropertyConfigurations(configuration);
            this.PrepareCRF_TemplateDependencySourceAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<CRF_TemplateDependencySource> GetCRF_TemplateDependencySourceClassConfiguration()
        {
            MappingConfiguration<CRF_TemplateDependencySource> configuration = new MappingConfiguration<CRF_TemplateDependencySource>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CRF_TemplateDependencySources");

            return configuration;
        }

        public void PrepareCRF_TemplateDependencySourcePropertyConfigurations(MappingConfiguration<CRF_TemplateDependencySource> configuration)
        {
            configuration.HasProperty(x => x.CRFTemplateDependencySourceID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CRFTemplateDependencySourceID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateDependencySourceID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CRFTemplateDependencyID).HasFieldName("_CRFTemplateDependencyID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateDependencyID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.SourceAnswerID).HasFieldName("_SourceAnswerID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SourceAnswerID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.SourceQuestionID).HasFieldName("_SourceQuestionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SourceQuestionID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
        }

        public void PrepareCRF_TemplateDependencySourceAssociationConfigurations(MappingConfiguration<CRF_TemplateDependencySource> configuration)
        {
            configuration.HasAssociation(x => x.SourceAnswer).HasFieldName("_SourceAnswer").WithOpposite(x => x.CRF_TemplateDependencySources).ToColumn("SourceAnswerID").HasConstraint((y, x) => x.CRFTemplateAnswerID == y.SourceAnswerID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.SourceQuestion).HasFieldName("_SourceQuestion").WithOpposite(x => x.CRF_TemplateDependencySources).ToColumn("SourceQuestionID").HasConstraint((y, x) => x.CRFTemplateQuestionID == y.SourceQuestionID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRFTemplateDependency).HasFieldName("_CRFTemplateDependency").WithOpposite(x => x.CRF_TemplateDependencySources).ToColumn("CRFTemplateDependencyID").HasConstraint((y, x) => x.CRFTemplateDependencyID == y.CRFTemplateDependencyID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region CRF_TemplateQuestion

        public MappingConfiguration<CRF_TemplateQuestion> GetCRF_TemplateQuestionMappingConfiguration()
        {
            MappingConfiguration<CRF_TemplateQuestion> configuration = this.GetCRF_TemplateQuestionClassConfiguration();
            this.PrepareCRF_TemplateQuestionPropertyConfigurations(configuration);
            this.PrepareCRF_TemplateQuestionAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<CRF_TemplateQuestion> GetCRF_TemplateQuestionClassConfiguration()
        {
            MappingConfiguration<CRF_TemplateQuestion> configuration = new MappingConfiguration<CRF_TemplateQuestion>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CRF_TemplateQuestions");

            return configuration;
        }

        public void PrepareCRF_TemplateQuestionPropertyConfigurations(MappingConfiguration<CRF_TemplateQuestion> configuration)
        {
            configuration.HasProperty(x => x.CRFTemplateQuestionID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CRFTemplateQuestionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateQuestionID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CRFTemplateGroupID).HasFieldName("_CRFTemplateGroupID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateGroupID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CRFAnswerTypeID).HasFieldName("_CRFAnswerTypeID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFAnswerTypeID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.CRFAnswerValidationID).HasFieldName("_CRFAnswerValidationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFAnswerValidationID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.QuestionText).HasFieldName("_QuestionText").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("QuestionText").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
            configuration.HasProperty(x => x.CDashVariable).HasFieldName("_CDashVariable").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CDashVariable").IsNullable().HasColumnType("nvarchar").HasLength(8);
            configuration.HasProperty(x => x.SDTMVariable).HasFieldName("_SDTMVariable").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SDTMVariable").IsNullable().HasColumnType("nvarchar").HasLength(8);
            configuration.HasProperty(x => x.QuestionDes).HasFieldName("_QuestionDes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("QuestionDes").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.QuestionSeq).HasFieldName("_QuestionSeq").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("QuestionSeq").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.IsLaterality).HasFieldName("_IsLaterality").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsLaterality").IsNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PrepareCRF_TemplateQuestionAssociationConfigurations(MappingConfiguration<CRF_TemplateQuestion> configuration)
        {
            configuration.HasAssociation(x => x.CRFTemplateGroup).HasFieldName("_CRFTemplateGroup").WithOpposite(x => x.CRF_TemplateQuestions).ToColumn("CRFTemplateGroupID").HasConstraint((y, x) => x.CRFTemplateGroupID == y.CRFTemplateGroupID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRFAnswerType).HasFieldName("_CRFAnswerType").WithOpposite(x => x.CRF_TemplateQuestions).ToColumn("CRFAnswerTypeID").HasConstraint((y, x) => x.CRFAnswerTypeID == y.CRFAnswerTypeID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRFAnswerValidation).HasFieldName("_CRFAnswerValidation").WithOpposite(x => x.CRF_TemplateQuestions).ToColumn("CRFAnswerValidationID").HasConstraint((y, x) => x.CRFAnswerValidationID == y.CRFAnswerValidationID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_TemplateAnswers).HasFieldName("_CRFTemplateAnswers").WithOpposite(x => x.CRFTemplateQuestion).ToColumn("CRFTemplateQuestionID").HasConstraint((y, x) => x.CRFTemplateQuestionID == y.CRFTemplateQuestionID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_TemplateDependencies).HasFieldName("_CRFTemplateDependencies").WithOpposite(x => x.TargetQuestion).ToColumn("TargetQuestionID").HasConstraint((y, x) => x.TargetQuestionID == y.CRFTemplateQuestionID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_TemplateDependencySources).HasFieldName("_CRFTemplateDependencySources").WithOpposite(x => x.SourceQuestion).ToColumn("SourceQuestionID").HasConstraint((y, x) => x.SourceQuestionID == y.CRFTemplateQuestionID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_DataResults).HasFieldName("_CRFDataResults").WithOpposite(x => x.CRFTemplateQuestion).ToColumn("CRFTemplateQuestionID").HasConstraint((y, x) => x.CRFTemplateQuestionID == y.CRFTemplateQuestionID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_TemplateQuestionTags).HasFieldName("_CRFTemplateQuestionTags").WithOpposite(x => x.CRF_TemplateQuestions).IsManaged().MapJoinTable("CRF_TemplateQuestion_CRF_TemplateQuestionTags", (tq, tqt) => new
            {
                CRFTemplateQuestionID = tq.CRFTemplateQuestionID,
                CRFTemplateQuestionTagID = tqt.CRFTemplateQuestionTagID
            });
        }

        #endregion

        #region CRF_TemplateQuestionTag

        public MappingConfiguration<CRF_TemplateQuestionTag> GetCRF_TemplateQuestionTagMappingConfiguration()
        {
            MappingConfiguration<CRF_TemplateQuestionTag> configuration = this.GetCRF_TemplateQuestionTagClassConfiguration();
            this.PrepareCRF_TemplateQuestionTagPropertyConfigurations(configuration);
            this.PrepareCRF_TemplateQuestionTagAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<CRF_TemplateQuestionTag> GetCRF_TemplateQuestionTagClassConfiguration()
        {
            MappingConfiguration<CRF_TemplateQuestionTag> configuration = new MappingConfiguration<CRF_TemplateQuestionTag>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CRF_TemplateQuestionTags");

            return configuration;
        }

        public void PrepareCRF_TemplateQuestionTagPropertyConfigurations(MappingConfiguration<CRF_TemplateQuestionTag> configuration)
        {
            configuration.HasProperty(x => x.CRFTemplateQuestionTagID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CRFTemplateQuestionTagID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateQuestionTagID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.QuestionTagName).HasFieldName("_QuestionTagName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("QuestionTagName").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
        }

        public void PrepareCRF_TemplateQuestionTagAssociationConfigurations(MappingConfiguration<CRF_TemplateQuestionTag> configuration)
        {
            configuration.HasAssociation(x => x.CRF_TemplateQuestions).HasFieldName("_CRFTemplateQuestions").WithOpposite(x => x.CRF_TemplateQuestionTags).IsManaged().MapJoinTable("CRF_TemplateQuestion_CRF_TemplateQuestionTags", (tqt, tq) => new
            {
                CRFTemplateQuestionID = tq.CRFTemplateQuestionID,
                CRFTemplateQuestionTagID = tqt.CRFTemplateQuestionTagID
            });
        }

        #endregion

        #region CRF_Template

        public MappingConfiguration<CRF_Template> GetCRF_TemplateMappingConfiguration()
        {
            MappingConfiguration<CRF_Template> configuration = this.GetCRF_TemplateClassConfiguration();
            this.PrepareCRF_TemplatePropertyConfigurations(configuration);
            this.PrepareCRF_TemplateAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<CRF_Template> GetCRF_TemplateClassConfiguration()
        {
            MappingConfiguration<CRF_Template> configuration = new MappingConfiguration<CRF_Template>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("CRF_Templates");

            return configuration;
        }

        public void PrepareCRF_TemplatePropertyConfigurations(MappingConfiguration<CRF_Template> configuration)
        {
            configuration.HasProperty(x => x.CRFTemplateID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_CRFTemplateID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CRFTemplateID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.TemplateName).HasFieldName("_TemplateName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TemplateName").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
            configuration.HasProperty(x => x.TemplateDes).HasFieldName("_TemplateDes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TemplateDes").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
            configuration.HasProperty(x => x.TemplateAbbrev).HasFieldName("_TemplateAbbrev").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TemplateAbbrev").IsNullable().HasColumnType("nvarchar").HasLength(8);
            configuration.HasProperty(x => x.TemplateVersion).HasFieldName("_TemplateVersion").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TemplateVersion").IsNotNullable().HasColumnType("nvarchar").HasLength(50);
            configuration.HasProperty(x => x.AssocProtocol).HasFieldName("_AssocProtocol").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AssocProtocol").IsNotNullable().HasColumnType("nvarchar").HasLength(0);
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.IsLocked).HasFieldName("_IsLocked").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsLocked").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PrepareCRF_TemplateAssociationConfigurations(MappingConfiguration<CRF_Template> configuration)
        {
            configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.CRF_Templates).ToColumn("TrialID").HasConstraint((y, x) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_Data).HasFieldName("_CRFData").WithOpposite(x => x.CRFTemplate).ToColumn("CRFTemplateID").HasConstraint((y, x) => x.CRFTemplateID == y.CRFTemplateID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CRF_TemplateGroups).HasFieldName("_CRFTemplateGroups").WithOpposite(x => x.CRFTemplate).ToColumn("CRFTemplateID").HasConstraint((y, x) => x.CRFTemplateID == y.CRFTemplateID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_TPProcLists).HasFieldName("_PACSTPProcLists").WithOpposite(x => x.CRFTemplate).ToColumn("CRFTemplateID").HasConstraint((y, x) => x.CRFTemplateID == y.CRFTemplateID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACS_SeriesGroups).HasFieldName("_PACSSeriesGroups").WithOpposite(x => x.CRFTemplate).ToColumn("CRFTemplateID").HasConstraint((y, x) => x.CRFTemplateID == y.CRFTemplateID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #endregion

        #region MEA

        public MappingConfiguration<MEA_Stencil> GetMEA_StencilMappingConfiguration()
        {
            MappingConfiguration<MEA_Stencil> configuration = this.GetMEA_StencilClassConfiguration();
            this.PrepareMEA_StencilPropertyConfigurations(configuration);
            this.PrepareMEA_StencilAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<MEA_Stencil> GetMEA_StencilClassConfiguration()
        {
            MappingConfiguration<MEA_Stencil> configuration = new MappingConfiguration<MEA_Stencil>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("MEA_Stencils");

            return configuration;
        }

        public void PrepareMEA_StencilPropertyConfigurations(MappingConfiguration<MEA_Stencil> configuration)
        {
            configuration.HasProperty(x => x.StencilID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_StencilID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StencilID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.Tag).HasFieldName("_Tag").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Tag").IsNullable().HasColumnType("nvarchar(max)").HasLength(0);
            configuration.HasProperty(x => x.Color).HasFieldName("_Color").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Color").IsNullable().HasColumnType("nvarchar").HasLength(10);
            configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
        }

        public void PrepareMEA_StencilAssociationConfigurations(MappingConfiguration<MEA_Stencil> configuration)
        {
            configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.MEA_Stencils).ToColumn("TrialID").HasConstraint((x, y) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region Aspnet

        #region Aspnet_User

        public MappingConfiguration<Aspnet_User> GetAspnet_UserMappingConfiguration()
        {
            MappingConfiguration<Aspnet_User> configuration = this.GetAspnet_UserClassConfiguration();
            this.PrepareAspnet_UserPropertyConfigurations(configuration);
            this.PrepareAspnet_UserAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<Aspnet_User> GetAspnet_UserClassConfiguration()
        {
            MappingConfiguration<Aspnet_User> configuration = new MappingConfiguration<Aspnet_User>();
            configuration.HasDiscriminatorValue("{no}");
            configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).Inheritance(InheritanceStrategy.Default).ToTable("aspnet_Users");

            return configuration;
        }

        public void PrepareAspnet_UserPropertyConfigurations(MappingConfiguration<Aspnet_User> configuration)
        {
            configuration.HasProperty(x => x.UserName).HasFieldName("_UserName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserName").IsNotNullable().HasColumnType("nvarchar").HasLength(256);
            configuration.HasProperty(x => x.UserId).IsIdentity(KeyGenerator.Guid).HasFieldName("_UserId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.MobileAlias).HasFieldName("_MobileAlias").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MobileAlias").IsNullable().HasColumnType("nvarchar").HasLength(16).HasDefaultValue();
            configuration.HasProperty(x => x.LoweredUserName).HasFieldName("_LoweredUserName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LoweredUserName").IsNotNullable().HasColumnType("nvarchar").HasLength(256);
            configuration.HasProperty(x => x.LastActivityDate).HasFieldName("_LastActivityDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastActivityDate").IsNotNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.IsAnonymous).HasFieldName("_IsAnonymous").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsAnonymous").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.ApplicationId).HasFieldName("_ApplicationId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ApplicationId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
        }

        public void PrepareAspnet_UserAssociationConfigurations(MappingConfiguration<Aspnet_User> configuration)
        {
            configuration.HasAssociation(x => x.AspnetApplication).HasFieldName("_AspnetApplication").WithOpposite(x => x.Aspnet_Users).ToColumn("ApplicationId").HasConstraint((x, y) => x.ApplicationId == y.ApplicationId).IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CONTACT_Users).HasFieldName("_CONTACTUsers").WithOpposite(x => x.AspnetUser).ToColumn("AspUserID").HasConstraint((y, x) => x.AspUserID == y.UserId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.AUTH_Clients).HasFieldName("_AUTHClients").WithOpposite(x => x.ApnetUser).ToColumn("AspUserID").HasConstraint((y, x) => x.UserId == y.UserId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region Aspnet_Membership

        public MappingConfiguration<Aspnet_Membership> GetAspnet_MembershipMappingConfiguration()
        {
            MappingConfiguration<Aspnet_Membership> configuration = this.GetAspnet_MembershipClassConfiguration();
            this.PrepareAspnet_MembershipPropertyConfigurations(configuration);
            this.PrepareAspnet_MembershipAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<Aspnet_Membership> GetAspnet_MembershipClassConfiguration()
        {
            MappingConfiguration<Aspnet_Membership> configuration = new MappingConfiguration<Aspnet_Membership>();
            configuration.HasDiscriminatorValue("Excelsior.Domain.Aspnet_Membership");
            configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.ReadWrite).Inheritance(InheritanceStrategy.Vertical).ToTable("aspnet_Membership");

            return configuration;
        }

        public void PrepareAspnet_MembershipPropertyConfigurations(MappingConfiguration<Aspnet_Membership> configuration)
        {
            configuration.HasProperty(x => x.PasswordSalt).HasFieldName("_PasswordSalt").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PasswordSalt").IsNotNullable().HasColumnType("nvarchar").HasLength(128);
            configuration.HasProperty(x => x.PasswordQuestion).HasFieldName("_PasswordQuestion").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PasswordQuestion").IsNullable().HasColumnType("nvarchar").HasLength(256);
            configuration.HasProperty(x => x.PasswordFormat).HasFieldName("_PasswordFormat").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PasswordFormat").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.PasswordAnswer).HasFieldName("_PasswordAnswer").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("PasswordAnswer").IsNullable().HasColumnType("nvarchar").HasLength(128);
            configuration.HasProperty(x => x.Password).HasFieldName("_Password").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Password").IsNotNullable().HasColumnType("nvarchar").HasLength(128);
            configuration.HasProperty(x => x.MobilePIN).HasFieldName("_MobilePIN").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("MobilePIN").IsNullable().HasColumnType("nvarchar").HasLength(16);
            configuration.HasProperty(x => x.LoweredEmail).HasFieldName("_LoweredEmail").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LoweredEmail").IsNullable().HasColumnType("nvarchar").HasLength(256);
            configuration.HasProperty(x => x.LastPasswordChangedDate).HasFieldName("_LastPasswordChangedDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastPasswordChangedDate").IsNotNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.LastLoginDate).HasFieldName("_LastLoginDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastLoginDate").IsNotNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.LastLockoutDate).HasFieldName("_LastLockoutDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastLockoutDate").IsNotNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.IsLockedOut).HasFieldName("_IsLockedOut").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsLockedOut").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.IsApproved).HasFieldName("_IsApproved").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsApproved").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.FailedPasswordAttemptWindowStart).HasFieldName("_FailedPasswordAttemptWindowStart").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FailedPasswordAttemptWindowStart").IsNotNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.FailedPasswordAttemptCount).HasFieldName("_FailedPasswordAttemptCount").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FailedPasswordAttemptCount").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.FailedPasswordAnswerAttemptWindowStart).HasFieldName("_FailedPasswordAnswerAttemptWindowStart").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FailedPasswordAnswerAttemptWindowStart").IsNotNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.FailedPasswordAnswerAttemptCount).HasFieldName("_FailedPasswordAnswerAttemptCount").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FailedPasswordAnswerAttemptCount").IsNotNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.Email).HasFieldName("_Email").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Email").IsNullable().HasColumnType("nvarchar").HasLength(256);
            configuration.HasProperty(x => x.CreateDate).HasFieldName("_CreateDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("CreateDate").IsNotNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.Comment).HasFieldName("_Comment").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Comment").IsNullable().HasColumnType("ntext").HasLength(0);
            configuration.HasProperty(x => x.ApplicationId).HasFieldName("_ApplicationId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ApplicationId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
        }

        public void PrepareAspnet_MembershipAssociationConfigurations(MappingConfiguration<Aspnet_Membership> configuration)
        {
            configuration.HasAssociation(x => x.AspnetApplication).HasFieldName("_AspnetApplication").ToColumn("ApplicationId").HasConstraint((x, y) => x.ApplicationId == y.ApplicationId).IsRequired().WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #endregion

        #region AUTH

        #region AUTH_Client

        public MappingConfiguration<AUTH_Client> GetAUTH_ClientMappingConfiguration()
        {
            MappingConfiguration<AUTH_Client> configuration = this.GetAUTH_ClientClassConfiguration();
            this.PrepareAUTH_ClientPropertyConfigurations(configuration);
            this.PrepareAUTH_ClientAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<AUTH_Client> GetAUTH_ClientClassConfiguration()
        {
            MappingConfiguration<AUTH_Client> configuration = new MappingConfiguration<AUTH_Client>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("AUTH_Client");

            return configuration;
        }

        public void PrepareAUTH_ClientPropertyConfigurations(MappingConfiguration<AUTH_Client> configuration)
        {
            configuration.HasProperty(x => x.ClientId).IsIdentity(KeyGenerator.Default).HasFieldName("_ClientId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ClientId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.UserId).HasFieldName("_UserId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.ClientName).HasFieldName("_ClientName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ClientName").IsNotNullable().HasColumnType("nvarchar").HasLength(80);
            configuration.HasProperty(x => x.RedirectUri).HasFieldName("_RedirectUri").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RedirectUri").IsNotNullable().HasColumnType("nvarchar").HasLength(2000);
        }

        public void PrepareAUTH_ClientAssociationConfigurations(MappingConfiguration<AUTH_Client> configuration)
        {
            configuration.HasAssociation(x => x.ApnetUser).HasFieldName("_ApnetUser").WithOpposite(x => x.AUTH_Clients).ToColumn("UserId").HasConstraint((y, x) => x.UserId == y.UserId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.AUTH_ClientScopes).HasFieldName("_AUTHClientScopes").WithOpposite(x => x.AUTHClient).ToColumn("ClientId").HasConstraint((y, x) => x.ClientId == y.ClientId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.AUTH_ClientSecrets).HasFieldName("_AUTHClientSecrets").WithOpposite(x => x.AUTHClient).ToColumn("ClientId").HasConstraint((y, x) => x.ClientId == y.ClientId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region AUTH_Scope

        public MappingConfiguration<AUTH_Scope> GetAUTH_ScopeMappingConfiguration()
        {
            MappingConfiguration<AUTH_Scope> configuration = this.GetAUTH_ScopeClassConfiguration();
            this.PrepareAUTH_ScopePropertyConfigurations(configuration);
            this.PrepareAUTH_ScopeAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<AUTH_Scope> GetAUTH_ScopeClassConfiguration()
        {
            MappingConfiguration<AUTH_Scope> configuration = new MappingConfiguration<AUTH_Scope>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("AUTH_Scope");

            return configuration;
        }

        public void PrepareAUTH_ScopePropertyConfigurations(MappingConfiguration<AUTH_Scope> configuration)
        {
            configuration.HasProperty(x => x.ScopeId).IsIdentity(KeyGenerator.Default).HasFieldName("_ScopeId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ScopeId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.Name).HasFieldName("_Name").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNotNullable().HasColumnType("nvarchar").HasLength(80);
            configuration.HasProperty(x => x.DisplayName).HasFieldName("_DisplayName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DisplayName").IsNotNullable().HasColumnType("nvarchar").HasLength(80);
            configuration.HasProperty(x => x.Description).HasFieldName("_Description").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Description").IsNotNullable().HasColumnType("nvarchar").HasLength(400);
        }

        public void PrepareAUTH_ScopeAssociationConfigurations(MappingConfiguration<AUTH_Scope> configuration)
        {
            configuration.HasAssociation(x => x.AUTH_ClientScopes).HasFieldName("_AUTHClientScopes").WithOpposite(x => x.AUTHScope).ToColumn("ScopeId").HasConstraint((y, x) => x.ScopeId == y.ScopeId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.AUTH_ScopeClaims).HasFieldName("_AUTHScopeClaims").WithOpposite(x => x.AUTHScope).ToColumn("ScopeId").HasConstraint((y, x) => x.ScopeId == y.ScopeId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region AUTH_ClientScope

        public MappingConfiguration<AUTH_ClientScope> GetAUTH_ClientScopeMappingConfiguration()
        {
            MappingConfiguration<AUTH_ClientScope> configuration = this.GetAUTH_ClientScopeClassConfiguration();
            this.PrepareAUTH_ClientScopePropertyConfigurations(configuration);
            this.PrepareAUTH_ClientScopeAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<AUTH_ClientScope> GetAUTH_ClientScopeClassConfiguration()
        {
            MappingConfiguration<AUTH_ClientScope> configuration = new MappingConfiguration<AUTH_ClientScope>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("AUTH_ClientScope");

            return configuration;
        }

        public void PrepareAUTH_ClientScopePropertyConfigurations(MappingConfiguration<AUTH_ClientScope> configuration)
        {
            configuration.HasProperty(x => x.ClientScopeId).IsIdentity(KeyGenerator.Default).HasFieldName("_ClientScopeId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ClientScopeId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.ClientId).HasFieldName("_ClientId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ClientId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.ScopeId).HasFieldName("_ScopeId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ScopeId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.Name).HasFieldName("_Name").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNotNullable().HasColumnType("nvarchar").HasLength(80);
        }

        public void PrepareAUTH_ClientScopeAssociationConfigurations(MappingConfiguration<AUTH_ClientScope> configuration)
        {
            configuration.HasAssociation(x => x.AUTHClient).HasFieldName("_AUTHClient").WithOpposite(x => x.AUTH_ClientScopes).ToColumn("ClientId").HasConstraint((y, x) => x.ClientId == y.ClientId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.AUTHScope).HasFieldName("_AUTHScope").WithOpposite(x => x.AUTH_ClientScopes).ToColumn("ScopeId").HasConstraint((y, x) => x.ScopeId == y.ScopeId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region AUTH_ScopeClaim

        public MappingConfiguration<AUTH_ScopeClaim> GetAUTH_ScopeClaimMappingConfiguration()
        {
            MappingConfiguration<AUTH_ScopeClaim> configuration = this.GetAUTH_ScopeClaimClassConfiguration();
            this.PrepareAUTH_ScopeClaimPropertyConfigurations(configuration);
            this.PrepareAUTH_ScopeClaimAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<AUTH_ScopeClaim> GetAUTH_ScopeClaimClassConfiguration()
        {
            MappingConfiguration<AUTH_ScopeClaim> configuration = new MappingConfiguration<AUTH_ScopeClaim>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("AUTH_ScopeClaim");

            return configuration;
        }

        public void PrepareAUTH_ScopeClaimPropertyConfigurations(MappingConfiguration<AUTH_ScopeClaim> configuration)
        {
            configuration.HasProperty(x => x.ScopeClaimId).IsIdentity(KeyGenerator.Default).HasFieldName("_ScopeClaimId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ScopeClaimId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.ScopeId).HasFieldName("_ScopeId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ScopeId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.Name).HasFieldName("_Name").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Name").IsNotNullable().HasColumnType("nvarchar").HasLength(80);
            configuration.HasProperty(x => x.Description).HasFieldName("_Description").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Description").IsNotNullable().HasColumnType("nvarchar").HasLength(400);
            configuration.HasProperty(x => x.AlwaysIncludeInIdToken).HasFieldName("_AlwaysIncludeInIdToken").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AlwaysIncludeInIdToken").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PrepareAUTH_ScopeClaimAssociationConfigurations(MappingConfiguration<AUTH_ScopeClaim> configuration)
        {
            configuration.HasAssociation(x => x.AUTHScope).HasFieldName("_AUTHScope").WithOpposite(x => x.AUTH_ScopeClaims).ToColumn("ScopeId").HasConstraint((y, x) => x.ScopeId == y.ScopeId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region AUTH_ClientSecret

        public MappingConfiguration<AUTH_ClientSecret> GetAUTH_ClientSecretMappingConfiguration()
        {
            MappingConfiguration<AUTH_ClientSecret> configuration = this.GetAUTH_ClientSecretClassConfiguration();
            this.PrepareAUTH_ClientSecretPropertyConfigurations(configuration);
            this.PrepareAUTH_ClientSecretAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<AUTH_ClientSecret> GetAUTH_ClientSecretClassConfiguration()
        {
            MappingConfiguration<AUTH_ClientSecret> configuration = new MappingConfiguration<AUTH_ClientSecret>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("AUTH_ClientSecret");

            return configuration;
        }

        public void PrepareAUTH_ClientSecretPropertyConfigurations(MappingConfiguration<AUTH_ClientSecret> configuration)
        {
            configuration.HasProperty(x => x.ClientSecretId).IsIdentity(KeyGenerator.Default).HasFieldName("_ClientSecretId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ClientSecretId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.ClientId).HasFieldName("_ClientId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ClientId").IsNotNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.ClientSecret).HasFieldName("_ClientSecret").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ClientSecret").IsNotNullable().HasColumnType("nvarchar").HasLength(80);
        }

        public void PrepareAUTH_ClientSecretAssociationConfigurations(MappingConfiguration<AUTH_ClientSecret> configuration)
        {
            configuration.HasAssociation(x => x.AUTHClient).HasFieldName("_AUTHClient").WithOpposite(x => x.AUTH_ClientSecrets).ToColumn("ClientId").HasConstraint((y, x) => x.ClientId == y.ClientId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #endregion

        #region PACS

        #region PACS_ProcessedDatum

        public MappingConfiguration<PACS_ProcessedDatum> GetPACS_ProcessedDatumMappingConfiguration()
        {
            MappingConfiguration<PACS_ProcessedDatum> configuration = this.GetPACS_ProcessedDatumClassConfiguration();
            this.PreparePACS_ProcessedDatumPropertyConfigurations(configuration);
            this.PreparePACS_ProcessedDatumAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<PACS_ProcessedDatum> GetPACS_ProcessedDatumClassConfiguration()
        {
            MappingConfiguration<PACS_ProcessedDatum> configuration = new MappingConfiguration<PACS_ProcessedDatum>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_ProcessedData");

            return configuration;
        }

        public void PreparePACS_ProcessedDatumPropertyConfigurations(MappingConfiguration<PACS_ProcessedDatum> configuration)
        {
            configuration.HasProperty(x => x.ProcessedDataID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_ProcessedDataID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ProcessedDataID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.RawDataID).HasFieldName("_RawDataID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RawDataID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.ProcessedDataLabel).HasFieldName("_ProcessedDataLabel").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ProcessedDataLabel").IsNullable().HasColumnType("nvarchar").HasLength(50);
            configuration.HasProperty(x => x.ProcessDataXMLString).HasFieldName("_ProcessDataXMLString").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ProcessDataXMLString").IsNullable().HasColumnType("varchar(max)").HasLength(0);
            configuration.HasProperty(x => x.UserID).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.DicomFrameID).HasFieldName("_DicomFrameID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DicomFrameID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.DateCreated).HasFieldName("_DateCreated").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DateCreated").IsNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.DateModified).HasFieldName("_DateModified").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DateModified").IsNullable().HasColumnType("datetime");
        }

        public void PreparePACS_ProcessedDatumAssociationConfigurations(MappingConfiguration<PACS_ProcessedDatum> configuration)
        {
            configuration.HasAssociation(x => x.PACSRawDatum).HasFieldName("_PACSRawDatum").WithOpposite(x => x.PACS_ProcessedData).ToColumn("RawDataID").HasConstraint((x, y) => x.RawDataID == y.RawDataID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.PACSDicomFrame).HasFieldName("_PACSDicomFrame").WithOpposite(x => x.PACS_ProcessedData).ToColumn("DicomFrameID").HasConstraint((x, y) => x.DicomFrameID == y.DicomFrameID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.PACS_ProcessedData).ToColumn("UserID").HasConstraint((x, y) => x.UserID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #region PACS_SeriesAttachments

        public MappingConfiguration<PACS_SeriesAttachment> GetPACS_SeriesAttachmentsMappingConfiguration()
        {
            MappingConfiguration<PACS_SeriesAttachment> configuration = this.GetPACS_SeriesAttachmentsClassConfiguration();
            this.PreparePACS_SeriesAttachmentsPropertyConfigurations(configuration);
            this.PreparePACS_SeriesAttachmentsAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<PACS_SeriesAttachment> GetPACS_SeriesAttachmentsClassConfiguration()
        {
            MappingConfiguration<PACS_SeriesAttachment> configuration = new MappingConfiguration<PACS_SeriesAttachment>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("PACS_SeriesAttachments");

            return configuration;
        }

        public void PreparePACS_SeriesAttachmentsPropertyConfigurations(MappingConfiguration<PACS_SeriesAttachment> configuration)
        {
            configuration.HasProperty(x => x.SeriesAttachmentID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_SeriesAttachmentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeriesAttachmentID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.DateCreated).HasFieldName("_DateCreated").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DateCreated").IsNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.UserID).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.SeriesID).HasFieldName("_SeriesID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("SeriesID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.GReportID).HasFieldName("_GReportID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("GReportID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.Laterality).HasFieldName("_Laterality").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("Laterality").IsNullable().HasColumnType("nvarchar").HasLength(10);
            configuration.HasProperty(x => x.FileLocation).HasFieldName("_FileLocation").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FileLocation").IsNullable().HasColumnType("varchar").HasLength(512);
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.StatusID).HasFieldName("_StatusID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StatusID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
        }

        public void PreparePACS_SeriesAttachmentsAssociationConfigurations(MappingConfiguration<PACS_SeriesAttachment> configuration)
        {
            configuration.HasAssociation(x => x.PACSSeries).HasFieldName("_PACSSeries").WithOpposite(x => x.PACS_SeriesAttachments).ToColumn("SeriesID").HasConstraint((x, y) => x.SeriesID == y.SeriesID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.GRDReport).HasFieldName("_GRDReport").WithOpposite(x => x.PACS_SeriesAttachments).ToColumn("GReportID").HasConstraint((x, y) => x.GReportID == y.GReportID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.PACS_SeriesAttachments).ToColumn("UserID").HasConstraint((x, y) => x.UserID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.UploadStatus).HasFieldName("_UploadStatus").ToColumn("StatusID").HasConstraint((x, y) => x.StatusID == y.StatusID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion

        #endregion

        #region DOCU

        public MappingConfiguration<DOCU_AuthorizationType> GetDOCU_AuthorizationTypeMappingConfiguration()
        {
            MappingConfiguration<DOCU_AuthorizationType> configuration = this.GetDOCU_AuthorizationTypeClassConfiguration();
            this.PrepareDOCU_AuthorizationTypePropertyConfigurations(configuration);
            this.PrepareDOCU_AuthorizationTypeAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<DOCU_AuthorizationType> GetDOCU_AuthorizationTypeClassConfiguration()
        {
            MappingConfiguration<DOCU_AuthorizationType> configuration = new MappingConfiguration<DOCU_AuthorizationType>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("DOCU_AuthorizationTypes");

            return configuration;
        }

        public void PrepareDOCU_AuthorizationTypePropertyConfigurations(MappingConfiguration<DOCU_AuthorizationType> configuration)
        {
            configuration.HasProperty(x => x.DocuAuthorizationTypeID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_DocuAuthorizationTypeID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocuAuthorizationTypeID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.DocuAuthorizationDes).HasFieldName("_DocuAuthorizationDes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocuAuthorizationDes").IsNullable().HasColumnType("nvarchar").HasLength(50);
        }

        public void PrepareDOCU_AuthorizationTypeAssociationConfigurations(MappingConfiguration<DOCU_AuthorizationType> configuration)
        {
            configuration.HasAssociation(x => x.DOCU_DocumentGroups).HasFieldName("_DOCUDocumentGroups").WithOpposite(x => x.DOCUAuthorizationType).ToColumn("DocuAuthorizationID").HasConstraint((y, x) => x.DocuAuthorizationID == y.DocuAuthorizationTypeID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<DOCU_DocumentVersionUser> GetDOCU_DocumentVersionUserMappingConfiguration()
        {
            MappingConfiguration<DOCU_DocumentVersionUser> configuration = this.GetDOCU_DocumentVersionUserClassConfiguration();
            this.PrepareDOCU_DocumentVersionUserPropertyConfigurations(configuration);
            this.PrepareDOCU_DocumentVersionUserAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<DOCU_DocumentVersionUser> GetDOCU_DocumentVersionUserClassConfiguration()
        {
            MappingConfiguration<DOCU_DocumentVersionUser> configuration = new MappingConfiguration<DOCU_DocumentVersionUser>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("DOCU_DocumentVersionUsers");

            return configuration;
        }

        public void PrepareDOCU_DocumentVersionUserPropertyConfigurations(MappingConfiguration<DOCU_DocumentVersionUser> configuration)
        {
            configuration.HasProperty(x => x.DocumentVersionUserID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_DocumentVersionUserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentVersionUserID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.UserID).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.LastReadDate).HasFieldName("_LastReadDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastReadDate").IsNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.DocumentVersionID).HasFieldName("_DocumentVersionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentVersionID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
        }

        public void PrepareDOCU_DocumentVersionUserAssociationConfigurations(MappingConfiguration<DOCU_DocumentVersionUser> configuration)
        {
            configuration.HasAssociation(x => x.DOCUDocumentVersion).HasFieldName("_DOCUDocumentVersion").WithOpposite(x => x.DOCU_DocumentVersionUsers).ToColumn("DocumentVersionID").HasConstraint((x, y) => x.DocumentVersionID == y.DocumentVersionID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.DOCU_DocumentVersionUsers).ToColumn("UserID").HasConstraint((x, y) => x.UserID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<DOCU_DocumentVersion> GetDOCU_DocumentVersionMappingConfiguration()
        {
            MappingConfiguration<DOCU_DocumentVersion> configuration = this.GetDOCU_DocumentVersionClassConfiguration();
            this.PrepareDOCU_DocumentVersionPropertyConfigurations(configuration);
            this.PrepareDOCU_DocumentVersionAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<DOCU_DocumentVersion> GetDOCU_DocumentVersionClassConfiguration()
        {
            MappingConfiguration<DOCU_DocumentVersion> configuration = new MappingConfiguration<DOCU_DocumentVersion>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("DOCU_DocumentVersions");

            return configuration;
        }

        public void PrepareDOCU_DocumentVersionPropertyConfigurations(MappingConfiguration<DOCU_DocumentVersion> configuration)
        {
            configuration.HasProperty(x => x.DocumentVersionID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_DocumentVersionID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentVersionID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.DocumentVersion).HasFieldName("_DocumentVersion").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentVersion").IsNullable().HasColumnType("nvarchar").HasLength(50);
            configuration.HasProperty(x => x.FileLocation).HasFieldName("_FileLocation").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("FileLocation").IsNullable().HasColumnType("nvarchar").HasLength(512);
            configuration.HasProperty(x => x.DocumentID).HasFieldName("_DocumentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.RawFileLocation).HasFieldName("_RawFileLocation").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RawFileLocation").IsNullable().HasColumnType("nvarchar").HasLength(512);
            configuration.HasProperty(x => x.AttachmentFileLocation).HasFieldName("_AttachmentFileLocation").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AttachmentFileLocation").IsNullable().HasColumnType("nvarchar").HasLength(512);
            configuration.HasProperty(x => x.StatusID).HasFieldName("_StatusID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("StatusID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.AttachmentStatusID).HasFieldName("_AttachmentStatusID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AttachmentStatusID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.LastError).HasFieldName("_LastError").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("LastError").IsNullable().HasColumnType("nvarchar").HasLength(1024);
            configuration.HasProperty(x => x.HasError).HasFieldName("_HasError").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("HasError").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.AttachmentLastError).HasFieldName("_AttachmentLastError").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AttachmentLastError").IsNullable().HasColumnType("nvarchar").HasLength(1024);
            configuration.HasProperty(x => x.AttachmentHasError).HasFieldName("_AttachmentHasError").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("AttachmentHasError").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
        }

        public void PrepareDOCU_DocumentVersionAssociationConfigurations(MappingConfiguration<DOCU_DocumentVersion> configuration)
        {
            configuration.HasAssociation(x => x.DOCUDocument).HasFieldName("_DOCUDocument").WithOpposite(x => x.DOCU_DocumentVersions).ToColumn("DocumentID").HasConstraint((x, y) => x.DocumentID == y.DocumentID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.DOCU_DocumentVersionUsers).HasFieldName("_DOCUDocumentVersionUsers").WithOpposite(x => x.DOCUDocumentVersion).ToColumn("DocumentVersionID").HasConstraint((y, x) => x.DocumentVersionID == y.DocumentVersionID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.UploadStatus).HasFieldName("_UploadStatus").ToColumn("StatusID").HasConstraint((x, y) => x.StatusID == y.StatusID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.AttachmentUploadStatus).HasFieldName("_AttachmentUploadStatus").ToColumn("AttachmentStatusID").HasConstraint((x, y) => x.AttachmentStatusID == y.StatusID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<DOCU_DocumentGroup> GetDOCU_DocumentGroupMappingConfiguration()
        {
            MappingConfiguration<DOCU_DocumentGroup> configuration = this.GetDOCU_DocumentGroupClassConfiguration();
            this.PrepareDOCU_DocumentGroupPropertyConfigurations(configuration);
            this.PrepareDOCU_DocumentGroupAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<DOCU_DocumentGroup> GetDOCU_DocumentGroupClassConfiguration()
        {
            MappingConfiguration<DOCU_DocumentGroup> configuration = new MappingConfiguration<DOCU_DocumentGroup>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("DOCU_DocumentGroups");

            return configuration;
        }

        public void PrepareDOCU_DocumentGroupPropertyConfigurations(MappingConfiguration<DOCU_DocumentGroup> configuration)
        {
            configuration.HasProperty(x => x.DocumentGroupID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_DocumentGroupID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentGroupID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.DocuAuthorizationID).HasFieldName("_DocuAuthorizationID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocuAuthorizationID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.TrialID).HasFieldName("_TrialID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("TrialID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.DocumentGroupDes).HasFieldName("_DocumentGroupDes").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentGroupDes").IsNullable().HasColumnType("nvarchar").HasLength(512);
        }

        public void PrepareDOCU_DocumentGroupAssociationConfigurations(MappingConfiguration<DOCU_DocumentGroup> configuration)
        {
            configuration.HasAssociation(x => x.PACSTrial).HasFieldName("_PACSTrial").WithOpposite(x => x.DOCU_DocumentGroups).ToColumn("TrialID").HasConstraint((x, y) => x.TrialID == y.TrialID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.DOCUAuthorizationType).HasFieldName("_DOCUAuthorizationType").WithOpposite(x => x.DOCU_DocumentGroups).ToColumn("DocuAuthorizationID").HasConstraint((x, y) => x.DocuAuthorizationID == y.DocuAuthorizationTypeID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.DOCU_Documents).HasFieldName("_DOCUDocuments").WithOpposite(x => x.DOCUDocumentGroup).ToColumn("DocumentGroupID").HasConstraint((y, x) => x.DocumentGroupID == y.DocumentGroupID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<DOCU_Document> GetDOCU_DocumentMappingConfiguration()
        {
            MappingConfiguration<DOCU_Document> configuration = this.GetDOCU_DocumentClassConfiguration();
            this.PrepareDOCU_DocumentPropertyConfigurations(configuration);
            this.PrepareDOCU_DocumentAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<DOCU_Document> GetDOCU_DocumentClassConfiguration()
        {
            MappingConfiguration<DOCU_Document> configuration = new MappingConfiguration<DOCU_Document>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("DOCU_Documents");

            return configuration;
        }

        public void PrepareDOCU_DocumentPropertyConfigurations(MappingConfiguration<DOCU_Document> configuration)
        {
            configuration.HasProperty(x => x.DocumentID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_DocumentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.IsActive).HasFieldName("_IsActive").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("IsActive").IsNotNullable().HasColumnType("bit").HasPrecision(0).HasScale(0).HasDefaultValue();
            configuration.HasProperty(x => x.ReviewGracePeriodDays).HasFieldName("_ReviewGracePeriodDays").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReviewGracePeriodDays").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.ReviewGoodUntilMonths).HasFieldName("_ReviewGoodUntilMonths").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ReviewGoodUntilMonths").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.DocumentName).HasFieldName("_DocumentName").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentName").IsNullable().HasColumnType("nvarchar").HasLength(512);
            configuration.HasProperty(x => x.DocumentGroupID).HasFieldName("_DocumentGroupID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentGroupID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.ApprovalDate).HasFieldName("_ApprovalDate").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("ApprovalDate").IsNullable().HasColumnType("datetime");
            configuration.HasProperty(x => x.InternalAuditPeriodDays).HasFieldName("_InternalAuditPeriodDays").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("InternalAuditPeriodDays").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.InternalAuditGoodUntilMonths).HasFieldName("_InternalAuditGoodUntilMonths").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("InternalAuditGoodUntilMonths").IsNullable().HasColumnType("int").HasPrecision(0).HasScale(0);
        }

        public void PrepareDOCU_DocumentAssociationConfigurations(MappingConfiguration<DOCU_Document> configuration)
        {
            configuration.HasAssociation(x => x.DOCUDocumentGroup).HasFieldName("_DOCUDocumentGroup").WithOpposite(x => x.DOCU_Documents).ToColumn("DocumentGroupID").HasConstraint((x, y) => x.DocumentGroupID == y.DocumentGroupID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.DOCU_DocumentVersions).HasFieldName("_DOCUDocumentVersions").WithOpposite(x => x.DOCUDocument).ToColumn("DocumentID").HasConstraint((y, x) => x.DocumentID == y.DocumentID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.DOCU_DocumentUsers).HasFieldName("_DOCUDocumentUsers").WithOpposite(x => x.DOCUDocument).ToColumn("DocumentID").HasConstraint((y, x) => x.DocumentID == y.DocumentID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.DOCU_DocumentRoles).HasFieldName("_DOCUDocumentRoles").WithOpposite(x => x.DOCUDocument).ToColumn("DocumentID").HasConstraint((y, x) => x.DocumentID == y.DocumentID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<DOCU_DocumentUser> GetDOCU_DocumentUserMappingConfiguration()
        {
            MappingConfiguration<DOCU_DocumentUser> configuration = this.GetDOCU_DocumentUserClassConfiguration();
            this.PrepareDOCU_DocumentUserPropertyConfigurations(configuration);
            this.PrepareDOCU_DocumentUserAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<DOCU_DocumentUser> GetDOCU_DocumentUserClassConfiguration()
        {
            MappingConfiguration<DOCU_DocumentUser> configuration = new MappingConfiguration<DOCU_DocumentUser>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("DOCU_DocumentUsers");

            return configuration;
        }

        public void PrepareDOCU_DocumentUserPropertyConfigurations(MappingConfiguration<DOCU_DocumentUser> configuration)
        {
            configuration.HasProperty(x => x.DocumentUserID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_DocumentUserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentUserID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.UserID).HasFieldName("_UserID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("UserID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.DocumentID).HasFieldName("_DocumentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
        }

        public void PrepareDOCU_DocumentUserAssociationConfigurations(MappingConfiguration<DOCU_DocumentUser> configuration)
        {
            configuration.HasAssociation(x => x.CONTACTUser).HasFieldName("_CONTACTUser").WithOpposite(x => x.DOCU_DocumentUsers).ToColumn("UserID").HasConstraint((x, y) => x.UserID == y.UserID).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.DOCUDocument).HasFieldName("_DOCUDocument").WithOpposite(x => x.DOCU_DocumentUsers).ToColumn("DocumentID").HasConstraint((x, y) => x.DocumentID == y.DocumentID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        public MappingConfiguration<DOCU_DocumentRole> GetDOCU_DocumentRoleMappingConfiguration()
        {
            MappingConfiguration<DOCU_DocumentRole> configuration = this.GetDOCU_DocumentRoleClassConfiguration();
            this.PrepareDOCU_DocumentRolePropertyConfigurations(configuration);
            this.PrepareDOCU_DocumentRoleAssociationConfigurations(configuration);

            return configuration;
        }

        public MappingConfiguration<DOCU_DocumentRole> GetDOCU_DocumentRoleClassConfiguration()
        {
            MappingConfiguration<DOCU_DocumentRole> configuration = new MappingConfiguration<DOCU_DocumentRole>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("DOCU_DocumentRoles");

            return configuration;
        }

        public void PrepareDOCU_DocumentRolePropertyConfigurations(MappingConfiguration<DOCU_DocumentRole> configuration)
        {
            configuration.HasProperty(x => x.DocumentRoleID).IsIdentity(KeyGenerator.Autoinc).HasFieldName("_DocumentRoleID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentRoleID").IsNotNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.RoleId).HasFieldName("_RoleId").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("RoleId").IsNullable().HasColumnType("uniqueidentifier").HasPrecision(0).HasScale(0);
            configuration.HasProperty(x => x.DocumentID).HasFieldName("_DocumentID").WithDataAccessKind(DataAccessKind.ReadWrite).ToColumn("DocumentID").IsNullable().HasColumnType("bigint").HasPrecision(0).HasScale(0);
        }

        public void PrepareDOCU_DocumentRoleAssociationConfigurations(MappingConfiguration<DOCU_DocumentRole> configuration)
        {
            configuration.HasAssociation(x => x.AspnetRole).HasFieldName("_AspnetRole").WithOpposite(x => x.DOCU_DocumentRoles).ToColumn("RoleId").HasConstraint((x, y) => x.RoleId == y.RoleId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation(x => x.DOCUDocument).HasFieldName("_DOCUDocument").WithOpposite(x => x.DOCU_DocumentRoles).ToColumn("DocumentID").HasConstraint((x, y) => x.DocumentID == y.DocumentID).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        #endregion
    }
}
#pragma warning restore 1591